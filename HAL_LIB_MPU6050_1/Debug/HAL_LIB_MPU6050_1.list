
HAL_LIB_MPU6050_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000072cc  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f8  08007458  08007458  00017458  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007750  08007750  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08007750  08007750  00017750  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007758  08007758  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007758  08007758  00017758  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800775c  0800775c  0001775c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007760  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00000200  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000274  20000274  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010db7  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e42  00000000  00000000  00030e5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ed0  00000000  00000000  00032ca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000e50  00000000  00000000  00033b70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000215f0  00000000  00000000  000349c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011a15  00000000  00000000  00055fb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cdf7a  00000000  00000000  000679c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0013593f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000045f4  00000000  00000000  00135994  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000074 	.word	0x20000074
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800743c 	.word	0x0800743c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000078 	.word	0x20000078
 80001c4:	0800743c 	.word	0x0800743c

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2iz>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa8:	d215      	bcs.n	8000ad6 <__aeabi_d2iz+0x36>
 8000aaa:	d511      	bpl.n	8000ad0 <__aeabi_d2iz+0x30>
 8000aac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab4:	d912      	bls.n	8000adc <__aeabi_d2iz+0x3c>
 8000ab6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000abe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ac2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ac6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aca:	bf18      	it	ne
 8000acc:	4240      	negne	r0, r0
 8000ace:	4770      	bx	lr
 8000ad0:	f04f 0000 	mov.w	r0, #0
 8000ad4:	4770      	bx	lr
 8000ad6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ada:	d105      	bne.n	8000ae8 <__aeabi_d2iz+0x48>
 8000adc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	bf08      	it	eq
 8000ae2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ae6:	4770      	bx	lr
 8000ae8:	f04f 0000 	mov.w	r0, #0
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_d2f>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000af8:	bf24      	itt	cs
 8000afa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000afe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b02:	d90d      	bls.n	8000b20 <__aeabi_d2f+0x30>
 8000b04:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b10:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b18:	bf08      	it	eq
 8000b1a:	f020 0001 	biceq.w	r0, r0, #1
 8000b1e:	4770      	bx	lr
 8000b20:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b24:	d121      	bne.n	8000b6a <__aeabi_d2f+0x7a>
 8000b26:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b2a:	bfbc      	itt	lt
 8000b2c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	4770      	bxlt	lr
 8000b32:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b3a:	f1c2 0218 	rsb	r2, r2, #24
 8000b3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b46:	fa20 f002 	lsr.w	r0, r0, r2
 8000b4a:	bf18      	it	ne
 8000b4c:	f040 0001 	orrne.w	r0, r0, #1
 8000b50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b5c:	ea40 000c 	orr.w	r0, r0, ip
 8000b60:	fa23 f302 	lsr.w	r3, r3, r2
 8000b64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b68:	e7cc      	b.n	8000b04 <__aeabi_d2f+0x14>
 8000b6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b6e:	d107      	bne.n	8000b80 <__aeabi_d2f+0x90>
 8000b70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b74:	bf1e      	ittt	ne
 8000b76:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b7a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b7e:	4770      	bxne	lr
 8000b80:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b84:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop

08000b90 <__aeabi_uldivmod>:
 8000b90:	b953      	cbnz	r3, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b92:	b94a      	cbnz	r2, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b94:	2900      	cmp	r1, #0
 8000b96:	bf08      	it	eq
 8000b98:	2800      	cmpeq	r0, #0
 8000b9a:	bf1c      	itt	ne
 8000b9c:	f04f 31ff 	movne.w	r1, #4294967295
 8000ba0:	f04f 30ff 	movne.w	r0, #4294967295
 8000ba4:	f000 b96e 	b.w	8000e84 <__aeabi_idiv0>
 8000ba8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb0:	f000 f806 	bl	8000bc0 <__udivmoddi4>
 8000bb4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bbc:	b004      	add	sp, #16
 8000bbe:	4770      	bx	lr

08000bc0 <__udivmoddi4>:
 8000bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bc4:	9d08      	ldr	r5, [sp, #32]
 8000bc6:	4604      	mov	r4, r0
 8000bc8:	468c      	mov	ip, r1
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	f040 8083 	bne.w	8000cd6 <__udivmoddi4+0x116>
 8000bd0:	428a      	cmp	r2, r1
 8000bd2:	4617      	mov	r7, r2
 8000bd4:	d947      	bls.n	8000c66 <__udivmoddi4+0xa6>
 8000bd6:	fab2 f282 	clz	r2, r2
 8000bda:	b142      	cbz	r2, 8000bee <__udivmoddi4+0x2e>
 8000bdc:	f1c2 0020 	rsb	r0, r2, #32
 8000be0:	fa24 f000 	lsr.w	r0, r4, r0
 8000be4:	4091      	lsls	r1, r2
 8000be6:	4097      	lsls	r7, r2
 8000be8:	ea40 0c01 	orr.w	ip, r0, r1
 8000bec:	4094      	lsls	r4, r2
 8000bee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000bf2:	0c23      	lsrs	r3, r4, #16
 8000bf4:	fbbc f6f8 	udiv	r6, ip, r8
 8000bf8:	fa1f fe87 	uxth.w	lr, r7
 8000bfc:	fb08 c116 	mls	r1, r8, r6, ip
 8000c00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c04:	fb06 f10e 	mul.w	r1, r6, lr
 8000c08:	4299      	cmp	r1, r3
 8000c0a:	d909      	bls.n	8000c20 <__udivmoddi4+0x60>
 8000c0c:	18fb      	adds	r3, r7, r3
 8000c0e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c12:	f080 8119 	bcs.w	8000e48 <__udivmoddi4+0x288>
 8000c16:	4299      	cmp	r1, r3
 8000c18:	f240 8116 	bls.w	8000e48 <__udivmoddi4+0x288>
 8000c1c:	3e02      	subs	r6, #2
 8000c1e:	443b      	add	r3, r7
 8000c20:	1a5b      	subs	r3, r3, r1
 8000c22:	b2a4      	uxth	r4, r4
 8000c24:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c28:	fb08 3310 	mls	r3, r8, r0, r3
 8000c2c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c30:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c34:	45a6      	cmp	lr, r4
 8000c36:	d909      	bls.n	8000c4c <__udivmoddi4+0x8c>
 8000c38:	193c      	adds	r4, r7, r4
 8000c3a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c3e:	f080 8105 	bcs.w	8000e4c <__udivmoddi4+0x28c>
 8000c42:	45a6      	cmp	lr, r4
 8000c44:	f240 8102 	bls.w	8000e4c <__udivmoddi4+0x28c>
 8000c48:	3802      	subs	r0, #2
 8000c4a:	443c      	add	r4, r7
 8000c4c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c50:	eba4 040e 	sub.w	r4, r4, lr
 8000c54:	2600      	movs	r6, #0
 8000c56:	b11d      	cbz	r5, 8000c60 <__udivmoddi4+0xa0>
 8000c58:	40d4      	lsrs	r4, r2
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	e9c5 4300 	strd	r4, r3, [r5]
 8000c60:	4631      	mov	r1, r6
 8000c62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c66:	b902      	cbnz	r2, 8000c6a <__udivmoddi4+0xaa>
 8000c68:	deff      	udf	#255	; 0xff
 8000c6a:	fab2 f282 	clz	r2, r2
 8000c6e:	2a00      	cmp	r2, #0
 8000c70:	d150      	bne.n	8000d14 <__udivmoddi4+0x154>
 8000c72:	1bcb      	subs	r3, r1, r7
 8000c74:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c78:	fa1f f887 	uxth.w	r8, r7
 8000c7c:	2601      	movs	r6, #1
 8000c7e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c82:	0c21      	lsrs	r1, r4, #16
 8000c84:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c88:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c8c:	fb08 f30c 	mul.w	r3, r8, ip
 8000c90:	428b      	cmp	r3, r1
 8000c92:	d907      	bls.n	8000ca4 <__udivmoddi4+0xe4>
 8000c94:	1879      	adds	r1, r7, r1
 8000c96:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c9a:	d202      	bcs.n	8000ca2 <__udivmoddi4+0xe2>
 8000c9c:	428b      	cmp	r3, r1
 8000c9e:	f200 80e9 	bhi.w	8000e74 <__udivmoddi4+0x2b4>
 8000ca2:	4684      	mov	ip, r0
 8000ca4:	1ac9      	subs	r1, r1, r3
 8000ca6:	b2a3      	uxth	r3, r4
 8000ca8:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cac:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cb0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cb4:	fb08 f800 	mul.w	r8, r8, r0
 8000cb8:	45a0      	cmp	r8, r4
 8000cba:	d907      	bls.n	8000ccc <__udivmoddi4+0x10c>
 8000cbc:	193c      	adds	r4, r7, r4
 8000cbe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cc2:	d202      	bcs.n	8000cca <__udivmoddi4+0x10a>
 8000cc4:	45a0      	cmp	r8, r4
 8000cc6:	f200 80d9 	bhi.w	8000e7c <__udivmoddi4+0x2bc>
 8000cca:	4618      	mov	r0, r3
 8000ccc:	eba4 0408 	sub.w	r4, r4, r8
 8000cd0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cd4:	e7bf      	b.n	8000c56 <__udivmoddi4+0x96>
 8000cd6:	428b      	cmp	r3, r1
 8000cd8:	d909      	bls.n	8000cee <__udivmoddi4+0x12e>
 8000cda:	2d00      	cmp	r5, #0
 8000cdc:	f000 80b1 	beq.w	8000e42 <__udivmoddi4+0x282>
 8000ce0:	2600      	movs	r6, #0
 8000ce2:	e9c5 0100 	strd	r0, r1, [r5]
 8000ce6:	4630      	mov	r0, r6
 8000ce8:	4631      	mov	r1, r6
 8000cea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cee:	fab3 f683 	clz	r6, r3
 8000cf2:	2e00      	cmp	r6, #0
 8000cf4:	d14a      	bne.n	8000d8c <__udivmoddi4+0x1cc>
 8000cf6:	428b      	cmp	r3, r1
 8000cf8:	d302      	bcc.n	8000d00 <__udivmoddi4+0x140>
 8000cfa:	4282      	cmp	r2, r0
 8000cfc:	f200 80b8 	bhi.w	8000e70 <__udivmoddi4+0x2b0>
 8000d00:	1a84      	subs	r4, r0, r2
 8000d02:	eb61 0103 	sbc.w	r1, r1, r3
 8000d06:	2001      	movs	r0, #1
 8000d08:	468c      	mov	ip, r1
 8000d0a:	2d00      	cmp	r5, #0
 8000d0c:	d0a8      	beq.n	8000c60 <__udivmoddi4+0xa0>
 8000d0e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d12:	e7a5      	b.n	8000c60 <__udivmoddi4+0xa0>
 8000d14:	f1c2 0320 	rsb	r3, r2, #32
 8000d18:	fa20 f603 	lsr.w	r6, r0, r3
 8000d1c:	4097      	lsls	r7, r2
 8000d1e:	fa01 f002 	lsl.w	r0, r1, r2
 8000d22:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d26:	40d9      	lsrs	r1, r3
 8000d28:	4330      	orrs	r0, r6
 8000d2a:	0c03      	lsrs	r3, r0, #16
 8000d2c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d30:	fa1f f887 	uxth.w	r8, r7
 8000d34:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d38:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d3c:	fb06 f108 	mul.w	r1, r6, r8
 8000d40:	4299      	cmp	r1, r3
 8000d42:	fa04 f402 	lsl.w	r4, r4, r2
 8000d46:	d909      	bls.n	8000d5c <__udivmoddi4+0x19c>
 8000d48:	18fb      	adds	r3, r7, r3
 8000d4a:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d4e:	f080 808d 	bcs.w	8000e6c <__udivmoddi4+0x2ac>
 8000d52:	4299      	cmp	r1, r3
 8000d54:	f240 808a 	bls.w	8000e6c <__udivmoddi4+0x2ac>
 8000d58:	3e02      	subs	r6, #2
 8000d5a:	443b      	add	r3, r7
 8000d5c:	1a5b      	subs	r3, r3, r1
 8000d5e:	b281      	uxth	r1, r0
 8000d60:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d64:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d68:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d6c:	fb00 f308 	mul.w	r3, r0, r8
 8000d70:	428b      	cmp	r3, r1
 8000d72:	d907      	bls.n	8000d84 <__udivmoddi4+0x1c4>
 8000d74:	1879      	adds	r1, r7, r1
 8000d76:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d7a:	d273      	bcs.n	8000e64 <__udivmoddi4+0x2a4>
 8000d7c:	428b      	cmp	r3, r1
 8000d7e:	d971      	bls.n	8000e64 <__udivmoddi4+0x2a4>
 8000d80:	3802      	subs	r0, #2
 8000d82:	4439      	add	r1, r7
 8000d84:	1acb      	subs	r3, r1, r3
 8000d86:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d8a:	e778      	b.n	8000c7e <__udivmoddi4+0xbe>
 8000d8c:	f1c6 0c20 	rsb	ip, r6, #32
 8000d90:	fa03 f406 	lsl.w	r4, r3, r6
 8000d94:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d98:	431c      	orrs	r4, r3
 8000d9a:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d9e:	fa01 f306 	lsl.w	r3, r1, r6
 8000da2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000da6:	fa21 f10c 	lsr.w	r1, r1, ip
 8000daa:	431f      	orrs	r7, r3
 8000dac:	0c3b      	lsrs	r3, r7, #16
 8000dae:	fbb1 f9fe 	udiv	r9, r1, lr
 8000db2:	fa1f f884 	uxth.w	r8, r4
 8000db6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dbe:	fb09 fa08 	mul.w	sl, r9, r8
 8000dc2:	458a      	cmp	sl, r1
 8000dc4:	fa02 f206 	lsl.w	r2, r2, r6
 8000dc8:	fa00 f306 	lsl.w	r3, r0, r6
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0x220>
 8000dce:	1861      	adds	r1, r4, r1
 8000dd0:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dd4:	d248      	bcs.n	8000e68 <__udivmoddi4+0x2a8>
 8000dd6:	458a      	cmp	sl, r1
 8000dd8:	d946      	bls.n	8000e68 <__udivmoddi4+0x2a8>
 8000dda:	f1a9 0902 	sub.w	r9, r9, #2
 8000dde:	4421      	add	r1, r4
 8000de0:	eba1 010a 	sub.w	r1, r1, sl
 8000de4:	b2bf      	uxth	r7, r7
 8000de6:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dea:	fb0e 1110 	mls	r1, lr, r0, r1
 8000dee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000df2:	fb00 f808 	mul.w	r8, r0, r8
 8000df6:	45b8      	cmp	r8, r7
 8000df8:	d907      	bls.n	8000e0a <__udivmoddi4+0x24a>
 8000dfa:	19e7      	adds	r7, r4, r7
 8000dfc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e00:	d22e      	bcs.n	8000e60 <__udivmoddi4+0x2a0>
 8000e02:	45b8      	cmp	r8, r7
 8000e04:	d92c      	bls.n	8000e60 <__udivmoddi4+0x2a0>
 8000e06:	3802      	subs	r0, #2
 8000e08:	4427      	add	r7, r4
 8000e0a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e0e:	eba7 0708 	sub.w	r7, r7, r8
 8000e12:	fba0 8902 	umull	r8, r9, r0, r2
 8000e16:	454f      	cmp	r7, r9
 8000e18:	46c6      	mov	lr, r8
 8000e1a:	4649      	mov	r1, r9
 8000e1c:	d31a      	bcc.n	8000e54 <__udivmoddi4+0x294>
 8000e1e:	d017      	beq.n	8000e50 <__udivmoddi4+0x290>
 8000e20:	b15d      	cbz	r5, 8000e3a <__udivmoddi4+0x27a>
 8000e22:	ebb3 020e 	subs.w	r2, r3, lr
 8000e26:	eb67 0701 	sbc.w	r7, r7, r1
 8000e2a:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e2e:	40f2      	lsrs	r2, r6
 8000e30:	ea4c 0202 	orr.w	r2, ip, r2
 8000e34:	40f7      	lsrs	r7, r6
 8000e36:	e9c5 2700 	strd	r2, r7, [r5]
 8000e3a:	2600      	movs	r6, #0
 8000e3c:	4631      	mov	r1, r6
 8000e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e42:	462e      	mov	r6, r5
 8000e44:	4628      	mov	r0, r5
 8000e46:	e70b      	b.n	8000c60 <__udivmoddi4+0xa0>
 8000e48:	4606      	mov	r6, r0
 8000e4a:	e6e9      	b.n	8000c20 <__udivmoddi4+0x60>
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	e6fd      	b.n	8000c4c <__udivmoddi4+0x8c>
 8000e50:	4543      	cmp	r3, r8
 8000e52:	d2e5      	bcs.n	8000e20 <__udivmoddi4+0x260>
 8000e54:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e58:	eb69 0104 	sbc.w	r1, r9, r4
 8000e5c:	3801      	subs	r0, #1
 8000e5e:	e7df      	b.n	8000e20 <__udivmoddi4+0x260>
 8000e60:	4608      	mov	r0, r1
 8000e62:	e7d2      	b.n	8000e0a <__udivmoddi4+0x24a>
 8000e64:	4660      	mov	r0, ip
 8000e66:	e78d      	b.n	8000d84 <__udivmoddi4+0x1c4>
 8000e68:	4681      	mov	r9, r0
 8000e6a:	e7b9      	b.n	8000de0 <__udivmoddi4+0x220>
 8000e6c:	4666      	mov	r6, ip
 8000e6e:	e775      	b.n	8000d5c <__udivmoddi4+0x19c>
 8000e70:	4630      	mov	r0, r6
 8000e72:	e74a      	b.n	8000d0a <__udivmoddi4+0x14a>
 8000e74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e78:	4439      	add	r1, r7
 8000e7a:	e713      	b.n	8000ca4 <__udivmoddi4+0xe4>
 8000e7c:	3802      	subs	r0, #2
 8000e7e:	443c      	add	r4, r7
 8000e80:	e724      	b.n	8000ccc <__udivmoddi4+0x10c>
 8000e82:	bf00      	nop

08000e84 <__aeabi_idiv0>:
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop

08000e88 <map>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint32_t map(uint32_t sens_giris, uint32_t gir_min, uint32_t gir_max, uint32_t cik_min, uint32_t cik_max){
 8000e88:	b480      	push	{r7}
 8000e8a:	b085      	sub	sp, #20
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	60f8      	str	r0, [r7, #12]
 8000e90:	60b9      	str	r1, [r7, #8]
 8000e92:	607a      	str	r2, [r7, #4]
 8000e94:	603b      	str	r3, [r7, #0]
	return ((((sens_giris - gir_min)*(cik_max - cik_min)) / (gir_max - gir_min)) + cik_min);
 8000e96:	68fa      	ldr	r2, [r7, #12]
 8000e98:	68bb      	ldr	r3, [r7, #8]
 8000e9a:	1ad3      	subs	r3, r2, r3
 8000e9c:	69b9      	ldr	r1, [r7, #24]
 8000e9e:	683a      	ldr	r2, [r7, #0]
 8000ea0:	1a8a      	subs	r2, r1, r2
 8000ea2:	fb02 f203 	mul.w	r2, r2, r3
 8000ea6:	6879      	ldr	r1, [r7, #4]
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	1acb      	subs	r3, r1, r3
 8000eac:	fbb2 f2f3 	udiv	r2, r2, r3
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	4413      	add	r3, r2
}
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	3714      	adds	r7, #20
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr

08000ec0 <denge>:


void denge(int egim){
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b084      	sub	sp, #16
 8000ec4:	af02      	add	r7, sp, #8
 8000ec6:	6078      	str	r0, [r7, #4]

	if (egim < -256){
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	f513 7f80 	cmn.w	r3, #256	; 0x100
 8000ece:	da2e      	bge.n	8000f2e <denge+0x6e>
	//egim = egim *(-1);
	egim = abs(egim);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	bfb8      	it	lt
 8000ed6:	425b      	neglt	r3, r3
 8000ed8:	607b      	str	r3, [r7, #4]
		if (egim > 2048){
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000ee0:	dd0a      	ble.n	8000ef8 <denge+0x38>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 2000);
 8000ee2:	4b31      	ldr	r3, [pc, #196]	; (8000fa8 <denge+0xe8>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000eea:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 1490);
 8000eec:	4b2e      	ldr	r3, [pc, #184]	; (8000fa8 <denge+0xe8>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	f240 52d2 	movw	r2, #1490	; 0x5d2
 8000ef4:	635a      	str	r2, [r3, #52]	; 0x34
	}
	else {
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 1500);
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 1490);
	}
}
 8000ef6:	e052      	b.n	8000f9e <denge+0xde>
				mapR = map(egim, 512, 2048, 1500, 2000);
 8000ef8:	6878      	ldr	r0, [r7, #4]
 8000efa:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000efe:	9300      	str	r3, [sp, #0]
 8000f00:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8000f04:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f08:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f0c:	f7ff ffbc 	bl	8000e88 <map>
 8000f10:	4603      	mov	r3, r0
 8000f12:	461a      	mov	r2, r3
 8000f14:	4b25      	ldr	r3, [pc, #148]	; (8000fac <denge+0xec>)
 8000f16:	601a      	str	r2, [r3, #0]
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, mapR);
 8000f18:	4b24      	ldr	r3, [pc, #144]	; (8000fac <denge+0xec>)
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	4b22      	ldr	r3, [pc, #136]	; (8000fa8 <denge+0xe8>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	639a      	str	r2, [r3, #56]	; 0x38
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 1490);
 8000f22:	4b21      	ldr	r3, [pc, #132]	; (8000fa8 <denge+0xe8>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f240 52d2 	movw	r2, #1490	; 0x5d2
 8000f2a:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000f2c:	e037      	b.n	8000f9e <denge+0xde>
	else if (egim > 256){
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000f34:	dd29      	ble.n	8000f8a <denge+0xca>
		if(egim > 2048){
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000f3c:	dd0a      	ble.n	8000f54 <denge+0x94>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 2000);
 8000f3e:	4b1a      	ldr	r3, [pc, #104]	; (8000fa8 <denge+0xe8>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000f46:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 1490);
 8000f48:	4b17      	ldr	r3, [pc, #92]	; (8000fa8 <denge+0xe8>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f240 52d2 	movw	r2, #1490	; 0x5d2
 8000f50:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000f52:	e024      	b.n	8000f9e <denge+0xde>
			mapL = map(egim, 512, 2048, 1500, 2000);
 8000f54:	6878      	ldr	r0, [r7, #4]
 8000f56:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000f5a:	9300      	str	r3, [sp, #0]
 8000f5c:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8000f60:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f64:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f68:	f7ff ff8e 	bl	8000e88 <map>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	461a      	mov	r2, r3
 8000f70:	4b0f      	ldr	r3, [pc, #60]	; (8000fb0 <denge+0xf0>)
 8000f72:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, mapL);
 8000f74:	4b0e      	ldr	r3, [pc, #56]	; (8000fb0 <denge+0xf0>)
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	4b0b      	ldr	r3, [pc, #44]	; (8000fa8 <denge+0xe8>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 1490);
 8000f7e:	4b0a      	ldr	r3, [pc, #40]	; (8000fa8 <denge+0xe8>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f240 52d2 	movw	r2, #1490	; 0x5d2
 8000f86:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000f88:	e009      	b.n	8000f9e <denge+0xde>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 1500);
 8000f8a:	4b07      	ldr	r3, [pc, #28]	; (8000fa8 <denge+0xe8>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000f92:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 1490);
 8000f94:	4b04      	ldr	r3, [pc, #16]	; (8000fa8 <denge+0xe8>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f240 52d2 	movw	r2, #1490	; 0x5d2
 8000f9c:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000f9e:	bf00      	nop
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	20000170 	.word	0x20000170
 8000fac:	20000258 	.word	0x20000258
 8000fb0:	200001f8 	.word	0x200001f8

08000fb4 <led>:

void led() {
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
	// 0-2^16-1 değerler arası değerler alınabilr
	//alım formatı x(+/-)...y(+/-)... şekilde x sıfırıncı bit olacak y altıncı bit olacak alınan veri paketi 10 bit olacak
	HAL_UART_Receive_IT(&huart4, (uint8_t*) gelen, 5);	// şu an sadece x ekseni için yazılıyor.
 8000fb8:	2205      	movs	r2, #5
 8000fba:	4926      	ldr	r1, [pc, #152]	; (8001054 <led+0xa0>)
 8000fbc:	4826      	ldr	r0, [pc, #152]	; (8001058 <led+0xa4>)
 8000fbe:	f003 ff7e 	bl	8004ebe <HAL_UART_Receive_IT>
	//donusum1 = atoi(gelen);
	if (gelen[4] == 'X') {
 8000fc2:	4b24      	ldr	r3, [pc, #144]	; (8001054 <led+0xa0>)
 8000fc4:	791b      	ldrb	r3, [r3, #4]
 8000fc6:	2b58      	cmp	r3, #88	; 0x58
 8000fc8:	d119      	bne.n	8000ffe <led+0x4a>
		if (gelen[3] == '+') {
 8000fca:	4b22      	ldr	r3, [pc, #136]	; (8001054 <led+0xa0>)
 8000fcc:	78db      	ldrb	r3, [r3, #3]
 8000fce:	2b2b      	cmp	r3, #43	; 0x2b
 8000fd0:	d13e      	bne.n	8001050 <led+0x9c>
			donusum2 = atoi(gelen);
 8000fd2:	4820      	ldr	r0, [pc, #128]	; (8001054 <led+0xa0>)
 8000fd4:	f004 fdf8 	bl	8005bc8 <atoi>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	4a20      	ldr	r2, [pc, #128]	; (800105c <led+0xa8>)
 8000fdc:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 1300);
 8000fde:	4b20      	ldr	r3, [pc, #128]	; (8001060 <led+0xac>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f240 5214 	movw	r2, #1300	; 0x514
 8000fe6:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 1700);
 8000fe8:	4b1d      	ldr	r3, [pc, #116]	; (8001060 <led+0xac>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f240 62a4 	movw	r2, #1700	; 0x6a4
 8000ff0:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 1300);
 8000ff2:	4b1b      	ldr	r3, [pc, #108]	; (8001060 <led+0xac>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f240 5214 	movw	r2, #1300	; 0x514
 8000ffa:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 1500);
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 1500);
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 1500);

	}
}
 8000ffc:	e028      	b.n	8001050 <led+0x9c>
	} else if (gelen[3] == '-') {
 8000ffe:	4b15      	ldr	r3, [pc, #84]	; (8001054 <led+0xa0>)
 8001000:	78db      	ldrb	r3, [r3, #3]
 8001002:	2b2d      	cmp	r3, #45	; 0x2d
 8001004:	d115      	bne.n	8001032 <led+0x7e>
		donusum2 = atoi(gelen);
 8001006:	4813      	ldr	r0, [pc, #76]	; (8001054 <led+0xa0>)
 8001008:	f004 fdde 	bl	8005bc8 <atoi>
 800100c:	4603      	mov	r3, r0
 800100e:	4a13      	ldr	r2, [pc, #76]	; (800105c <led+0xa8>)
 8001010:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 1300);
 8001012:	4b13      	ldr	r3, [pc, #76]	; (8001060 <led+0xac>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f240 5214 	movw	r2, #1300	; 0x514
 800101a:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 1700);
 800101c:	4b10      	ldr	r3, [pc, #64]	; (8001060 <led+0xac>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f240 62a4 	movw	r2, #1700	; 0x6a4
 8001024:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 1300);
 8001026:	4b0e      	ldr	r3, [pc, #56]	; (8001060 <led+0xac>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f240 5214 	movw	r2, #1300	; 0x514
 800102e:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001030:	e00e      	b.n	8001050 <led+0x9c>
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 1500);
 8001032:	4b0b      	ldr	r3, [pc, #44]	; (8001060 <led+0xac>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800103a:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 1500);
 800103c:	4b08      	ldr	r3, [pc, #32]	; (8001060 <led+0xac>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001044:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 1500);
 8001046:	4b06      	ldr	r3, [pc, #24]	; (8001060 <led+0xac>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800104e:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001050:	bf00      	nop
 8001052:	bd80      	pop	{r7, pc}
 8001054:	200001c4 	.word	0x200001c4
 8001058:	20000210 	.word	0x20000210
 800105c:	2000016c 	.word	0x2000016c
 8001060:	200000ac 	.word	0x200000ac
 8001064:	00000000 	.word	0x00000000

08001068 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001068:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800106c:	b084      	sub	sp, #16
 800106e:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001070:	f001 f89c 	bl	80021ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001074:	f000 fce6 	bl	8001a44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001078:	f000 fe84 	bl	8001d84 <MX_GPIO_Init>
  MX_I2C1_Init();
 800107c:	f000 fd4c 	bl	8001b18 <MX_I2C1_Init>
  MX_TIM3_Init();
 8001080:	f000 fd78 	bl	8001b74 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001084:	f000 fdda 	bl	8001c3c <MX_TIM4_Init>
  MX_UART4_Init();
 8001088:	f000 fe52 	bl	8001d30 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */

  __HAL_UART_ENABLE_IT(&huart4, UART_IT_RXNE);
 800108c:	4b3a      	ldr	r3, [pc, #232]	; (8001178 <main+0x110>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	68da      	ldr	r2, [r3, #12]
 8001092:	4b39      	ldr	r3, [pc, #228]	; (8001178 <main+0x110>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f042 0220 	orr.w	r2, r2, #32
 800109a:	60da      	str	r2, [r3, #12]
  __HAL_UART_ENABLE_IT(&huart4, UART_IT_TC);
 800109c:	4b36      	ldr	r3, [pc, #216]	; (8001178 <main+0x110>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	68da      	ldr	r2, [r3, #12]
 80010a2:	4b35      	ldr	r3, [pc, #212]	; (8001178 <main+0x110>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80010aa:	60da      	str	r2, [r3, #12]
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80010ac:	2100      	movs	r1, #0
 80010ae:	4833      	ldr	r0, [pc, #204]	; (800117c <main+0x114>)
 80010b0:	f003 fa3c 	bl	800452c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80010b4:	2104      	movs	r1, #4
 80010b6:	4831      	ldr	r0, [pc, #196]	; (800117c <main+0x114>)
 80010b8:	f003 fa38 	bl	800452c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80010bc:	2108      	movs	r1, #8
 80010be:	482f      	ldr	r0, [pc, #188]	; (800117c <main+0x114>)
 80010c0:	f003 fa34 	bl	800452c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80010c4:	210c      	movs	r1, #12
 80010c6:	482d      	ldr	r0, [pc, #180]	; (800117c <main+0x114>)
 80010c8:	f003 fa30 	bl	800452c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80010cc:	2100      	movs	r1, #0
 80010ce:	482c      	ldr	r0, [pc, #176]	; (8001180 <main+0x118>)
 80010d0:	f003 fa2c 	bl	800452c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80010d4:	2104      	movs	r1, #4
 80010d6:	482a      	ldr	r0, [pc, #168]	; (8001180 <main+0x118>)
 80010d8:	f003 fa28 	bl	800452c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80010dc:	2108      	movs	r1, #8
 80010de:	4828      	ldr	r0, [pc, #160]	; (8001180 <main+0x118>)
 80010e0:	f003 fa24 	bl	800452c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 80010e4:	210c      	movs	r1, #12
 80010e6:	4826      	ldr	r0, [pc, #152]	; (8001180 <main+0x118>)
 80010e8:	f003 fa20 	bl	800452c <HAL_TIM_PWM_Start>

	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 1500);
 80010ec:	4b23      	ldr	r3, [pc, #140]	; (800117c <main+0x114>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80010f4:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_Delay(1000);
 80010f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010fa:	f001 f8c9 	bl	8002290 <HAL_Delay>
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 1500);
 80010fe:	4b1f      	ldr	r3, [pc, #124]	; (800117c <main+0x114>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001106:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_Delay(1000);
 8001108:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800110c:	f001 f8c0 	bl	8002290 <HAL_Delay>

  data = 0x00;
 8001110:	4b1c      	ldr	r3, [pc, #112]	; (8001184 <main+0x11c>)
 8001112:	2200      	movs	r2, #0
 8001114:	701a      	strb	r2, [r3, #0]
  HAL_I2C_Mem_Write(&hi2c1, mpu6050_slave_adress, power_management_1_register, 1, &data, 1, HAL_MAX_DELAY);
 8001116:	f04f 33ff 	mov.w	r3, #4294967295
 800111a:	9302      	str	r3, [sp, #8]
 800111c:	2301      	movs	r3, #1
 800111e:	9301      	str	r3, [sp, #4]
 8001120:	4b18      	ldr	r3, [pc, #96]	; (8001184 <main+0x11c>)
 8001122:	9300      	str	r3, [sp, #0]
 8001124:	2301      	movs	r3, #1
 8001126:	226b      	movs	r2, #107	; 0x6b
 8001128:	21d0      	movs	r1, #208	; 0xd0
 800112a:	4817      	ldr	r0, [pc, #92]	; (8001188 <main+0x120>)
 800112c:	f002 f87c 	bl	8003228 <HAL_I2C_Mem_Write>
  // power management reigster ayarı

  data = 0x08;
 8001130:	4b14      	ldr	r3, [pc, #80]	; (8001184 <main+0x11c>)
 8001132:	2208      	movs	r2, #8
 8001134:	701a      	strb	r2, [r3, #0]
  HAL_I2C_Mem_Write(&hi2c1, mpu6050_slave_adress, gyro_config_register, 1, &data, 1, HAL_MAX_DELAY);
 8001136:	f04f 33ff 	mov.w	r3, #4294967295
 800113a:	9302      	str	r3, [sp, #8]
 800113c:	2301      	movs	r3, #1
 800113e:	9301      	str	r3, [sp, #4]
 8001140:	4b10      	ldr	r3, [pc, #64]	; (8001184 <main+0x11c>)
 8001142:	9300      	str	r3, [sp, #0]
 8001144:	2301      	movs	r3, #1
 8001146:	221b      	movs	r2, #27
 8001148:	21d0      	movs	r1, #208	; 0xd0
 800114a:	480f      	ldr	r0, [pc, #60]	; (8001188 <main+0x120>)
 800114c:	f002 f86c 	bl	8003228 <HAL_I2C_Mem_Write>
  // gyro ayarı

  data = 0x10;
 8001150:	4b0c      	ldr	r3, [pc, #48]	; (8001184 <main+0x11c>)
 8001152:	2210      	movs	r2, #16
 8001154:	701a      	strb	r2, [r3, #0]
  HAL_I2C_Mem_Write(&hi2c1, mpu6050_slave_adress, accelerometer_config_register, 1, &data, 1, HAL_MAX_DELAY);
 8001156:	f04f 33ff 	mov.w	r3, #4294967295
 800115a:	9302      	str	r3, [sp, #8]
 800115c:	2301      	movs	r3, #1
 800115e:	9301      	str	r3, [sp, #4]
 8001160:	4b08      	ldr	r3, [pc, #32]	; (8001184 <main+0x11c>)
 8001162:	9300      	str	r3, [sp, #0]
 8001164:	2301      	movs	r3, #1
 8001166:	221c      	movs	r2, #28
 8001168:	21d0      	movs	r1, #208	; 0xd0
 800116a:	4807      	ldr	r0, [pc, #28]	; (8001188 <main+0x120>)
 800116c:	f002 f85c 	bl	8003228 <HAL_I2C_Mem_Write>
  //ivme ölçer ayarı

  for(i=0;i<2000;i++){
 8001170:	4b06      	ldr	r3, [pc, #24]	; (800118c <main+0x124>)
 8001172:	2200      	movs	r2, #0
 8001174:	601a      	str	r2, [r3, #0]
 8001176:	e092      	b.n	800129e <main+0x236>
 8001178:	20000210 	.word	0x20000210
 800117c:	20000170 	.word	0x20000170
 8001180:	200000ac 	.word	0x200000ac
 8001184:	20000200 	.word	0x20000200
 8001188:	20000100 	.word	0x20000100
 800118c:	200001cc 	.word	0x200001cc
	  prev_time2 = time2;
 8001190:	4bb4      	ldr	r3, [pc, #720]	; (8001464 <main+0x3fc>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4ab4      	ldr	r2, [pc, #720]	; (8001468 <main+0x400>)
 8001196:	6013      	str	r3, [r2, #0]
	  time2 = HAL_GetTick();
 8001198:	f001 f86e 	bl	8002278 <HAL_GetTick>
 800119c:	ee07 0a90 	vmov	s15, r0
 80011a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011a4:	4baf      	ldr	r3, [pc, #700]	; (8001464 <main+0x3fc>)
 80011a6:	edc3 7a00 	vstr	s15, [r3]
	  elapsed_time2 = (time2 - prev_time2)*1000;
 80011aa:	4bae      	ldr	r3, [pc, #696]	; (8001464 <main+0x3fc>)
 80011ac:	ed93 7a00 	vldr	s14, [r3]
 80011b0:	4bad      	ldr	r3, [pc, #692]	; (8001468 <main+0x400>)
 80011b2:	edd3 7a00 	vldr	s15, [r3]
 80011b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011ba:	ed9f 7aac 	vldr	s14, [pc, #688]	; 800146c <main+0x404>
 80011be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011c2:	4bab      	ldr	r3, [pc, #684]	; (8001470 <main+0x408>)
 80011c4:	edc3 7a00 	vstr	s15, [r3]

	  cuffer[0] = 0x43;
 80011c8:	4baa      	ldr	r3, [pc, #680]	; (8001474 <main+0x40c>)
 80011ca:	2243      	movs	r2, #67	; 0x43
 80011cc:	701a      	strb	r2, [r3, #0]
	  HAL_I2C_Master_Transmit(&hi2c1, mpu6050_slave_adress, cuffer, 1, HAL_MAX_DELAY);
 80011ce:	f04f 33ff 	mov.w	r3, #4294967295
 80011d2:	9300      	str	r3, [sp, #0]
 80011d4:	2301      	movs	r3, #1
 80011d6:	4aa7      	ldr	r2, [pc, #668]	; (8001474 <main+0x40c>)
 80011d8:	21d0      	movs	r1, #208	; 0xd0
 80011da:	48a7      	ldr	r0, [pc, #668]	; (8001478 <main+0x410>)
 80011dc:	f001 fd00 	bl	8002be0 <HAL_I2C_Master_Transmit>
	  HAL_I2C_Master_Receive(&hi2c1, mpu6050_slave_adress, cuffer, 6, HAL_MAX_DELAY);
 80011e0:	f04f 33ff 	mov.w	r3, #4294967295
 80011e4:	9300      	str	r3, [sp, #0]
 80011e6:	2306      	movs	r3, #6
 80011e8:	4aa2      	ldr	r2, [pc, #648]	; (8001474 <main+0x40c>)
 80011ea:	21d0      	movs	r1, #208	; 0xd0
 80011ec:	48a2      	ldr	r0, [pc, #648]	; (8001478 <main+0x410>)
 80011ee:	f001 fdf5 	bl	8002ddc <HAL_I2C_Master_Receive>

	  gyro_raw[0] = (cuffer[0] << 8 | cuffer[1]);
 80011f2:	4ba0      	ldr	r3, [pc, #640]	; (8001474 <main+0x40c>)
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	021b      	lsls	r3, r3, #8
 80011f8:	b21a      	sxth	r2, r3
 80011fa:	4b9e      	ldr	r3, [pc, #632]	; (8001474 <main+0x40c>)
 80011fc:	785b      	ldrb	r3, [r3, #1]
 80011fe:	b21b      	sxth	r3, r3
 8001200:	4313      	orrs	r3, r2
 8001202:	b21a      	sxth	r2, r3
 8001204:	4b9d      	ldr	r3, [pc, #628]	; (800147c <main+0x414>)
 8001206:	801a      	strh	r2, [r3, #0]
	  gyro_raw[1] = (cuffer[2] << 8 | cuffer[3]);
 8001208:	4b9a      	ldr	r3, [pc, #616]	; (8001474 <main+0x40c>)
 800120a:	789b      	ldrb	r3, [r3, #2]
 800120c:	021b      	lsls	r3, r3, #8
 800120e:	b21a      	sxth	r2, r3
 8001210:	4b98      	ldr	r3, [pc, #608]	; (8001474 <main+0x40c>)
 8001212:	78db      	ldrb	r3, [r3, #3]
 8001214:	b21b      	sxth	r3, r3
 8001216:	4313      	orrs	r3, r2
 8001218:	b21a      	sxth	r2, r3
 800121a:	4b98      	ldr	r3, [pc, #608]	; (800147c <main+0x414>)
 800121c:	805a      	strh	r2, [r3, #2]
	  gyro_raw[2] = (cuffer[4] << 8 | cuffer[5]);
 800121e:	4b95      	ldr	r3, [pc, #596]	; (8001474 <main+0x40c>)
 8001220:	791b      	ldrb	r3, [r3, #4]
 8001222:	021b      	lsls	r3, r3, #8
 8001224:	b21a      	sxth	r2, r3
 8001226:	4b93      	ldr	r3, [pc, #588]	; (8001474 <main+0x40c>)
 8001228:	795b      	ldrb	r3, [r3, #5]
 800122a:	b21b      	sxth	r3, r3
 800122c:	4313      	orrs	r3, r2
 800122e:	b21a      	sxth	r2, r3
 8001230:	4b92      	ldr	r3, [pc, #584]	; (800147c <main+0x414>)
 8001232:	809a      	strh	r2, [r3, #4]

	  gyro_cal[0] += gyro_raw[0];
 8001234:	4b92      	ldr	r3, [pc, #584]	; (8001480 <main+0x418>)
 8001236:	ed93 7a00 	vldr	s14, [r3]
 800123a:	4b90      	ldr	r3, [pc, #576]	; (800147c <main+0x414>)
 800123c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001240:	ee07 3a90 	vmov	s15, r3
 8001244:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001248:	ee77 7a27 	vadd.f32	s15, s14, s15
 800124c:	4b8c      	ldr	r3, [pc, #560]	; (8001480 <main+0x418>)
 800124e:	edc3 7a00 	vstr	s15, [r3]
	  gyro_cal[1] += gyro_raw[1];
 8001252:	4b8b      	ldr	r3, [pc, #556]	; (8001480 <main+0x418>)
 8001254:	ed93 7a01 	vldr	s14, [r3, #4]
 8001258:	4b88      	ldr	r3, [pc, #544]	; (800147c <main+0x414>)
 800125a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800125e:	ee07 3a90 	vmov	s15, r3
 8001262:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001266:	ee77 7a27 	vadd.f32	s15, s14, s15
 800126a:	4b85      	ldr	r3, [pc, #532]	; (8001480 <main+0x418>)
 800126c:	edc3 7a01 	vstr	s15, [r3, #4]
	  gyro_cal[2] += gyro_raw[2];
 8001270:	4b83      	ldr	r3, [pc, #524]	; (8001480 <main+0x418>)
 8001272:	ed93 7a02 	vldr	s14, [r3, #8]
 8001276:	4b81      	ldr	r3, [pc, #516]	; (800147c <main+0x414>)
 8001278:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800127c:	ee07 3a90 	vmov	s15, r3
 8001280:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001284:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001288:	4b7d      	ldr	r3, [pc, #500]	; (8001480 <main+0x418>)
 800128a:	edc3 7a02 	vstr	s15, [r3, #8]

	  HAL_Delay(3);
 800128e:	2003      	movs	r0, #3
 8001290:	f000 fffe 	bl	8002290 <HAL_Delay>
  for(i=0;i<2000;i++){
 8001294:	4b7b      	ldr	r3, [pc, #492]	; (8001484 <main+0x41c>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	3301      	adds	r3, #1
 800129a:	4a7a      	ldr	r2, [pc, #488]	; (8001484 <main+0x41c>)
 800129c:	6013      	str	r3, [r2, #0]
 800129e:	4b79      	ldr	r3, [pc, #484]	; (8001484 <main+0x41c>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80012a6:	f6ff af73 	blt.w	8001190 <main+0x128>
  }

  gyro_cal[0] /= 2000;
 80012aa:	4b75      	ldr	r3, [pc, #468]	; (8001480 <main+0x418>)
 80012ac:	ed93 7a00 	vldr	s14, [r3]
 80012b0:	eddf 6a75 	vldr	s13, [pc, #468]	; 8001488 <main+0x420>
 80012b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012b8:	4b71      	ldr	r3, [pc, #452]	; (8001480 <main+0x418>)
 80012ba:	edc3 7a00 	vstr	s15, [r3]
  gyro_cal[1] /= 2000;
 80012be:	4b70      	ldr	r3, [pc, #448]	; (8001480 <main+0x418>)
 80012c0:	ed93 7a01 	vldr	s14, [r3, #4]
 80012c4:	eddf 6a70 	vldr	s13, [pc, #448]	; 8001488 <main+0x420>
 80012c8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012cc:	4b6c      	ldr	r3, [pc, #432]	; (8001480 <main+0x418>)
 80012ce:	edc3 7a01 	vstr	s15, [r3, #4]
  gyro_cal[2] /= 2000;
 80012d2:	4b6b      	ldr	r3, [pc, #428]	; (8001480 <main+0x418>)
 80012d4:	ed93 7a02 	vldr	s14, [r3, #8]
 80012d8:	eddf 6a6b 	vldr	s13, [pc, #428]	; 8001488 <main+0x420>
 80012dc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012e0:	4b67      	ldr	r3, [pc, #412]	; (8001480 <main+0x418>)
 80012e2:	edc3 7a02 	vstr	s15, [r3, #8]

  __HAL_UART_ENABLE_IT(&huart4, UART_IT_RXNE);
 80012e6:	4b69      	ldr	r3, [pc, #420]	; (800148c <main+0x424>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	68da      	ldr	r2, [r3, #12]
 80012ec:	4b67      	ldr	r3, [pc, #412]	; (800148c <main+0x424>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f042 0220 	orr.w	r2, r2, #32
 80012f4:	60da      	str	r2, [r3, #12]
  __HAL_UART_ENABLE_IT(&huart4, UART_IT_TC);
 80012f6:	4b65      	ldr	r3, [pc, #404]	; (800148c <main+0x424>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	68da      	ldr	r2, [r3, #12]
 80012fc:	4b63      	ldr	r3, [pc, #396]	; (800148c <main+0x424>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001304:	60da      	str	r2, [r3, #12]
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001306:	2100      	movs	r1, #0
 8001308:	4861      	ldr	r0, [pc, #388]	; (8001490 <main+0x428>)
 800130a:	f003 f90f 	bl	800452c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800130e:	2104      	movs	r1, #4
 8001310:	485f      	ldr	r0, [pc, #380]	; (8001490 <main+0x428>)
 8001312:	f003 f90b 	bl	800452c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001316:	2108      	movs	r1, #8
 8001318:	485d      	ldr	r0, [pc, #372]	; (8001490 <main+0x428>)
 800131a:	f003 f907 	bl	800452c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 800131e:	210c      	movs	r1, #12
 8001320:	485b      	ldr	r0, [pc, #364]	; (8001490 <main+0x428>)
 8001322:	f003 f903 	bl	800452c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001326:	2100      	movs	r1, #0
 8001328:	485a      	ldr	r0, [pc, #360]	; (8001494 <main+0x42c>)
 800132a:	f003 f8ff 	bl	800452c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 800132e:	2104      	movs	r1, #4
 8001330:	4858      	ldr	r0, [pc, #352]	; (8001494 <main+0x42c>)
 8001332:	f003 f8fb 	bl	800452c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8001336:	2108      	movs	r1, #8
 8001338:	4856      	ldr	r0, [pc, #344]	; (8001494 <main+0x42c>)
 800133a:	f003 f8f7 	bl	800452c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 800133e:	210c      	movs	r1, #12
 8001340:	4854      	ldr	r0, [pc, #336]	; (8001494 <main+0x42c>)
 8001342:	f003 f8f3 	bl	800452c <HAL_TIM_PWM_Start>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  prev_time1 = time1;
 8001346:	4b54      	ldr	r3, [pc, #336]	; (8001498 <main+0x430>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a54      	ldr	r2, [pc, #336]	; (800149c <main+0x434>)
 800134c:	6013      	str	r3, [r2, #0]
	  time1 = HAL_GetTick();
 800134e:	f000 ff93 	bl	8002278 <HAL_GetTick>
 8001352:	ee07 0a90 	vmov	s15, r0
 8001356:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800135a:	4b4f      	ldr	r3, [pc, #316]	; (8001498 <main+0x430>)
 800135c:	edc3 7a00 	vstr	s15, [r3]
	  elapsed_time1 = (time1-prev_time1)*1000;
 8001360:	4b4d      	ldr	r3, [pc, #308]	; (8001498 <main+0x430>)
 8001362:	ed93 7a00 	vldr	s14, [r3]
 8001366:	4b4d      	ldr	r3, [pc, #308]	; (800149c <main+0x434>)
 8001368:	edd3 7a00 	vldr	s15, [r3]
 800136c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001370:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 800146c <main+0x404>
 8001374:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001378:	4b49      	ldr	r3, [pc, #292]	; (80014a0 <main+0x438>)
 800137a:	edc3 7a00 	vstr	s15, [r3]

	  tuffer[0] = 0x3B; //accelerometer
 800137e:	4b49      	ldr	r3, [pc, #292]	; (80014a4 <main+0x43c>)
 8001380:	223b      	movs	r2, #59	; 0x3b
 8001382:	701a      	strb	r2, [r3, #0]
	  HAL_I2C_Master_Transmit(&hi2c1, mpu6050_slave_adress, tuffer, 1, HAL_MAX_DELAY);
 8001384:	f04f 33ff 	mov.w	r3, #4294967295
 8001388:	9300      	str	r3, [sp, #0]
 800138a:	2301      	movs	r3, #1
 800138c:	4a45      	ldr	r2, [pc, #276]	; (80014a4 <main+0x43c>)
 800138e:	21d0      	movs	r1, #208	; 0xd0
 8001390:	4839      	ldr	r0, [pc, #228]	; (8001478 <main+0x410>)
 8001392:	f001 fc25 	bl	8002be0 <HAL_I2C_Master_Transmit>
	  HAL_I2C_Master_Receive(&hi2c1, mpu6050_slave_adress, tuffer, 1, HAL_MAX_DELAY);
 8001396:	f04f 33ff 	mov.w	r3, #4294967295
 800139a:	9300      	str	r3, [sp, #0]
 800139c:	2301      	movs	r3, #1
 800139e:	4a41      	ldr	r2, [pc, #260]	; (80014a4 <main+0x43c>)
 80013a0:	21d0      	movs	r1, #208	; 0xd0
 80013a2:	4835      	ldr	r0, [pc, #212]	; (8001478 <main+0x410>)
 80013a4:	f001 fd1a 	bl	8002ddc <HAL_I2C_Master_Receive>

	  xi = acc_raw[0] = (tuffer[0]<<8 | tuffer[1]);
 80013a8:	4b3e      	ldr	r3, [pc, #248]	; (80014a4 <main+0x43c>)
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	021b      	lsls	r3, r3, #8
 80013ae:	b21a      	sxth	r2, r3
 80013b0:	4b3c      	ldr	r3, [pc, #240]	; (80014a4 <main+0x43c>)
 80013b2:	785b      	ldrb	r3, [r3, #1]
 80013b4:	b21b      	sxth	r3, r3
 80013b6:	4313      	orrs	r3, r2
 80013b8:	b21a      	sxth	r2, r3
 80013ba:	4b3b      	ldr	r3, [pc, #236]	; (80014a8 <main+0x440>)
 80013bc:	801a      	strh	r2, [r3, #0]
 80013be:	4b3a      	ldr	r3, [pc, #232]	; (80014a8 <main+0x440>)
 80013c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013c4:	ee07 3a90 	vmov	s15, r3
 80013c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013cc:	4b37      	ldr	r3, [pc, #220]	; (80014ac <main+0x444>)
 80013ce:	edc3 7a00 	vstr	s15, [r3]
	  yi = acc_raw[1] = (tuffer[2]<<8 | tuffer[3]);
 80013d2:	4b34      	ldr	r3, [pc, #208]	; (80014a4 <main+0x43c>)
 80013d4:	789b      	ldrb	r3, [r3, #2]
 80013d6:	021b      	lsls	r3, r3, #8
 80013d8:	b21a      	sxth	r2, r3
 80013da:	4b32      	ldr	r3, [pc, #200]	; (80014a4 <main+0x43c>)
 80013dc:	78db      	ldrb	r3, [r3, #3]
 80013de:	b21b      	sxth	r3, r3
 80013e0:	4313      	orrs	r3, r2
 80013e2:	b21a      	sxth	r2, r3
 80013e4:	4b30      	ldr	r3, [pc, #192]	; (80014a8 <main+0x440>)
 80013e6:	805a      	strh	r2, [r3, #2]
 80013e8:	4b2f      	ldr	r3, [pc, #188]	; (80014a8 <main+0x440>)
 80013ea:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80013ee:	ee07 3a90 	vmov	s15, r3
 80013f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013f6:	4b2e      	ldr	r3, [pc, #184]	; (80014b0 <main+0x448>)
 80013f8:	edc3 7a00 	vstr	s15, [r3]
	  zi = acc_raw[2] = (tuffer[4]<<8 | tuffer[5]);
 80013fc:	4b29      	ldr	r3, [pc, #164]	; (80014a4 <main+0x43c>)
 80013fe:	791b      	ldrb	r3, [r3, #4]
 8001400:	021b      	lsls	r3, r3, #8
 8001402:	b21a      	sxth	r2, r3
 8001404:	4b27      	ldr	r3, [pc, #156]	; (80014a4 <main+0x43c>)
 8001406:	795b      	ldrb	r3, [r3, #5]
 8001408:	b21b      	sxth	r3, r3
 800140a:	4313      	orrs	r3, r2
 800140c:	b21a      	sxth	r2, r3
 800140e:	4b26      	ldr	r3, [pc, #152]	; (80014a8 <main+0x440>)
 8001410:	809a      	strh	r2, [r3, #4]
 8001412:	4b25      	ldr	r3, [pc, #148]	; (80014a8 <main+0x440>)
 8001414:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001418:	ee07 3a90 	vmov	s15, r3
 800141c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001420:	4b24      	ldr	r3, [pc, #144]	; (80014b4 <main+0x44c>)
 8001422:	edc3 7a00 	vstr	s15, [r3]

	  buffer[0] = 0x41; // temperature
 8001426:	4b24      	ldr	r3, [pc, #144]	; (80014b8 <main+0x450>)
 8001428:	2241      	movs	r2, #65	; 0x41
 800142a:	701a      	strb	r2, [r3, #0]
	  HAL_I2C_Master_Transmit(&hi2c1, mpu6050_slave_adress, buffer, 1,HAL_MAX_DELAY);
 800142c:	f04f 33ff 	mov.w	r3, #4294967295
 8001430:	9300      	str	r3, [sp, #0]
 8001432:	2301      	movs	r3, #1
 8001434:	4a20      	ldr	r2, [pc, #128]	; (80014b8 <main+0x450>)
 8001436:	21d0      	movs	r1, #208	; 0xd0
 8001438:	480f      	ldr	r0, [pc, #60]	; (8001478 <main+0x410>)
 800143a:	f001 fbd1 	bl	8002be0 <HAL_I2C_Master_Transmit>
	  HAL_I2C_Master_Receive(&hi2c1, mpu6050_slave_adress, buffer, 2, HAL_MAX_DELAY);
 800143e:	f04f 33ff 	mov.w	r3, #4294967295
 8001442:	9300      	str	r3, [sp, #0]
 8001444:	2302      	movs	r3, #2
 8001446:	4a1c      	ldr	r2, [pc, #112]	; (80014b8 <main+0x450>)
 8001448:	21d0      	movs	r1, #208	; 0xd0
 800144a:	480b      	ldr	r0, [pc, #44]	; (8001478 <main+0x410>)
 800144c:	f001 fcc6 	bl	8002ddc <HAL_I2C_Master_Receive>

	  raw_temp = (buffer[0]<<8 | buffer[1]);
 8001450:	4b19      	ldr	r3, [pc, #100]	; (80014b8 <main+0x450>)
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	021b      	lsls	r3, r3, #8
 8001456:	b21a      	sxth	r2, r3
 8001458:	4b17      	ldr	r3, [pc, #92]	; (80014b8 <main+0x450>)
 800145a:	785b      	ldrb	r3, [r3, #1]
 800145c:	b21b      	sxth	r3, r3
 800145e:	4313      	orrs	r3, r2
 8001460:	b21a      	sxth	r2, r3
 8001462:	e02b      	b.n	80014bc <main+0x454>
 8001464:	2000026c 	.word	0x2000026c
 8001468:	200001dc 	.word	0x200001dc
 800146c:	447a0000 	.word	0x447a0000
 8001470:	20000090 	.word	0x20000090
 8001474:	20000154 	.word	0x20000154
 8001478:	20000100 	.word	0x20000100
 800147c:	20000094 	.word	0x20000094
 8001480:	200000f4 	.word	0x200000f4
 8001484:	200001cc 	.word	0x200001cc
 8001488:	44fa0000 	.word	0x44fa0000
 800148c:	20000210 	.word	0x20000210
 8001490:	20000170 	.word	0x20000170
 8001494:	200000ac 	.word	0x200000ac
 8001498:	200001e0 	.word	0x200001e0
 800149c:	20000204 	.word	0x20000204
 80014a0:	200001e4 	.word	0x200001e4
 80014a4:	200001e8 	.word	0x200001e8
 80014a8:	2000015c 	.word	0x2000015c
 80014ac:	20000254 	.word	0x20000254
 80014b0:	200000a0 	.word	0x200000a0
 80014b4:	200000a8 	.word	0x200000a8
 80014b8:	200001d4 	.word	0x200001d4
 80014bc:	4bc8      	ldr	r3, [pc, #800]	; (80017e0 <main+0x778>)
 80014be:	801a      	strh	r2, [r3, #0]
	  temp = (raw_temp/340) + 36.53;
 80014c0:	4bc7      	ldr	r3, [pc, #796]	; (80017e0 <main+0x778>)
 80014c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014c6:	4ac7      	ldr	r2, [pc, #796]	; (80017e4 <main+0x77c>)
 80014c8:	fb82 1203 	smull	r1, r2, r2, r3
 80014cc:	11d2      	asrs	r2, r2, #7
 80014ce:	17db      	asrs	r3, r3, #31
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	b21b      	sxth	r3, r3
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7fe ffc9 	bl	800046c <__aeabi_i2d>
 80014da:	a3bb      	add	r3, pc, #748	; (adr r3, 80017c8 <main+0x760>)
 80014dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e0:	f7fe fe78 	bl	80001d4 <__adddf3>
 80014e4:	4602      	mov	r2, r0
 80014e6:	460b      	mov	r3, r1
 80014e8:	4610      	mov	r0, r2
 80014ea:	4619      	mov	r1, r3
 80014ec:	f7ff fb00 	bl	8000af0 <__aeabi_d2f>
 80014f0:	4603      	mov	r3, r0
 80014f2:	4abd      	ldr	r2, [pc, #756]	; (80017e8 <main+0x780>)
 80014f4:	6013      	str	r3, [r2, #0]

	  cuffer[0] = 0x43; //gyro
 80014f6:	4bbd      	ldr	r3, [pc, #756]	; (80017ec <main+0x784>)
 80014f8:	2243      	movs	r2, #67	; 0x43
 80014fa:	701a      	strb	r2, [r3, #0]
	  HAL_I2C_Master_Transmit(&hi2c1, mpu6050_slave_adress, cuffer, 1, HAL_MAX_DELAY);
 80014fc:	f04f 33ff 	mov.w	r3, #4294967295
 8001500:	9300      	str	r3, [sp, #0]
 8001502:	2301      	movs	r3, #1
 8001504:	4ab9      	ldr	r2, [pc, #740]	; (80017ec <main+0x784>)
 8001506:	21d0      	movs	r1, #208	; 0xd0
 8001508:	48b9      	ldr	r0, [pc, #740]	; (80017f0 <main+0x788>)
 800150a:	f001 fb69 	bl	8002be0 <HAL_I2C_Master_Transmit>
	  HAL_I2C_Master_Receive(&hi2c1, mpu6050_slave_adress, cuffer, 1, HAL_MAX_DELAY);
 800150e:	f04f 33ff 	mov.w	r3, #4294967295
 8001512:	9300      	str	r3, [sp, #0]
 8001514:	2301      	movs	r3, #1
 8001516:	4ab5      	ldr	r2, [pc, #724]	; (80017ec <main+0x784>)
 8001518:	21d0      	movs	r1, #208	; 0xd0
 800151a:	48b5      	ldr	r0, [pc, #724]	; (80017f0 <main+0x788>)
 800151c:	f001 fc5e 	bl	8002ddc <HAL_I2C_Master_Receive>

	  gyro_raw[0] = (cuffer[0] << 8 | cuffer[1]);
 8001520:	4bb2      	ldr	r3, [pc, #712]	; (80017ec <main+0x784>)
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	021b      	lsls	r3, r3, #8
 8001526:	b21a      	sxth	r2, r3
 8001528:	4bb0      	ldr	r3, [pc, #704]	; (80017ec <main+0x784>)
 800152a:	785b      	ldrb	r3, [r3, #1]
 800152c:	b21b      	sxth	r3, r3
 800152e:	4313      	orrs	r3, r2
 8001530:	b21a      	sxth	r2, r3
 8001532:	4bb0      	ldr	r3, [pc, #704]	; (80017f4 <main+0x78c>)
 8001534:	801a      	strh	r2, [r3, #0]
	  gyro_raw[1] = (cuffer[2] << 8 | cuffer[3]);
 8001536:	4bad      	ldr	r3, [pc, #692]	; (80017ec <main+0x784>)
 8001538:	789b      	ldrb	r3, [r3, #2]
 800153a:	021b      	lsls	r3, r3, #8
 800153c:	b21a      	sxth	r2, r3
 800153e:	4bab      	ldr	r3, [pc, #684]	; (80017ec <main+0x784>)
 8001540:	78db      	ldrb	r3, [r3, #3]
 8001542:	b21b      	sxth	r3, r3
 8001544:	4313      	orrs	r3, r2
 8001546:	b21a      	sxth	r2, r3
 8001548:	4baa      	ldr	r3, [pc, #680]	; (80017f4 <main+0x78c>)
 800154a:	805a      	strh	r2, [r3, #2]
	  gyro_raw[2] = (cuffer[4] << 8 | cuffer[5]);
 800154c:	4ba7      	ldr	r3, [pc, #668]	; (80017ec <main+0x784>)
 800154e:	791b      	ldrb	r3, [r3, #4]
 8001550:	021b      	lsls	r3, r3, #8
 8001552:	b21a      	sxth	r2, r3
 8001554:	4ba5      	ldr	r3, [pc, #660]	; (80017ec <main+0x784>)
 8001556:	795b      	ldrb	r3, [r3, #5]
 8001558:	b21b      	sxth	r3, r3
 800155a:	4313      	orrs	r3, r2
 800155c:	b21a      	sxth	r2, r3
 800155e:	4ba5      	ldr	r3, [pc, #660]	; (80017f4 <main+0x78c>)
 8001560:	809a      	strh	r2, [r3, #4]

	  xj = gyro_raw[0] -= gyro_cal[0];
 8001562:	4ba4      	ldr	r3, [pc, #656]	; (80017f4 <main+0x78c>)
 8001564:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001568:	ee07 3a90 	vmov	s15, r3
 800156c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001570:	4ba1      	ldr	r3, [pc, #644]	; (80017f8 <main+0x790>)
 8001572:	edd3 7a00 	vldr	s15, [r3]
 8001576:	ee77 7a67 	vsub.f32	s15, s14, s15
 800157a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800157e:	ee17 3a90 	vmov	r3, s15
 8001582:	b21a      	sxth	r2, r3
 8001584:	4b9b      	ldr	r3, [pc, #620]	; (80017f4 <main+0x78c>)
 8001586:	801a      	strh	r2, [r3, #0]
 8001588:	4b9a      	ldr	r3, [pc, #616]	; (80017f4 <main+0x78c>)
 800158a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800158e:	ee07 3a90 	vmov	s15, r3
 8001592:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001596:	4b99      	ldr	r3, [pc, #612]	; (80017fc <main+0x794>)
 8001598:	edc3 7a00 	vstr	s15, [r3]
	  yj = gyro_raw[1] -= gyro_cal[1];
 800159c:	4b95      	ldr	r3, [pc, #596]	; (80017f4 <main+0x78c>)
 800159e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80015a2:	ee07 3a90 	vmov	s15, r3
 80015a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015aa:	4b93      	ldr	r3, [pc, #588]	; (80017f8 <main+0x790>)
 80015ac:	edd3 7a01 	vldr	s15, [r3, #4]
 80015b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015b8:	ee17 3a90 	vmov	r3, s15
 80015bc:	b21a      	sxth	r2, r3
 80015be:	4b8d      	ldr	r3, [pc, #564]	; (80017f4 <main+0x78c>)
 80015c0:	805a      	strh	r2, [r3, #2]
 80015c2:	4b8c      	ldr	r3, [pc, #560]	; (80017f4 <main+0x78c>)
 80015c4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80015c8:	ee07 3a90 	vmov	s15, r3
 80015cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015d0:	4b8b      	ldr	r3, [pc, #556]	; (8001800 <main+0x798>)
 80015d2:	edc3 7a00 	vstr	s15, [r3]
	  zj = gyro_raw[2] -= gyro_cal[2];
 80015d6:	4b87      	ldr	r3, [pc, #540]	; (80017f4 <main+0x78c>)
 80015d8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80015dc:	ee07 3a90 	vmov	s15, r3
 80015e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015e4:	4b84      	ldr	r3, [pc, #528]	; (80017f8 <main+0x790>)
 80015e6:	edd3 7a02 	vldr	s15, [r3, #8]
 80015ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015f2:	ee17 3a90 	vmov	r3, s15
 80015f6:	b21a      	sxth	r2, r3
 80015f8:	4b7e      	ldr	r3, [pc, #504]	; (80017f4 <main+0x78c>)
 80015fa:	809a      	strh	r2, [r3, #4]
 80015fc:	4b7d      	ldr	r3, [pc, #500]	; (80017f4 <main+0x78c>)
 80015fe:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001602:	ee07 3a90 	vmov	s15, r3
 8001606:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800160a:	4b7e      	ldr	r3, [pc, #504]	; (8001804 <main+0x79c>)
 800160c:	edc3 7a00 	vstr	s15, [r3]

	  angle_pitch_gyro += gyro_raw[0]*0.0000611; //gyro_raw/(65.5*[örnekleme süresi]0.004sn)
 8001610:	4b7d      	ldr	r3, [pc, #500]	; (8001808 <main+0x7a0>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4618      	mov	r0, r3
 8001616:	f7fe ff3b 	bl	8000490 <__aeabi_f2d>
 800161a:	4604      	mov	r4, r0
 800161c:	460d      	mov	r5, r1
 800161e:	4b75      	ldr	r3, [pc, #468]	; (80017f4 <main+0x78c>)
 8001620:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001624:	4618      	mov	r0, r3
 8001626:	f7fe ff21 	bl	800046c <__aeabi_i2d>
 800162a:	a369      	add	r3, pc, #420	; (adr r3, 80017d0 <main+0x768>)
 800162c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001630:	f7fe ff86 	bl	8000540 <__aeabi_dmul>
 8001634:	4602      	mov	r2, r0
 8001636:	460b      	mov	r3, r1
 8001638:	4620      	mov	r0, r4
 800163a:	4629      	mov	r1, r5
 800163c:	f7fe fdca 	bl	80001d4 <__adddf3>
 8001640:	4602      	mov	r2, r0
 8001642:	460b      	mov	r3, r1
 8001644:	4610      	mov	r0, r2
 8001646:	4619      	mov	r1, r3
 8001648:	f7ff fa52 	bl	8000af0 <__aeabi_d2f>
 800164c:	4603      	mov	r3, r0
 800164e:	4a6e      	ldr	r2, [pc, #440]	; (8001808 <main+0x7a0>)
 8001650:	6013      	str	r3, [r2, #0]
	  angle_roll_gyro += gyro_raw[1]*0.0000611;
 8001652:	4b6e      	ldr	r3, [pc, #440]	; (800180c <main+0x7a4>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4618      	mov	r0, r3
 8001658:	f7fe ff1a 	bl	8000490 <__aeabi_f2d>
 800165c:	4604      	mov	r4, r0
 800165e:	460d      	mov	r5, r1
 8001660:	4b64      	ldr	r3, [pc, #400]	; (80017f4 <main+0x78c>)
 8001662:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001666:	4618      	mov	r0, r3
 8001668:	f7fe ff00 	bl	800046c <__aeabi_i2d>
 800166c:	a358      	add	r3, pc, #352	; (adr r3, 80017d0 <main+0x768>)
 800166e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001672:	f7fe ff65 	bl	8000540 <__aeabi_dmul>
 8001676:	4602      	mov	r2, r0
 8001678:	460b      	mov	r3, r1
 800167a:	4620      	mov	r0, r4
 800167c:	4629      	mov	r1, r5
 800167e:	f7fe fda9 	bl	80001d4 <__adddf3>
 8001682:	4602      	mov	r2, r0
 8001684:	460b      	mov	r3, r1
 8001686:	4610      	mov	r0, r2
 8001688:	4619      	mov	r1, r3
 800168a:	f7ff fa31 	bl	8000af0 <__aeabi_d2f>
 800168e:	4603      	mov	r3, r0
 8001690:	4a5e      	ldr	r2, [pc, #376]	; (800180c <main+0x7a4>)
 8001692:	6013      	str	r3, [r2, #0]

	  angle_pitch_gyro += angle_roll_gyro * sin(gyro_raw[2]*0.000001066);
 8001694:	4b5c      	ldr	r3, [pc, #368]	; (8001808 <main+0x7a0>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4618      	mov	r0, r3
 800169a:	f7fe fef9 	bl	8000490 <__aeabi_f2d>
 800169e:	4604      	mov	r4, r0
 80016a0:	460d      	mov	r5, r1
 80016a2:	4b5a      	ldr	r3, [pc, #360]	; (800180c <main+0x7a4>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4618      	mov	r0, r3
 80016a8:	f7fe fef2 	bl	8000490 <__aeabi_f2d>
 80016ac:	4680      	mov	r8, r0
 80016ae:	4689      	mov	r9, r1
 80016b0:	4b50      	ldr	r3, [pc, #320]	; (80017f4 <main+0x78c>)
 80016b2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80016b6:	4618      	mov	r0, r3
 80016b8:	f7fe fed8 	bl	800046c <__aeabi_i2d>
 80016bc:	a346      	add	r3, pc, #280	; (adr r3, 80017d8 <main+0x770>)
 80016be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016c2:	f7fe ff3d 	bl	8000540 <__aeabi_dmul>
 80016c6:	4602      	mov	r2, r0
 80016c8:	460b      	mov	r3, r1
 80016ca:	ec43 2b17 	vmov	d7, r2, r3
 80016ce:	eeb0 0a47 	vmov.f32	s0, s14
 80016d2:	eef0 0a67 	vmov.f32	s1, s15
 80016d6:	f004 fb3b 	bl	8005d50 <sin>
 80016da:	ec53 2b10 	vmov	r2, r3, d0
 80016de:	4640      	mov	r0, r8
 80016e0:	4649      	mov	r1, r9
 80016e2:	f7fe ff2d 	bl	8000540 <__aeabi_dmul>
 80016e6:	4602      	mov	r2, r0
 80016e8:	460b      	mov	r3, r1
 80016ea:	4620      	mov	r0, r4
 80016ec:	4629      	mov	r1, r5
 80016ee:	f7fe fd71 	bl	80001d4 <__adddf3>
 80016f2:	4602      	mov	r2, r0
 80016f4:	460b      	mov	r3, r1
 80016f6:	4610      	mov	r0, r2
 80016f8:	4619      	mov	r1, r3
 80016fa:	f7ff f9f9 	bl	8000af0 <__aeabi_d2f>
 80016fe:	4603      	mov	r3, r0
 8001700:	4a41      	ldr	r2, [pc, #260]	; (8001808 <main+0x7a0>)
 8001702:	6013      	str	r3, [r2, #0]
	  angle_roll_gyro -= angle_pitch_gyro * sin(gyro_raw[2]*0.000001066);
 8001704:	4b41      	ldr	r3, [pc, #260]	; (800180c <main+0x7a4>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4618      	mov	r0, r3
 800170a:	f7fe fec1 	bl	8000490 <__aeabi_f2d>
 800170e:	4604      	mov	r4, r0
 8001710:	460d      	mov	r5, r1
 8001712:	4b3d      	ldr	r3, [pc, #244]	; (8001808 <main+0x7a0>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4618      	mov	r0, r3
 8001718:	f7fe feba 	bl	8000490 <__aeabi_f2d>
 800171c:	4680      	mov	r8, r0
 800171e:	4689      	mov	r9, r1
 8001720:	4b34      	ldr	r3, [pc, #208]	; (80017f4 <main+0x78c>)
 8001722:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001726:	4618      	mov	r0, r3
 8001728:	f7fe fea0 	bl	800046c <__aeabi_i2d>
 800172c:	a32a      	add	r3, pc, #168	; (adr r3, 80017d8 <main+0x770>)
 800172e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001732:	f7fe ff05 	bl	8000540 <__aeabi_dmul>
 8001736:	4602      	mov	r2, r0
 8001738:	460b      	mov	r3, r1
 800173a:	ec43 2b17 	vmov	d7, r2, r3
 800173e:	eeb0 0a47 	vmov.f32	s0, s14
 8001742:	eef0 0a67 	vmov.f32	s1, s15
 8001746:	f004 fb03 	bl	8005d50 <sin>
 800174a:	ec53 2b10 	vmov	r2, r3, d0
 800174e:	4640      	mov	r0, r8
 8001750:	4649      	mov	r1, r9
 8001752:	f7fe fef5 	bl	8000540 <__aeabi_dmul>
 8001756:	4602      	mov	r2, r0
 8001758:	460b      	mov	r3, r1
 800175a:	4620      	mov	r0, r4
 800175c:	4629      	mov	r1, r5
 800175e:	f7fe fd37 	bl	80001d0 <__aeabi_dsub>
 8001762:	4602      	mov	r2, r0
 8001764:	460b      	mov	r3, r1
 8001766:	4610      	mov	r0, r2
 8001768:	4619      	mov	r1, r3
 800176a:	f7ff f9c1 	bl	8000af0 <__aeabi_d2f>
 800176e:	4603      	mov	r3, r0
 8001770:	4a26      	ldr	r2, [pc, #152]	; (800180c <main+0x7a4>)
 8001772:	6013      	str	r3, [r2, #0]

	  acc_total_vector = sqrt((acc_raw[0]*acc_raw[0])+(acc_raw[1]*acc_raw[1])+(acc_raw[2]*acc_raw[2]));
 8001774:	4b26      	ldr	r3, [pc, #152]	; (8001810 <main+0x7a8>)
 8001776:	f9b3 3000 	ldrsh.w	r3, [r3]
 800177a:	461a      	mov	r2, r3
 800177c:	4b24      	ldr	r3, [pc, #144]	; (8001810 <main+0x7a8>)
 800177e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001782:	fb03 f202 	mul.w	r2, r3, r2
 8001786:	4b22      	ldr	r3, [pc, #136]	; (8001810 <main+0x7a8>)
 8001788:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800178c:	4619      	mov	r1, r3
 800178e:	4b20      	ldr	r3, [pc, #128]	; (8001810 <main+0x7a8>)
 8001790:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001794:	fb03 f301 	mul.w	r3, r3, r1
 8001798:	441a      	add	r2, r3
 800179a:	4b1d      	ldr	r3, [pc, #116]	; (8001810 <main+0x7a8>)
 800179c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80017a0:	4619      	mov	r1, r3
 80017a2:	4b1b      	ldr	r3, [pc, #108]	; (8001810 <main+0x7a8>)
 80017a4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80017a8:	fb03 f301 	mul.w	r3, r3, r1
 80017ac:	4413      	add	r3, r2
 80017ae:	4618      	mov	r0, r3
 80017b0:	f7fe fe5c 	bl	800046c <__aeabi_i2d>
 80017b4:	4602      	mov	r2, r0
 80017b6:	460b      	mov	r3, r1
 80017b8:	ec43 2b10 	vmov	d0, r2, r3
 80017bc:	f004 fb56 	bl	8005e6c <sqrt>
 80017c0:	e028      	b.n	8001814 <main+0x7ac>
 80017c2:	bf00      	nop
 80017c4:	f3af 8000 	nop.w
 80017c8:	0a3d70a4 	.word	0x0a3d70a4
 80017cc:	404243d7 	.word	0x404243d7
 80017d0:	01d41596 	.word	0x01d41596
 80017d4:	3f10045a 	.word	0x3f10045a
 80017d8:	652c6e62 	.word	0x652c6e62
 80017dc:	3eb1e26f 	.word	0x3eb1e26f
 80017e0:	20000268 	.word	0x20000268
 80017e4:	60606061 	.word	0x60606061
 80017e8:	20000164 	.word	0x20000164
 80017ec:	20000154 	.word	0x20000154
 80017f0:	20000100 	.word	0x20000100
 80017f4:	20000094 	.word	0x20000094
 80017f8:	200000f4 	.word	0x200000f4
 80017fc:	200001d0 	.word	0x200001d0
 8001800:	2000020c 	.word	0x2000020c
 8001804:	200001fc 	.word	0x200001fc
 8001808:	200001f0 	.word	0x200001f0
 800180c:	20000260 	.word	0x20000260
 8001810:	2000015c 	.word	0x2000015c
 8001814:	ec53 2b10 	vmov	r2, r3, d0
 8001818:	4610      	mov	r0, r2
 800181a:	4619      	mov	r1, r3
 800181c:	f7ff f940 	bl	8000aa0 <__aeabi_d2iz>
 8001820:	4603      	mov	r3, r0
 8001822:	b21a      	sxth	r2, r3
 8001824:	4b7a      	ldr	r3, [pc, #488]	; (8001a10 <main+0x9a8>)
 8001826:	801a      	strh	r2, [r3, #0]

	  angle_pitch_acc = asin((float)acc_raw[1]/acc_total_vector)*57.296;
 8001828:	4b7a      	ldr	r3, [pc, #488]	; (8001a14 <main+0x9ac>)
 800182a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800182e:	ee07 3a90 	vmov	s15, r3
 8001832:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001836:	4b76      	ldr	r3, [pc, #472]	; (8001a10 <main+0x9a8>)
 8001838:	f9b3 3000 	ldrsh.w	r3, [r3]
 800183c:	ee07 3a90 	vmov	s15, r3
 8001840:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001844:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001848:	ee16 0a90 	vmov	r0, s13
 800184c:	f7fe fe20 	bl	8000490 <__aeabi_f2d>
 8001850:	4602      	mov	r2, r0
 8001852:	460b      	mov	r3, r1
 8001854:	ec43 2b10 	vmov	d0, r2, r3
 8001858:	f004 face 	bl	8005df8 <asin>
 800185c:	ec51 0b10 	vmov	r0, r1, d0
 8001860:	a363      	add	r3, pc, #396	; (adr r3, 80019f0 <main+0x988>)
 8001862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001866:	f7fe fe6b 	bl	8000540 <__aeabi_dmul>
 800186a:	4602      	mov	r2, r0
 800186c:	460b      	mov	r3, r1
 800186e:	4610      	mov	r0, r2
 8001870:	4619      	mov	r1, r3
 8001872:	f7ff f93d 	bl	8000af0 <__aeabi_d2f>
 8001876:	4603      	mov	r3, r0
 8001878:	4a67      	ldr	r2, [pc, #412]	; (8001a18 <main+0x9b0>)
 800187a:	6013      	str	r3, [r2, #0]
	  angle_roll_acc = asin((float)acc_raw[0]/acc_total_vector)*-57.296;
 800187c:	4b65      	ldr	r3, [pc, #404]	; (8001a14 <main+0x9ac>)
 800187e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001882:	ee07 3a90 	vmov	s15, r3
 8001886:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800188a:	4b61      	ldr	r3, [pc, #388]	; (8001a10 <main+0x9a8>)
 800188c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001890:	ee07 3a90 	vmov	s15, r3
 8001894:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001898:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800189c:	ee16 0a90 	vmov	r0, s13
 80018a0:	f7fe fdf6 	bl	8000490 <__aeabi_f2d>
 80018a4:	4602      	mov	r2, r0
 80018a6:	460b      	mov	r3, r1
 80018a8:	ec43 2b10 	vmov	d0, r2, r3
 80018ac:	f004 faa4 	bl	8005df8 <asin>
 80018b0:	ec51 0b10 	vmov	r0, r1, d0
 80018b4:	a350      	add	r3, pc, #320	; (adr r3, 80019f8 <main+0x990>)
 80018b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ba:	f7fe fe41 	bl	8000540 <__aeabi_dmul>
 80018be:	4602      	mov	r2, r0
 80018c0:	460b      	mov	r3, r1
 80018c2:	4610      	mov	r0, r2
 80018c4:	4619      	mov	r1, r3
 80018c6:	f7ff f913 	bl	8000af0 <__aeabi_d2f>
 80018ca:	4603      	mov	r3, r0
 80018cc:	4a53      	ldr	r2, [pc, #332]	; (8001a1c <main+0x9b4>)
 80018ce:	6013      	str	r3, [r2, #0]

	  angle_pitch_acc -= 0.00;
 80018d0:	4b51      	ldr	r3, [pc, #324]	; (8001a18 <main+0x9b0>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a50      	ldr	r2, [pc, #320]	; (8001a18 <main+0x9b0>)
 80018d6:	6013      	str	r3, [r2, #0]
	  angle_roll_acc -= 0.00;
 80018d8:	4b50      	ldr	r3, [pc, #320]	; (8001a1c <main+0x9b4>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a4f      	ldr	r2, [pc, #316]	; (8001a1c <main+0x9b4>)
 80018de:	6013      	str	r3, [r2, #0]

	  if(set_gyro){
 80018e0:	4b4f      	ldr	r3, [pc, #316]	; (8001a20 <main+0x9b8>)
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d04e      	beq.n	8001986 <main+0x91e>
		  angle_pitch = angle_pitch_gyro*0.9996 + angle_pitch_acc*0.0004;
 80018e8:	4b4e      	ldr	r3, [pc, #312]	; (8001a24 <main+0x9bc>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4618      	mov	r0, r3
 80018ee:	f7fe fdcf 	bl	8000490 <__aeabi_f2d>
 80018f2:	a343      	add	r3, pc, #268	; (adr r3, 8001a00 <main+0x998>)
 80018f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018f8:	f7fe fe22 	bl	8000540 <__aeabi_dmul>
 80018fc:	4602      	mov	r2, r0
 80018fe:	460b      	mov	r3, r1
 8001900:	4614      	mov	r4, r2
 8001902:	461d      	mov	r5, r3
 8001904:	4b44      	ldr	r3, [pc, #272]	; (8001a18 <main+0x9b0>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4618      	mov	r0, r3
 800190a:	f7fe fdc1 	bl	8000490 <__aeabi_f2d>
 800190e:	a33e      	add	r3, pc, #248	; (adr r3, 8001a08 <main+0x9a0>)
 8001910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001914:	f7fe fe14 	bl	8000540 <__aeabi_dmul>
 8001918:	4602      	mov	r2, r0
 800191a:	460b      	mov	r3, r1
 800191c:	4620      	mov	r0, r4
 800191e:	4629      	mov	r1, r5
 8001920:	f7fe fc58 	bl	80001d4 <__adddf3>
 8001924:	4602      	mov	r2, r0
 8001926:	460b      	mov	r3, r1
 8001928:	4610      	mov	r0, r2
 800192a:	4619      	mov	r1, r3
 800192c:	f7ff f8e0 	bl	8000af0 <__aeabi_d2f>
 8001930:	4603      	mov	r3, r0
 8001932:	4a3d      	ldr	r2, [pc, #244]	; (8001a28 <main+0x9c0>)
 8001934:	6013      	str	r3, [r2, #0]
		  angle_roll = angle_roll_gyro*0.9996 + angle_roll_acc*0.0004;
 8001936:	4b3d      	ldr	r3, [pc, #244]	; (8001a2c <main+0x9c4>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4618      	mov	r0, r3
 800193c:	f7fe fda8 	bl	8000490 <__aeabi_f2d>
 8001940:	a32f      	add	r3, pc, #188	; (adr r3, 8001a00 <main+0x998>)
 8001942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001946:	f7fe fdfb 	bl	8000540 <__aeabi_dmul>
 800194a:	4602      	mov	r2, r0
 800194c:	460b      	mov	r3, r1
 800194e:	4614      	mov	r4, r2
 8001950:	461d      	mov	r5, r3
 8001952:	4b32      	ldr	r3, [pc, #200]	; (8001a1c <main+0x9b4>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4618      	mov	r0, r3
 8001958:	f7fe fd9a 	bl	8000490 <__aeabi_f2d>
 800195c:	a32a      	add	r3, pc, #168	; (adr r3, 8001a08 <main+0x9a0>)
 800195e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001962:	f7fe fded 	bl	8000540 <__aeabi_dmul>
 8001966:	4602      	mov	r2, r0
 8001968:	460b      	mov	r3, r1
 800196a:	4620      	mov	r0, r4
 800196c:	4629      	mov	r1, r5
 800196e:	f7fe fc31 	bl	80001d4 <__adddf3>
 8001972:	4602      	mov	r2, r0
 8001974:	460b      	mov	r3, r1
 8001976:	4610      	mov	r0, r2
 8001978:	4619      	mov	r1, r3
 800197a:	f7ff f8b9 	bl	8000af0 <__aeabi_d2f>
 800197e:	4603      	mov	r3, r0
 8001980:	4a2b      	ldr	r2, [pc, #172]	; (8001a30 <main+0x9c8>)
 8001982:	6013      	str	r3, [r2, #0]
 8001984:	e006      	b.n	8001994 <main+0x92c>
	  }
	  else {
		  angle_pitch = angle_pitch_acc;
 8001986:	4b24      	ldr	r3, [pc, #144]	; (8001a18 <main+0x9b0>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a27      	ldr	r2, [pc, #156]	; (8001a28 <main+0x9c0>)
 800198c:	6013      	str	r3, [r2, #0]
		  set_gyro = true;
 800198e:	4b24      	ldr	r3, [pc, #144]	; (8001a20 <main+0x9b8>)
 8001990:	2201      	movs	r2, #1
 8001992:	701a      	strb	r2, [r3, #0]

	  }
	  while ((HAL_GetTick()-prev_time)*1000 < 4000);
 8001994:	bf00      	nop
 8001996:	f000 fc6f 	bl	8002278 <HAL_GetTick>
 800199a:	ee07 0a90 	vmov	s15, r0
 800199e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80019a2:	4b24      	ldr	r3, [pc, #144]	; (8001a34 <main+0x9cc>)
 80019a4:	edd3 7a00 	vldr	s15, [r3]
 80019a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019ac:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8001a38 <main+0x9d0>
 80019b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019b4:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8001a3c <main+0x9d4>
 80019b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019c0:	d4e9      	bmi.n	8001996 <main+0x92e>
	  prev_time = HAL_GetTick();
 80019c2:	f000 fc59 	bl	8002278 <HAL_GetTick>
 80019c6:	ee07 0a90 	vmov	s15, r0
 80019ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019ce:	4b19      	ldr	r3, [pc, #100]	; (8001a34 <main+0x9cc>)
 80019d0:	edc3 7a00 	vstr	s15, [r3]

	  denge(xi);
 80019d4:	4b1a      	ldr	r3, [pc, #104]	; (8001a40 <main+0x9d8>)
 80019d6:	edd3 7a00 	vldr	s15, [r3]
 80019da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019de:	ee17 0a90 	vmov	r0, s15
 80019e2:	f7ff fa6d 	bl	8000ec0 <denge>
	  led();
 80019e6:	f7ff fae5 	bl	8000fb4 <led>
	  prev_time1 = time1;
 80019ea:	e4ac      	b.n	8001346 <main+0x2de>
 80019ec:	f3af 8000 	nop.w
 80019f0:	53f7ced9 	.word	0x53f7ced9
 80019f4:	404ca5e3 	.word	0x404ca5e3
 80019f8:	53f7ced9 	.word	0x53f7ced9
 80019fc:	c04ca5e3 	.word	0xc04ca5e3
 8001a00:	23a29c78 	.word	0x23a29c78
 8001a04:	3feffcb9 	.word	0x3feffcb9
 8001a08:	eb1c432d 	.word	0xeb1c432d
 8001a0c:	3f3a36e2 	.word	0x3f3a36e2
 8001a10:	20000202 	.word	0x20000202
 8001a14:	2000015c 	.word	0x2000015c
 8001a18:	200000a4 	.word	0x200000a4
 8001a1c:	20000264 	.word	0x20000264
 8001a20:	200001f4 	.word	0x200001f4
 8001a24:	200001f0 	.word	0x200001f0
 8001a28:	2000009c 	.word	0x2000009c
 8001a2c:	20000260 	.word	0x20000260
 8001a30:	20000168 	.word	0x20000168
 8001a34:	200001d8 	.word	0x200001d8
 8001a38:	447a0000 	.word	0x447a0000
 8001a3c:	457a0000 	.word	0x457a0000
 8001a40:	20000254 	.word	0x20000254

08001a44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b094      	sub	sp, #80	; 0x50
 8001a48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a4a:	f107 0320 	add.w	r3, r7, #32
 8001a4e:	2230      	movs	r2, #48	; 0x30
 8001a50:	2100      	movs	r1, #0
 8001a52:	4618      	mov	r0, r3
 8001a54:	f004 f8e6 	bl	8005c24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a58:	f107 030c 	add.w	r3, r7, #12
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	601a      	str	r2, [r3, #0]
 8001a60:	605a      	str	r2, [r3, #4]
 8001a62:	609a      	str	r2, [r3, #8]
 8001a64:	60da      	str	r2, [r3, #12]
 8001a66:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a68:	2300      	movs	r3, #0
 8001a6a:	60bb      	str	r3, [r7, #8]
 8001a6c:	4b28      	ldr	r3, [pc, #160]	; (8001b10 <SystemClock_Config+0xcc>)
 8001a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a70:	4a27      	ldr	r2, [pc, #156]	; (8001b10 <SystemClock_Config+0xcc>)
 8001a72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a76:	6413      	str	r3, [r2, #64]	; 0x40
 8001a78:	4b25      	ldr	r3, [pc, #148]	; (8001b10 <SystemClock_Config+0xcc>)
 8001a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a80:	60bb      	str	r3, [r7, #8]
 8001a82:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a84:	2300      	movs	r3, #0
 8001a86:	607b      	str	r3, [r7, #4]
 8001a88:	4b22      	ldr	r3, [pc, #136]	; (8001b14 <SystemClock_Config+0xd0>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a21      	ldr	r2, [pc, #132]	; (8001b14 <SystemClock_Config+0xd0>)
 8001a8e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a92:	6013      	str	r3, [r2, #0]
 8001a94:	4b1f      	ldr	r3, [pc, #124]	; (8001b14 <SystemClock_Config+0xd0>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a9c:	607b      	str	r3, [r7, #4]
 8001a9e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001aa4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001aa8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001aaa:	2302      	movs	r3, #2
 8001aac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001aae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001ab2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001ab4:	2304      	movs	r3, #4
 8001ab6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001ab8:	23a8      	movs	r3, #168	; 0xa8
 8001aba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001abc:	2302      	movs	r3, #2
 8001abe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001ac0:	2304      	movs	r3, #4
 8001ac2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ac4:	f107 0320 	add.w	r3, r7, #32
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f002 f86b 	bl	8003ba4 <HAL_RCC_OscConfig>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d001      	beq.n	8001ad8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001ad4:	f000 f99a 	bl	8001e0c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ad8:	230f      	movs	r3, #15
 8001ada:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001adc:	2302      	movs	r3, #2
 8001ade:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001ae4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001ae8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001aea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001aee:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001af0:	f107 030c 	add.w	r3, r7, #12
 8001af4:	2105      	movs	r1, #5
 8001af6:	4618      	mov	r0, r3
 8001af8:	f002 facc 	bl	8004094 <HAL_RCC_ClockConfig>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d001      	beq.n	8001b06 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001b02:	f000 f983 	bl	8001e0c <Error_Handler>
  }
}
 8001b06:	bf00      	nop
 8001b08:	3750      	adds	r7, #80	; 0x50
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	40023800 	.word	0x40023800
 8001b14:	40007000 	.word	0x40007000

08001b18 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001b1c:	4b12      	ldr	r3, [pc, #72]	; (8001b68 <MX_I2C1_Init+0x50>)
 8001b1e:	4a13      	ldr	r2, [pc, #76]	; (8001b6c <MX_I2C1_Init+0x54>)
 8001b20:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001b22:	4b11      	ldr	r3, [pc, #68]	; (8001b68 <MX_I2C1_Init+0x50>)
 8001b24:	4a12      	ldr	r2, [pc, #72]	; (8001b70 <MX_I2C1_Init+0x58>)
 8001b26:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b28:	4b0f      	ldr	r3, [pc, #60]	; (8001b68 <MX_I2C1_Init+0x50>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001b2e:	4b0e      	ldr	r3, [pc, #56]	; (8001b68 <MX_I2C1_Init+0x50>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b34:	4b0c      	ldr	r3, [pc, #48]	; (8001b68 <MX_I2C1_Init+0x50>)
 8001b36:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b3a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b3c:	4b0a      	ldr	r3, [pc, #40]	; (8001b68 <MX_I2C1_Init+0x50>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001b42:	4b09      	ldr	r3, [pc, #36]	; (8001b68 <MX_I2C1_Init+0x50>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b48:	4b07      	ldr	r3, [pc, #28]	; (8001b68 <MX_I2C1_Init+0x50>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b4e:	4b06      	ldr	r3, [pc, #24]	; (8001b68 <MX_I2C1_Init+0x50>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b54:	4804      	ldr	r0, [pc, #16]	; (8001b68 <MX_I2C1_Init+0x50>)
 8001b56:	f000 feff 	bl	8002958 <HAL_I2C_Init>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d001      	beq.n	8001b64 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001b60:	f000 f954 	bl	8001e0c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b64:	bf00      	nop
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	20000100 	.word	0x20000100
 8001b6c:	40005400 	.word	0x40005400
 8001b70:	00061a80 	.word	0x00061a80

08001b74 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b08a      	sub	sp, #40	; 0x28
 8001b78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b7a:	f107 0320 	add.w	r3, r7, #32
 8001b7e:	2200      	movs	r2, #0
 8001b80:	601a      	str	r2, [r3, #0]
 8001b82:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b84:	1d3b      	adds	r3, r7, #4
 8001b86:	2200      	movs	r2, #0
 8001b88:	601a      	str	r2, [r3, #0]
 8001b8a:	605a      	str	r2, [r3, #4]
 8001b8c:	609a      	str	r2, [r3, #8]
 8001b8e:	60da      	str	r2, [r3, #12]
 8001b90:	611a      	str	r2, [r3, #16]
 8001b92:	615a      	str	r2, [r3, #20]
 8001b94:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b96:	4b27      	ldr	r3, [pc, #156]	; (8001c34 <MX_TIM3_Init+0xc0>)
 8001b98:	4a27      	ldr	r2, [pc, #156]	; (8001c38 <MX_TIM3_Init+0xc4>)
 8001b9a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 8001b9c:	4b25      	ldr	r3, [pc, #148]	; (8001c34 <MX_TIM3_Init+0xc0>)
 8001b9e:	2253      	movs	r2, #83	; 0x53
 8001ba0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ba2:	4b24      	ldr	r3, [pc, #144]	; (8001c34 <MX_TIM3_Init+0xc0>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 8001ba8:	4b22      	ldr	r3, [pc, #136]	; (8001c34 <MX_TIM3_Init+0xc0>)
 8001baa:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001bae:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bb0:	4b20      	ldr	r3, [pc, #128]	; (8001c34 <MX_TIM3_Init+0xc0>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bb6:	4b1f      	ldr	r3, [pc, #124]	; (8001c34 <MX_TIM3_Init+0xc0>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001bbc:	481d      	ldr	r0, [pc, #116]	; (8001c34 <MX_TIM3_Init+0xc0>)
 8001bbe:	f002 fc65 	bl	800448c <HAL_TIM_PWM_Init>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d001      	beq.n	8001bcc <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001bc8:	f000 f920 	bl	8001e0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001bd4:	f107 0320 	add.w	r3, r7, #32
 8001bd8:	4619      	mov	r1, r3
 8001bda:	4816      	ldr	r0, [pc, #88]	; (8001c34 <MX_TIM3_Init+0xc0>)
 8001bdc:	f003 f8a6 	bl	8004d2c <HAL_TIMEx_MasterConfigSynchronization>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d001      	beq.n	8001bea <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001be6:	f000 f911 	bl	8001e0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bea:	2360      	movs	r3, #96	; 0x60
 8001bec:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001bfa:	1d3b      	adds	r3, r7, #4
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	4619      	mov	r1, r3
 8001c00:	480c      	ldr	r0, [pc, #48]	; (8001c34 <MX_TIM3_Init+0xc0>)
 8001c02:	f002 fd5b 	bl	80046bc <HAL_TIM_PWM_ConfigChannel>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d001      	beq.n	8001c10 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001c0c:	f000 f8fe 	bl	8001e0c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c10:	1d3b      	adds	r3, r7, #4
 8001c12:	2204      	movs	r2, #4
 8001c14:	4619      	mov	r1, r3
 8001c16:	4807      	ldr	r0, [pc, #28]	; (8001c34 <MX_TIM3_Init+0xc0>)
 8001c18:	f002 fd50 	bl	80046bc <HAL_TIM_PWM_ConfigChannel>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d001      	beq.n	8001c26 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001c22:	f000 f8f3 	bl	8001e0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001c26:	4803      	ldr	r0, [pc, #12]	; (8001c34 <MX_TIM3_Init+0xc0>)
 8001c28:	f000 f99e 	bl	8001f68 <HAL_TIM_MspPostInit>

}
 8001c2c:	bf00      	nop
 8001c2e:	3728      	adds	r7, #40	; 0x28
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	20000170 	.word	0x20000170
 8001c38:	40000400 	.word	0x40000400

08001c3c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b08a      	sub	sp, #40	; 0x28
 8001c40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c42:	f107 0320 	add.w	r3, r7, #32
 8001c46:	2200      	movs	r2, #0
 8001c48:	601a      	str	r2, [r3, #0]
 8001c4a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c4c:	1d3b      	adds	r3, r7, #4
 8001c4e:	2200      	movs	r2, #0
 8001c50:	601a      	str	r2, [r3, #0]
 8001c52:	605a      	str	r2, [r3, #4]
 8001c54:	609a      	str	r2, [r3, #8]
 8001c56:	60da      	str	r2, [r3, #12]
 8001c58:	611a      	str	r2, [r3, #16]
 8001c5a:	615a      	str	r2, [r3, #20]
 8001c5c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001c5e:	4b32      	ldr	r3, [pc, #200]	; (8001d28 <MX_TIM4_Init+0xec>)
 8001c60:	4a32      	ldr	r2, [pc, #200]	; (8001d2c <MX_TIM4_Init+0xf0>)
 8001c62:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 8001c64:	4b30      	ldr	r3, [pc, #192]	; (8001d28 <MX_TIM4_Init+0xec>)
 8001c66:	2253      	movs	r2, #83	; 0x53
 8001c68:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c6a:	4b2f      	ldr	r3, [pc, #188]	; (8001d28 <MX_TIM4_Init+0xec>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 19999;
 8001c70:	4b2d      	ldr	r3, [pc, #180]	; (8001d28 <MX_TIM4_Init+0xec>)
 8001c72:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001c76:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c78:	4b2b      	ldr	r3, [pc, #172]	; (8001d28 <MX_TIM4_Init+0xec>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c7e:	4b2a      	ldr	r3, [pc, #168]	; (8001d28 <MX_TIM4_Init+0xec>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001c84:	4828      	ldr	r0, [pc, #160]	; (8001d28 <MX_TIM4_Init+0xec>)
 8001c86:	f002 fc01 	bl	800448c <HAL_TIM_PWM_Init>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d001      	beq.n	8001c94 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8001c90:	f000 f8bc 	bl	8001e0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c94:	2300      	movs	r3, #0
 8001c96:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001c9c:	f107 0320 	add.w	r3, r7, #32
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	4821      	ldr	r0, [pc, #132]	; (8001d28 <MX_TIM4_Init+0xec>)
 8001ca4:	f003 f842 	bl	8004d2c <HAL_TIMEx_MasterConfigSynchronization>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d001      	beq.n	8001cb2 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8001cae:	f000 f8ad 	bl	8001e0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cb2:	2360      	movs	r3, #96	; 0x60
 8001cb4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001cc2:	1d3b      	adds	r3, r7, #4
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	4817      	ldr	r0, [pc, #92]	; (8001d28 <MX_TIM4_Init+0xec>)
 8001cca:	f002 fcf7 	bl	80046bc <HAL_TIM_PWM_ConfigChannel>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d001      	beq.n	8001cd8 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8001cd4:	f000 f89a 	bl	8001e0c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001cd8:	1d3b      	adds	r3, r7, #4
 8001cda:	2204      	movs	r2, #4
 8001cdc:	4619      	mov	r1, r3
 8001cde:	4812      	ldr	r0, [pc, #72]	; (8001d28 <MX_TIM4_Init+0xec>)
 8001ce0:	f002 fcec 	bl	80046bc <HAL_TIM_PWM_ConfigChannel>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d001      	beq.n	8001cee <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001cea:	f000 f88f 	bl	8001e0c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001cee:	1d3b      	adds	r3, r7, #4
 8001cf0:	2208      	movs	r2, #8
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	480c      	ldr	r0, [pc, #48]	; (8001d28 <MX_TIM4_Init+0xec>)
 8001cf6:	f002 fce1 	bl	80046bc <HAL_TIM_PWM_ConfigChannel>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d001      	beq.n	8001d04 <MX_TIM4_Init+0xc8>
  {
    Error_Handler();
 8001d00:	f000 f884 	bl	8001e0c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001d04:	1d3b      	adds	r3, r7, #4
 8001d06:	220c      	movs	r2, #12
 8001d08:	4619      	mov	r1, r3
 8001d0a:	4807      	ldr	r0, [pc, #28]	; (8001d28 <MX_TIM4_Init+0xec>)
 8001d0c:	f002 fcd6 	bl	80046bc <HAL_TIM_PWM_ConfigChannel>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d001      	beq.n	8001d1a <MX_TIM4_Init+0xde>
  {
    Error_Handler();
 8001d16:	f000 f879 	bl	8001e0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001d1a:	4803      	ldr	r0, [pc, #12]	; (8001d28 <MX_TIM4_Init+0xec>)
 8001d1c:	f000 f924 	bl	8001f68 <HAL_TIM_MspPostInit>

}
 8001d20:	bf00      	nop
 8001d22:	3728      	adds	r7, #40	; 0x28
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	200000ac 	.word	0x200000ac
 8001d2c:	40000800 	.word	0x40000800

08001d30 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001d34:	4b11      	ldr	r3, [pc, #68]	; (8001d7c <MX_UART4_Init+0x4c>)
 8001d36:	4a12      	ldr	r2, [pc, #72]	; (8001d80 <MX_UART4_Init+0x50>)
 8001d38:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001d3a:	4b10      	ldr	r3, [pc, #64]	; (8001d7c <MX_UART4_Init+0x4c>)
 8001d3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d40:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001d42:	4b0e      	ldr	r3, [pc, #56]	; (8001d7c <MX_UART4_Init+0x4c>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001d48:	4b0c      	ldr	r3, [pc, #48]	; (8001d7c <MX_UART4_Init+0x4c>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001d4e:	4b0b      	ldr	r3, [pc, #44]	; (8001d7c <MX_UART4_Init+0x4c>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001d54:	4b09      	ldr	r3, [pc, #36]	; (8001d7c <MX_UART4_Init+0x4c>)
 8001d56:	220c      	movs	r2, #12
 8001d58:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d5a:	4b08      	ldr	r3, [pc, #32]	; (8001d7c <MX_UART4_Init+0x4c>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d60:	4b06      	ldr	r3, [pc, #24]	; (8001d7c <MX_UART4_Init+0x4c>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001d66:	4805      	ldr	r0, [pc, #20]	; (8001d7c <MX_UART4_Init+0x4c>)
 8001d68:	f003 f85c 	bl	8004e24 <HAL_UART_Init>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d001      	beq.n	8001d76 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001d72:	f000 f84b 	bl	8001e0c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001d76:	bf00      	nop
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	20000210 	.word	0x20000210
 8001d80:	40004c00 	.word	0x40004c00

08001d84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b085      	sub	sp, #20
 8001d88:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	60fb      	str	r3, [r7, #12]
 8001d8e:	4b1e      	ldr	r3, [pc, #120]	; (8001e08 <MX_GPIO_Init+0x84>)
 8001d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d92:	4a1d      	ldr	r2, [pc, #116]	; (8001e08 <MX_GPIO_Init+0x84>)
 8001d94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d98:	6313      	str	r3, [r2, #48]	; 0x30
 8001d9a:	4b1b      	ldr	r3, [pc, #108]	; (8001e08 <MX_GPIO_Init+0x84>)
 8001d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001da2:	60fb      	str	r3, [r7, #12]
 8001da4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001da6:	2300      	movs	r3, #0
 8001da8:	60bb      	str	r3, [r7, #8]
 8001daa:	4b17      	ldr	r3, [pc, #92]	; (8001e08 <MX_GPIO_Init+0x84>)
 8001dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dae:	4a16      	ldr	r2, [pc, #88]	; (8001e08 <MX_GPIO_Init+0x84>)
 8001db0:	f043 0301 	orr.w	r3, r3, #1
 8001db4:	6313      	str	r3, [r2, #48]	; 0x30
 8001db6:	4b14      	ldr	r3, [pc, #80]	; (8001e08 <MX_GPIO_Init+0x84>)
 8001db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dba:	f003 0301 	and.w	r3, r3, #1
 8001dbe:	60bb      	str	r3, [r7, #8]
 8001dc0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	607b      	str	r3, [r7, #4]
 8001dc6:	4b10      	ldr	r3, [pc, #64]	; (8001e08 <MX_GPIO_Init+0x84>)
 8001dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dca:	4a0f      	ldr	r2, [pc, #60]	; (8001e08 <MX_GPIO_Init+0x84>)
 8001dcc:	f043 0308 	orr.w	r3, r3, #8
 8001dd0:	6313      	str	r3, [r2, #48]	; 0x30
 8001dd2:	4b0d      	ldr	r3, [pc, #52]	; (8001e08 <MX_GPIO_Init+0x84>)
 8001dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd6:	f003 0308 	and.w	r3, r3, #8
 8001dda:	607b      	str	r3, [r7, #4]
 8001ddc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dde:	2300      	movs	r3, #0
 8001de0:	603b      	str	r3, [r7, #0]
 8001de2:	4b09      	ldr	r3, [pc, #36]	; (8001e08 <MX_GPIO_Init+0x84>)
 8001de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de6:	4a08      	ldr	r2, [pc, #32]	; (8001e08 <MX_GPIO_Init+0x84>)
 8001de8:	f043 0302 	orr.w	r3, r3, #2
 8001dec:	6313      	str	r3, [r2, #48]	; 0x30
 8001dee:	4b06      	ldr	r3, [pc, #24]	; (8001e08 <MX_GPIO_Init+0x84>)
 8001df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df2:	f003 0302 	and.w	r3, r3, #2
 8001df6:	603b      	str	r3, [r7, #0]
 8001df8:	683b      	ldr	r3, [r7, #0]

}
 8001dfa:	bf00      	nop
 8001dfc:	3714      	adds	r7, #20
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop
 8001e08:	40023800 	.word	0x40023800

08001e0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e10:	b672      	cpsid	i
}
 8001e12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e14:	e7fe      	b.n	8001e14 <Error_Handler+0x8>
	...

08001e18 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e1e:	2300      	movs	r3, #0
 8001e20:	607b      	str	r3, [r7, #4]
 8001e22:	4b10      	ldr	r3, [pc, #64]	; (8001e64 <HAL_MspInit+0x4c>)
 8001e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e26:	4a0f      	ldr	r2, [pc, #60]	; (8001e64 <HAL_MspInit+0x4c>)
 8001e28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e2c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e2e:	4b0d      	ldr	r3, [pc, #52]	; (8001e64 <HAL_MspInit+0x4c>)
 8001e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e36:	607b      	str	r3, [r7, #4]
 8001e38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	603b      	str	r3, [r7, #0]
 8001e3e:	4b09      	ldr	r3, [pc, #36]	; (8001e64 <HAL_MspInit+0x4c>)
 8001e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e42:	4a08      	ldr	r2, [pc, #32]	; (8001e64 <HAL_MspInit+0x4c>)
 8001e44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e48:	6413      	str	r3, [r2, #64]	; 0x40
 8001e4a:	4b06      	ldr	r3, [pc, #24]	; (8001e64 <HAL_MspInit+0x4c>)
 8001e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e52:	603b      	str	r3, [r7, #0]
 8001e54:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e56:	bf00      	nop
 8001e58:	370c      	adds	r7, #12
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr
 8001e62:	bf00      	nop
 8001e64:	40023800 	.word	0x40023800

08001e68 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b08a      	sub	sp, #40	; 0x28
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e70:	f107 0314 	add.w	r3, r7, #20
 8001e74:	2200      	movs	r2, #0
 8001e76:	601a      	str	r2, [r3, #0]
 8001e78:	605a      	str	r2, [r3, #4]
 8001e7a:	609a      	str	r2, [r3, #8]
 8001e7c:	60da      	str	r2, [r3, #12]
 8001e7e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a19      	ldr	r2, [pc, #100]	; (8001eec <HAL_I2C_MspInit+0x84>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d12b      	bne.n	8001ee2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	613b      	str	r3, [r7, #16]
 8001e8e:	4b18      	ldr	r3, [pc, #96]	; (8001ef0 <HAL_I2C_MspInit+0x88>)
 8001e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e92:	4a17      	ldr	r2, [pc, #92]	; (8001ef0 <HAL_I2C_MspInit+0x88>)
 8001e94:	f043 0302 	orr.w	r3, r3, #2
 8001e98:	6313      	str	r3, [r2, #48]	; 0x30
 8001e9a:	4b15      	ldr	r3, [pc, #84]	; (8001ef0 <HAL_I2C_MspInit+0x88>)
 8001e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9e:	f003 0302 	and.w	r3, r3, #2
 8001ea2:	613b      	str	r3, [r7, #16]
 8001ea4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001ea6:	23c0      	movs	r3, #192	; 0xc0
 8001ea8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001eaa:	2312      	movs	r3, #18
 8001eac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001eb6:	2304      	movs	r3, #4
 8001eb8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eba:	f107 0314 	add.w	r3, r7, #20
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	480c      	ldr	r0, [pc, #48]	; (8001ef4 <HAL_I2C_MspInit+0x8c>)
 8001ec2:	f000 fbad 	bl	8002620 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	60fb      	str	r3, [r7, #12]
 8001eca:	4b09      	ldr	r3, [pc, #36]	; (8001ef0 <HAL_I2C_MspInit+0x88>)
 8001ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ece:	4a08      	ldr	r2, [pc, #32]	; (8001ef0 <HAL_I2C_MspInit+0x88>)
 8001ed0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ed4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ed6:	4b06      	ldr	r3, [pc, #24]	; (8001ef0 <HAL_I2C_MspInit+0x88>)
 8001ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eda:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ede:	60fb      	str	r3, [r7, #12]
 8001ee0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001ee2:	bf00      	nop
 8001ee4:	3728      	adds	r7, #40	; 0x28
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	40005400 	.word	0x40005400
 8001ef0:	40023800 	.word	0x40023800
 8001ef4:	40020400 	.word	0x40020400

08001ef8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b085      	sub	sp, #20
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a15      	ldr	r2, [pc, #84]	; (8001f5c <HAL_TIM_PWM_MspInit+0x64>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d10e      	bne.n	8001f28 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	60fb      	str	r3, [r7, #12]
 8001f0e:	4b14      	ldr	r3, [pc, #80]	; (8001f60 <HAL_TIM_PWM_MspInit+0x68>)
 8001f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f12:	4a13      	ldr	r2, [pc, #76]	; (8001f60 <HAL_TIM_PWM_MspInit+0x68>)
 8001f14:	f043 0302 	orr.w	r3, r3, #2
 8001f18:	6413      	str	r3, [r2, #64]	; 0x40
 8001f1a:	4b11      	ldr	r3, [pc, #68]	; (8001f60 <HAL_TIM_PWM_MspInit+0x68>)
 8001f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1e:	f003 0302 	and.w	r3, r3, #2
 8001f22:	60fb      	str	r3, [r7, #12]
 8001f24:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001f26:	e012      	b.n	8001f4e <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM4)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a0d      	ldr	r2, [pc, #52]	; (8001f64 <HAL_TIM_PWM_MspInit+0x6c>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d10d      	bne.n	8001f4e <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001f32:	2300      	movs	r3, #0
 8001f34:	60bb      	str	r3, [r7, #8]
 8001f36:	4b0a      	ldr	r3, [pc, #40]	; (8001f60 <HAL_TIM_PWM_MspInit+0x68>)
 8001f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3a:	4a09      	ldr	r2, [pc, #36]	; (8001f60 <HAL_TIM_PWM_MspInit+0x68>)
 8001f3c:	f043 0304 	orr.w	r3, r3, #4
 8001f40:	6413      	str	r3, [r2, #64]	; 0x40
 8001f42:	4b07      	ldr	r3, [pc, #28]	; (8001f60 <HAL_TIM_PWM_MspInit+0x68>)
 8001f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f46:	f003 0304 	and.w	r3, r3, #4
 8001f4a:	60bb      	str	r3, [r7, #8]
 8001f4c:	68bb      	ldr	r3, [r7, #8]
}
 8001f4e:	bf00      	nop
 8001f50:	3714      	adds	r7, #20
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr
 8001f5a:	bf00      	nop
 8001f5c:	40000400 	.word	0x40000400
 8001f60:	40023800 	.word	0x40023800
 8001f64:	40000800 	.word	0x40000800

08001f68 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b08a      	sub	sp, #40	; 0x28
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f70:	f107 0314 	add.w	r3, r7, #20
 8001f74:	2200      	movs	r2, #0
 8001f76:	601a      	str	r2, [r3, #0]
 8001f78:	605a      	str	r2, [r3, #4]
 8001f7a:	609a      	str	r2, [r3, #8]
 8001f7c:	60da      	str	r2, [r3, #12]
 8001f7e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a24      	ldr	r2, [pc, #144]	; (8002018 <HAL_TIM_MspPostInit+0xb0>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d11e      	bne.n	8001fc8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	613b      	str	r3, [r7, #16]
 8001f8e:	4b23      	ldr	r3, [pc, #140]	; (800201c <HAL_TIM_MspPostInit+0xb4>)
 8001f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f92:	4a22      	ldr	r2, [pc, #136]	; (800201c <HAL_TIM_MspPostInit+0xb4>)
 8001f94:	f043 0301 	orr.w	r3, r3, #1
 8001f98:	6313      	str	r3, [r2, #48]	; 0x30
 8001f9a:	4b20      	ldr	r3, [pc, #128]	; (800201c <HAL_TIM_MspPostInit+0xb4>)
 8001f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9e:	f003 0301 	and.w	r3, r3, #1
 8001fa2:	613b      	str	r3, [r7, #16]
 8001fa4:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001fa6:	23c0      	movs	r3, #192	; 0xc0
 8001fa8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001faa:	2302      	movs	r3, #2
 8001fac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001fb6:	2302      	movs	r3, #2
 8001fb8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fba:	f107 0314 	add.w	r3, r7, #20
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	4817      	ldr	r0, [pc, #92]	; (8002020 <HAL_TIM_MspPostInit+0xb8>)
 8001fc2:	f000 fb2d 	bl	8002620 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001fc6:	e023      	b.n	8002010 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM4)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a15      	ldr	r2, [pc, #84]	; (8002024 <HAL_TIM_MspPostInit+0xbc>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d11e      	bne.n	8002010 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	60fb      	str	r3, [r7, #12]
 8001fd6:	4b11      	ldr	r3, [pc, #68]	; (800201c <HAL_TIM_MspPostInit+0xb4>)
 8001fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fda:	4a10      	ldr	r2, [pc, #64]	; (800201c <HAL_TIM_MspPostInit+0xb4>)
 8001fdc:	f043 0308 	orr.w	r3, r3, #8
 8001fe0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fe2:	4b0e      	ldr	r3, [pc, #56]	; (800201c <HAL_TIM_MspPostInit+0xb4>)
 8001fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe6:	f003 0308 	and.w	r3, r3, #8
 8001fea:	60fb      	str	r3, [r7, #12]
 8001fec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001fee:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001ff2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ff4:	2302      	movs	r3, #2
 8001ff6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002000:	2302      	movs	r3, #2
 8002002:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002004:	f107 0314 	add.w	r3, r7, #20
 8002008:	4619      	mov	r1, r3
 800200a:	4807      	ldr	r0, [pc, #28]	; (8002028 <HAL_TIM_MspPostInit+0xc0>)
 800200c:	f000 fb08 	bl	8002620 <HAL_GPIO_Init>
}
 8002010:	bf00      	nop
 8002012:	3728      	adds	r7, #40	; 0x28
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	40000400 	.word	0x40000400
 800201c:	40023800 	.word	0x40023800
 8002020:	40020000 	.word	0x40020000
 8002024:	40000800 	.word	0x40000800
 8002028:	40020c00 	.word	0x40020c00

0800202c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b08a      	sub	sp, #40	; 0x28
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002034:	f107 0314 	add.w	r3, r7, #20
 8002038:	2200      	movs	r2, #0
 800203a:	601a      	str	r2, [r3, #0]
 800203c:	605a      	str	r2, [r3, #4]
 800203e:	609a      	str	r2, [r3, #8]
 8002040:	60da      	str	r2, [r3, #12]
 8002042:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a1d      	ldr	r2, [pc, #116]	; (80020c0 <HAL_UART_MspInit+0x94>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d133      	bne.n	80020b6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800204e:	2300      	movs	r3, #0
 8002050:	613b      	str	r3, [r7, #16]
 8002052:	4b1c      	ldr	r3, [pc, #112]	; (80020c4 <HAL_UART_MspInit+0x98>)
 8002054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002056:	4a1b      	ldr	r2, [pc, #108]	; (80020c4 <HAL_UART_MspInit+0x98>)
 8002058:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800205c:	6413      	str	r3, [r2, #64]	; 0x40
 800205e:	4b19      	ldr	r3, [pc, #100]	; (80020c4 <HAL_UART_MspInit+0x98>)
 8002060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002062:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002066:	613b      	str	r3, [r7, #16]
 8002068:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800206a:	2300      	movs	r3, #0
 800206c:	60fb      	str	r3, [r7, #12]
 800206e:	4b15      	ldr	r3, [pc, #84]	; (80020c4 <HAL_UART_MspInit+0x98>)
 8002070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002072:	4a14      	ldr	r2, [pc, #80]	; (80020c4 <HAL_UART_MspInit+0x98>)
 8002074:	f043 0301 	orr.w	r3, r3, #1
 8002078:	6313      	str	r3, [r2, #48]	; 0x30
 800207a:	4b12      	ldr	r3, [pc, #72]	; (80020c4 <HAL_UART_MspInit+0x98>)
 800207c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207e:	f003 0301 	and.w	r3, r3, #1
 8002082:	60fb      	str	r3, [r7, #12]
 8002084:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002086:	2303      	movs	r3, #3
 8002088:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800208a:	2302      	movs	r3, #2
 800208c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800208e:	2300      	movs	r3, #0
 8002090:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002092:	2303      	movs	r3, #3
 8002094:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002096:	2308      	movs	r3, #8
 8002098:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800209a:	f107 0314 	add.w	r3, r7, #20
 800209e:	4619      	mov	r1, r3
 80020a0:	4809      	ldr	r0, [pc, #36]	; (80020c8 <HAL_UART_MspInit+0x9c>)
 80020a2:	f000 fabd 	bl	8002620 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80020a6:	2200      	movs	r2, #0
 80020a8:	2100      	movs	r1, #0
 80020aa:	2034      	movs	r0, #52	; 0x34
 80020ac:	f000 f9ef 	bl	800248e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80020b0:	2034      	movs	r0, #52	; 0x34
 80020b2:	f000 fa08 	bl	80024c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 80020b6:	bf00      	nop
 80020b8:	3728      	adds	r7, #40	; 0x28
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	40004c00 	.word	0x40004c00
 80020c4:	40023800 	.word	0x40023800
 80020c8:	40020000 	.word	0x40020000

080020cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80020d0:	e7fe      	b.n	80020d0 <NMI_Handler+0x4>

080020d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020d2:	b480      	push	{r7}
 80020d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020d6:	e7fe      	b.n	80020d6 <HardFault_Handler+0x4>

080020d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020dc:	e7fe      	b.n	80020dc <MemManage_Handler+0x4>

080020de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020de:	b480      	push	{r7}
 80020e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020e2:	e7fe      	b.n	80020e2 <BusFault_Handler+0x4>

080020e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020e4:	b480      	push	{r7}
 80020e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020e8:	e7fe      	b.n	80020e8 <UsageFault_Handler+0x4>

080020ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020ea:	b480      	push	{r7}
 80020ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020ee:	bf00      	nop
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr

080020f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020fc:	bf00      	nop
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr

08002106 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002106:	b480      	push	{r7}
 8002108:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800210a:	bf00      	nop
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr

08002114 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002118:	f000 f89a 	bl	8002250 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800211c:	bf00      	nop
 800211e:	bd80      	pop	{r7, pc}

08002120 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002124:	4802      	ldr	r0, [pc, #8]	; (8002130 <UART4_IRQHandler+0x10>)
 8002126:	f002 fefb 	bl	8004f20 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800212a:	bf00      	nop
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	20000210 	.word	0x20000210

08002134 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002134:	b480      	push	{r7}
 8002136:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002138:	4b06      	ldr	r3, [pc, #24]	; (8002154 <SystemInit+0x20>)
 800213a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800213e:	4a05      	ldr	r2, [pc, #20]	; (8002154 <SystemInit+0x20>)
 8002140:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002144:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002148:	bf00      	nop
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr
 8002152:	bf00      	nop
 8002154:	e000ed00 	.word	0xe000ed00

08002158 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002158:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002190 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800215c:	480d      	ldr	r0, [pc, #52]	; (8002194 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800215e:	490e      	ldr	r1, [pc, #56]	; (8002198 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002160:	4a0e      	ldr	r2, [pc, #56]	; (800219c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002162:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002164:	e002      	b.n	800216c <LoopCopyDataInit>

08002166 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002166:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002168:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800216a:	3304      	adds	r3, #4

0800216c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800216c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800216e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002170:	d3f9      	bcc.n	8002166 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002172:	4a0b      	ldr	r2, [pc, #44]	; (80021a0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002174:	4c0b      	ldr	r4, [pc, #44]	; (80021a4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002176:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002178:	e001      	b.n	800217e <LoopFillZerobss>

0800217a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800217a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800217c:	3204      	adds	r2, #4

0800217e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800217e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002180:	d3fb      	bcc.n	800217a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002182:	f7ff ffd7 	bl	8002134 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002186:	f003 fd29 	bl	8005bdc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800218a:	f7fe ff6d 	bl	8001068 <main>
  bx  lr    
 800218e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002190:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002194:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002198:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 800219c:	08007760 	.word	0x08007760
  ldr r2, =_sbss
 80021a0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80021a4:	20000274 	.word	0x20000274

080021a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021a8:	e7fe      	b.n	80021a8 <ADC_IRQHandler>
	...

080021ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80021b0:	4b0e      	ldr	r3, [pc, #56]	; (80021ec <HAL_Init+0x40>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a0d      	ldr	r2, [pc, #52]	; (80021ec <HAL_Init+0x40>)
 80021b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80021bc:	4b0b      	ldr	r3, [pc, #44]	; (80021ec <HAL_Init+0x40>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a0a      	ldr	r2, [pc, #40]	; (80021ec <HAL_Init+0x40>)
 80021c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021c8:	4b08      	ldr	r3, [pc, #32]	; (80021ec <HAL_Init+0x40>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a07      	ldr	r2, [pc, #28]	; (80021ec <HAL_Init+0x40>)
 80021ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021d4:	2003      	movs	r0, #3
 80021d6:	f000 f94f 	bl	8002478 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021da:	200f      	movs	r0, #15
 80021dc:	f000 f808 	bl	80021f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021e0:	f7ff fe1a 	bl	8001e18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021e4:	2300      	movs	r3, #0
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	40023c00 	.word	0x40023c00

080021f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021f8:	4b12      	ldr	r3, [pc, #72]	; (8002244 <HAL_InitTick+0x54>)
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	4b12      	ldr	r3, [pc, #72]	; (8002248 <HAL_InitTick+0x58>)
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	4619      	mov	r1, r3
 8002202:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002206:	fbb3 f3f1 	udiv	r3, r3, r1
 800220a:	fbb2 f3f3 	udiv	r3, r2, r3
 800220e:	4618      	mov	r0, r3
 8002210:	f000 f967 	bl	80024e2 <HAL_SYSTICK_Config>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d001      	beq.n	800221e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e00e      	b.n	800223c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2b0f      	cmp	r3, #15
 8002222:	d80a      	bhi.n	800223a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002224:	2200      	movs	r2, #0
 8002226:	6879      	ldr	r1, [r7, #4]
 8002228:	f04f 30ff 	mov.w	r0, #4294967295
 800222c:	f000 f92f 	bl	800248e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002230:	4a06      	ldr	r2, [pc, #24]	; (800224c <HAL_InitTick+0x5c>)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002236:	2300      	movs	r3, #0
 8002238:	e000      	b.n	800223c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
}
 800223c:	4618      	mov	r0, r3
 800223e:	3708      	adds	r7, #8
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}
 8002244:	20000000 	.word	0x20000000
 8002248:	20000008 	.word	0x20000008
 800224c:	20000004 	.word	0x20000004

08002250 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002250:	b480      	push	{r7}
 8002252:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002254:	4b06      	ldr	r3, [pc, #24]	; (8002270 <HAL_IncTick+0x20>)
 8002256:	781b      	ldrb	r3, [r3, #0]
 8002258:	461a      	mov	r2, r3
 800225a:	4b06      	ldr	r3, [pc, #24]	; (8002274 <HAL_IncTick+0x24>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4413      	add	r3, r2
 8002260:	4a04      	ldr	r2, [pc, #16]	; (8002274 <HAL_IncTick+0x24>)
 8002262:	6013      	str	r3, [r2, #0]
}
 8002264:	bf00      	nop
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop
 8002270:	20000008 	.word	0x20000008
 8002274:	20000270 	.word	0x20000270

08002278 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002278:	b480      	push	{r7}
 800227a:	af00      	add	r7, sp, #0
  return uwTick;
 800227c:	4b03      	ldr	r3, [pc, #12]	; (800228c <HAL_GetTick+0x14>)
 800227e:	681b      	ldr	r3, [r3, #0]
}
 8002280:	4618      	mov	r0, r3
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr
 800228a:	bf00      	nop
 800228c:	20000270 	.word	0x20000270

08002290 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b084      	sub	sp, #16
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002298:	f7ff ffee 	bl	8002278 <HAL_GetTick>
 800229c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022a8:	d005      	beq.n	80022b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022aa:	4b0a      	ldr	r3, [pc, #40]	; (80022d4 <HAL_Delay+0x44>)
 80022ac:	781b      	ldrb	r3, [r3, #0]
 80022ae:	461a      	mov	r2, r3
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	4413      	add	r3, r2
 80022b4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80022b6:	bf00      	nop
 80022b8:	f7ff ffde 	bl	8002278 <HAL_GetTick>
 80022bc:	4602      	mov	r2, r0
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	68fa      	ldr	r2, [r7, #12]
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d8f7      	bhi.n	80022b8 <HAL_Delay+0x28>
  {
  }
}
 80022c8:	bf00      	nop
 80022ca:	bf00      	nop
 80022cc:	3710      	adds	r7, #16
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	20000008 	.word	0x20000008

080022d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022d8:	b480      	push	{r7}
 80022da:	b085      	sub	sp, #20
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	f003 0307 	and.w	r3, r3, #7
 80022e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022e8:	4b0c      	ldr	r3, [pc, #48]	; (800231c <__NVIC_SetPriorityGrouping+0x44>)
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022ee:	68ba      	ldr	r2, [r7, #8]
 80022f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022f4:	4013      	ands	r3, r2
 80022f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002300:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002304:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002308:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800230a:	4a04      	ldr	r2, [pc, #16]	; (800231c <__NVIC_SetPriorityGrouping+0x44>)
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	60d3      	str	r3, [r2, #12]
}
 8002310:	bf00      	nop
 8002312:	3714      	adds	r7, #20
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr
 800231c:	e000ed00 	.word	0xe000ed00

08002320 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002324:	4b04      	ldr	r3, [pc, #16]	; (8002338 <__NVIC_GetPriorityGrouping+0x18>)
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	0a1b      	lsrs	r3, r3, #8
 800232a:	f003 0307 	and.w	r3, r3, #7
}
 800232e:	4618      	mov	r0, r3
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr
 8002338:	e000ed00 	.word	0xe000ed00

0800233c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800233c:	b480      	push	{r7}
 800233e:	b083      	sub	sp, #12
 8002340:	af00      	add	r7, sp, #0
 8002342:	4603      	mov	r3, r0
 8002344:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800234a:	2b00      	cmp	r3, #0
 800234c:	db0b      	blt.n	8002366 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800234e:	79fb      	ldrb	r3, [r7, #7]
 8002350:	f003 021f 	and.w	r2, r3, #31
 8002354:	4907      	ldr	r1, [pc, #28]	; (8002374 <__NVIC_EnableIRQ+0x38>)
 8002356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800235a:	095b      	lsrs	r3, r3, #5
 800235c:	2001      	movs	r0, #1
 800235e:	fa00 f202 	lsl.w	r2, r0, r2
 8002362:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002366:	bf00      	nop
 8002368:	370c      	adds	r7, #12
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr
 8002372:	bf00      	nop
 8002374:	e000e100 	.word	0xe000e100

08002378 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002378:	b480      	push	{r7}
 800237a:	b083      	sub	sp, #12
 800237c:	af00      	add	r7, sp, #0
 800237e:	4603      	mov	r3, r0
 8002380:	6039      	str	r1, [r7, #0]
 8002382:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002384:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002388:	2b00      	cmp	r3, #0
 800238a:	db0a      	blt.n	80023a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	b2da      	uxtb	r2, r3
 8002390:	490c      	ldr	r1, [pc, #48]	; (80023c4 <__NVIC_SetPriority+0x4c>)
 8002392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002396:	0112      	lsls	r2, r2, #4
 8002398:	b2d2      	uxtb	r2, r2
 800239a:	440b      	add	r3, r1
 800239c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023a0:	e00a      	b.n	80023b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	b2da      	uxtb	r2, r3
 80023a6:	4908      	ldr	r1, [pc, #32]	; (80023c8 <__NVIC_SetPriority+0x50>)
 80023a8:	79fb      	ldrb	r3, [r7, #7]
 80023aa:	f003 030f 	and.w	r3, r3, #15
 80023ae:	3b04      	subs	r3, #4
 80023b0:	0112      	lsls	r2, r2, #4
 80023b2:	b2d2      	uxtb	r2, r2
 80023b4:	440b      	add	r3, r1
 80023b6:	761a      	strb	r2, [r3, #24]
}
 80023b8:	bf00      	nop
 80023ba:	370c      	adds	r7, #12
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr
 80023c4:	e000e100 	.word	0xe000e100
 80023c8:	e000ed00 	.word	0xe000ed00

080023cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b089      	sub	sp, #36	; 0x24
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	60f8      	str	r0, [r7, #12]
 80023d4:	60b9      	str	r1, [r7, #8]
 80023d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	f003 0307 	and.w	r3, r3, #7
 80023de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	f1c3 0307 	rsb	r3, r3, #7
 80023e6:	2b04      	cmp	r3, #4
 80023e8:	bf28      	it	cs
 80023ea:	2304      	movcs	r3, #4
 80023ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	3304      	adds	r3, #4
 80023f2:	2b06      	cmp	r3, #6
 80023f4:	d902      	bls.n	80023fc <NVIC_EncodePriority+0x30>
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	3b03      	subs	r3, #3
 80023fa:	e000      	b.n	80023fe <NVIC_EncodePriority+0x32>
 80023fc:	2300      	movs	r3, #0
 80023fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002400:	f04f 32ff 	mov.w	r2, #4294967295
 8002404:	69bb      	ldr	r3, [r7, #24]
 8002406:	fa02 f303 	lsl.w	r3, r2, r3
 800240a:	43da      	mvns	r2, r3
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	401a      	ands	r2, r3
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002414:	f04f 31ff 	mov.w	r1, #4294967295
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	fa01 f303 	lsl.w	r3, r1, r3
 800241e:	43d9      	mvns	r1, r3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002424:	4313      	orrs	r3, r2
         );
}
 8002426:	4618      	mov	r0, r3
 8002428:	3724      	adds	r7, #36	; 0x24
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
	...

08002434 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b082      	sub	sp, #8
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	3b01      	subs	r3, #1
 8002440:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002444:	d301      	bcc.n	800244a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002446:	2301      	movs	r3, #1
 8002448:	e00f      	b.n	800246a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800244a:	4a0a      	ldr	r2, [pc, #40]	; (8002474 <SysTick_Config+0x40>)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	3b01      	subs	r3, #1
 8002450:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002452:	210f      	movs	r1, #15
 8002454:	f04f 30ff 	mov.w	r0, #4294967295
 8002458:	f7ff ff8e 	bl	8002378 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800245c:	4b05      	ldr	r3, [pc, #20]	; (8002474 <SysTick_Config+0x40>)
 800245e:	2200      	movs	r2, #0
 8002460:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002462:	4b04      	ldr	r3, [pc, #16]	; (8002474 <SysTick_Config+0x40>)
 8002464:	2207      	movs	r2, #7
 8002466:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002468:	2300      	movs	r3, #0
}
 800246a:	4618      	mov	r0, r3
 800246c:	3708      	adds	r7, #8
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	e000e010 	.word	0xe000e010

08002478 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b082      	sub	sp, #8
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002480:	6878      	ldr	r0, [r7, #4]
 8002482:	f7ff ff29 	bl	80022d8 <__NVIC_SetPriorityGrouping>
}
 8002486:	bf00      	nop
 8002488:	3708      	adds	r7, #8
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}

0800248e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800248e:	b580      	push	{r7, lr}
 8002490:	b086      	sub	sp, #24
 8002492:	af00      	add	r7, sp, #0
 8002494:	4603      	mov	r3, r0
 8002496:	60b9      	str	r1, [r7, #8]
 8002498:	607a      	str	r2, [r7, #4]
 800249a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800249c:	2300      	movs	r3, #0
 800249e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024a0:	f7ff ff3e 	bl	8002320 <__NVIC_GetPriorityGrouping>
 80024a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024a6:	687a      	ldr	r2, [r7, #4]
 80024a8:	68b9      	ldr	r1, [r7, #8]
 80024aa:	6978      	ldr	r0, [r7, #20]
 80024ac:	f7ff ff8e 	bl	80023cc <NVIC_EncodePriority>
 80024b0:	4602      	mov	r2, r0
 80024b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024b6:	4611      	mov	r1, r2
 80024b8:	4618      	mov	r0, r3
 80024ba:	f7ff ff5d 	bl	8002378 <__NVIC_SetPriority>
}
 80024be:	bf00      	nop
 80024c0:	3718      	adds	r7, #24
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}

080024c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024c6:	b580      	push	{r7, lr}
 80024c8:	b082      	sub	sp, #8
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	4603      	mov	r3, r0
 80024ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024d4:	4618      	mov	r0, r3
 80024d6:	f7ff ff31 	bl	800233c <__NVIC_EnableIRQ>
}
 80024da:	bf00      	nop
 80024dc:	3708      	adds	r7, #8
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}

080024e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024e2:	b580      	push	{r7, lr}
 80024e4:	b082      	sub	sp, #8
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	f7ff ffa2 	bl	8002434 <SysTick_Config>
 80024f0:	4603      	mov	r3, r0
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3708      	adds	r7, #8
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}

080024fa <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80024fa:	b580      	push	{r7, lr}
 80024fc:	b084      	sub	sp, #16
 80024fe:	af00      	add	r7, sp, #0
 8002500:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002506:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002508:	f7ff feb6 	bl	8002278 <HAL_GetTick>
 800250c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002514:	b2db      	uxtb	r3, r3
 8002516:	2b02      	cmp	r3, #2
 8002518:	d008      	beq.n	800252c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2280      	movs	r2, #128	; 0x80
 800251e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2200      	movs	r2, #0
 8002524:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e052      	b.n	80025d2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f022 0216 	bic.w	r2, r2, #22
 800253a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	695a      	ldr	r2, [r3, #20]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800254a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002550:	2b00      	cmp	r3, #0
 8002552:	d103      	bne.n	800255c <HAL_DMA_Abort+0x62>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002558:	2b00      	cmp	r3, #0
 800255a:	d007      	beq.n	800256c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f022 0208 	bic.w	r2, r2, #8
 800256a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f022 0201 	bic.w	r2, r2, #1
 800257a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800257c:	e013      	b.n	80025a6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800257e:	f7ff fe7b 	bl	8002278 <HAL_GetTick>
 8002582:	4602      	mov	r2, r0
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	1ad3      	subs	r3, r2, r3
 8002588:	2b05      	cmp	r3, #5
 800258a:	d90c      	bls.n	80025a6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2220      	movs	r2, #32
 8002590:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2203      	movs	r2, #3
 8002596:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2200      	movs	r2, #0
 800259e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	e015      	b.n	80025d2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 0301 	and.w	r3, r3, #1
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d1e4      	bne.n	800257e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025b8:	223f      	movs	r2, #63	; 0x3f
 80025ba:	409a      	lsls	r2, r3
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2201      	movs	r2, #1
 80025c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2200      	movs	r2, #0
 80025cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80025d0:	2300      	movs	r3, #0
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3710      	adds	r7, #16
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}

080025da <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80025da:	b480      	push	{r7}
 80025dc:	b083      	sub	sp, #12
 80025de:	af00      	add	r7, sp, #0
 80025e0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	2b02      	cmp	r3, #2
 80025ec:	d004      	beq.n	80025f8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2280      	movs	r2, #128	; 0x80
 80025f2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	e00c      	b.n	8002612 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2205      	movs	r2, #5
 80025fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f022 0201 	bic.w	r2, r2, #1
 800260e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002610:	2300      	movs	r3, #0
}
 8002612:	4618      	mov	r0, r3
 8002614:	370c      	adds	r7, #12
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr
	...

08002620 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002620:	b480      	push	{r7}
 8002622:	b089      	sub	sp, #36	; 0x24
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
 8002628:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800262a:	2300      	movs	r3, #0
 800262c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800262e:	2300      	movs	r3, #0
 8002630:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002632:	2300      	movs	r3, #0
 8002634:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002636:	2300      	movs	r3, #0
 8002638:	61fb      	str	r3, [r7, #28]
 800263a:	e16b      	b.n	8002914 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800263c:	2201      	movs	r2, #1
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	fa02 f303 	lsl.w	r3, r2, r3
 8002644:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	697a      	ldr	r2, [r7, #20]
 800264c:	4013      	ands	r3, r2
 800264e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002650:	693a      	ldr	r2, [r7, #16]
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	429a      	cmp	r2, r3
 8002656:	f040 815a 	bne.w	800290e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	f003 0303 	and.w	r3, r3, #3
 8002662:	2b01      	cmp	r3, #1
 8002664:	d005      	beq.n	8002672 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800266e:	2b02      	cmp	r3, #2
 8002670:	d130      	bne.n	80026d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	005b      	lsls	r3, r3, #1
 800267c:	2203      	movs	r2, #3
 800267e:	fa02 f303 	lsl.w	r3, r2, r3
 8002682:	43db      	mvns	r3, r3
 8002684:	69ba      	ldr	r2, [r7, #24]
 8002686:	4013      	ands	r3, r2
 8002688:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	68da      	ldr	r2, [r3, #12]
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	005b      	lsls	r3, r3, #1
 8002692:	fa02 f303 	lsl.w	r3, r2, r3
 8002696:	69ba      	ldr	r2, [r7, #24]
 8002698:	4313      	orrs	r3, r2
 800269a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	69ba      	ldr	r2, [r7, #24]
 80026a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026a8:	2201      	movs	r2, #1
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	fa02 f303 	lsl.w	r3, r2, r3
 80026b0:	43db      	mvns	r3, r3
 80026b2:	69ba      	ldr	r2, [r7, #24]
 80026b4:	4013      	ands	r3, r2
 80026b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	091b      	lsrs	r3, r3, #4
 80026be:	f003 0201 	and.w	r2, r3, #1
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	fa02 f303 	lsl.w	r3, r2, r3
 80026c8:	69ba      	ldr	r2, [r7, #24]
 80026ca:	4313      	orrs	r3, r2
 80026cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	69ba      	ldr	r2, [r7, #24]
 80026d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f003 0303 	and.w	r3, r3, #3
 80026dc:	2b03      	cmp	r3, #3
 80026de:	d017      	beq.n	8002710 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	005b      	lsls	r3, r3, #1
 80026ea:	2203      	movs	r2, #3
 80026ec:	fa02 f303 	lsl.w	r3, r2, r3
 80026f0:	43db      	mvns	r3, r3
 80026f2:	69ba      	ldr	r2, [r7, #24]
 80026f4:	4013      	ands	r3, r2
 80026f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	689a      	ldr	r2, [r3, #8]
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	005b      	lsls	r3, r3, #1
 8002700:	fa02 f303 	lsl.w	r3, r2, r3
 8002704:	69ba      	ldr	r2, [r7, #24]
 8002706:	4313      	orrs	r3, r2
 8002708:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	69ba      	ldr	r2, [r7, #24]
 800270e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f003 0303 	and.w	r3, r3, #3
 8002718:	2b02      	cmp	r3, #2
 800271a:	d123      	bne.n	8002764 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	08da      	lsrs	r2, r3, #3
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	3208      	adds	r2, #8
 8002724:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002728:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	f003 0307 	and.w	r3, r3, #7
 8002730:	009b      	lsls	r3, r3, #2
 8002732:	220f      	movs	r2, #15
 8002734:	fa02 f303 	lsl.w	r3, r2, r3
 8002738:	43db      	mvns	r3, r3
 800273a:	69ba      	ldr	r2, [r7, #24]
 800273c:	4013      	ands	r3, r2
 800273e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	691a      	ldr	r2, [r3, #16]
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	f003 0307 	and.w	r3, r3, #7
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	fa02 f303 	lsl.w	r3, r2, r3
 8002750:	69ba      	ldr	r2, [r7, #24]
 8002752:	4313      	orrs	r3, r2
 8002754:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	08da      	lsrs	r2, r3, #3
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	3208      	adds	r2, #8
 800275e:	69b9      	ldr	r1, [r7, #24]
 8002760:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	005b      	lsls	r3, r3, #1
 800276e:	2203      	movs	r2, #3
 8002770:	fa02 f303 	lsl.w	r3, r2, r3
 8002774:	43db      	mvns	r3, r3
 8002776:	69ba      	ldr	r2, [r7, #24]
 8002778:	4013      	ands	r3, r2
 800277a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f003 0203 	and.w	r2, r3, #3
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	005b      	lsls	r3, r3, #1
 8002788:	fa02 f303 	lsl.w	r3, r2, r3
 800278c:	69ba      	ldr	r2, [r7, #24]
 800278e:	4313      	orrs	r3, r2
 8002790:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	69ba      	ldr	r2, [r7, #24]
 8002796:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	f000 80b4 	beq.w	800290e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027a6:	2300      	movs	r3, #0
 80027a8:	60fb      	str	r3, [r7, #12]
 80027aa:	4b60      	ldr	r3, [pc, #384]	; (800292c <HAL_GPIO_Init+0x30c>)
 80027ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ae:	4a5f      	ldr	r2, [pc, #380]	; (800292c <HAL_GPIO_Init+0x30c>)
 80027b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027b4:	6453      	str	r3, [r2, #68]	; 0x44
 80027b6:	4b5d      	ldr	r3, [pc, #372]	; (800292c <HAL_GPIO_Init+0x30c>)
 80027b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027be:	60fb      	str	r3, [r7, #12]
 80027c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80027c2:	4a5b      	ldr	r2, [pc, #364]	; (8002930 <HAL_GPIO_Init+0x310>)
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	089b      	lsrs	r3, r3, #2
 80027c8:	3302      	adds	r3, #2
 80027ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	f003 0303 	and.w	r3, r3, #3
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	220f      	movs	r2, #15
 80027da:	fa02 f303 	lsl.w	r3, r2, r3
 80027de:	43db      	mvns	r3, r3
 80027e0:	69ba      	ldr	r2, [r7, #24]
 80027e2:	4013      	ands	r3, r2
 80027e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4a52      	ldr	r2, [pc, #328]	; (8002934 <HAL_GPIO_Init+0x314>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d02b      	beq.n	8002846 <HAL_GPIO_Init+0x226>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4a51      	ldr	r2, [pc, #324]	; (8002938 <HAL_GPIO_Init+0x318>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d025      	beq.n	8002842 <HAL_GPIO_Init+0x222>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	4a50      	ldr	r2, [pc, #320]	; (800293c <HAL_GPIO_Init+0x31c>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d01f      	beq.n	800283e <HAL_GPIO_Init+0x21e>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	4a4f      	ldr	r2, [pc, #316]	; (8002940 <HAL_GPIO_Init+0x320>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d019      	beq.n	800283a <HAL_GPIO_Init+0x21a>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	4a4e      	ldr	r2, [pc, #312]	; (8002944 <HAL_GPIO_Init+0x324>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d013      	beq.n	8002836 <HAL_GPIO_Init+0x216>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	4a4d      	ldr	r2, [pc, #308]	; (8002948 <HAL_GPIO_Init+0x328>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d00d      	beq.n	8002832 <HAL_GPIO_Init+0x212>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	4a4c      	ldr	r2, [pc, #304]	; (800294c <HAL_GPIO_Init+0x32c>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d007      	beq.n	800282e <HAL_GPIO_Init+0x20e>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	4a4b      	ldr	r2, [pc, #300]	; (8002950 <HAL_GPIO_Init+0x330>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d101      	bne.n	800282a <HAL_GPIO_Init+0x20a>
 8002826:	2307      	movs	r3, #7
 8002828:	e00e      	b.n	8002848 <HAL_GPIO_Init+0x228>
 800282a:	2308      	movs	r3, #8
 800282c:	e00c      	b.n	8002848 <HAL_GPIO_Init+0x228>
 800282e:	2306      	movs	r3, #6
 8002830:	e00a      	b.n	8002848 <HAL_GPIO_Init+0x228>
 8002832:	2305      	movs	r3, #5
 8002834:	e008      	b.n	8002848 <HAL_GPIO_Init+0x228>
 8002836:	2304      	movs	r3, #4
 8002838:	e006      	b.n	8002848 <HAL_GPIO_Init+0x228>
 800283a:	2303      	movs	r3, #3
 800283c:	e004      	b.n	8002848 <HAL_GPIO_Init+0x228>
 800283e:	2302      	movs	r3, #2
 8002840:	e002      	b.n	8002848 <HAL_GPIO_Init+0x228>
 8002842:	2301      	movs	r3, #1
 8002844:	e000      	b.n	8002848 <HAL_GPIO_Init+0x228>
 8002846:	2300      	movs	r3, #0
 8002848:	69fa      	ldr	r2, [r7, #28]
 800284a:	f002 0203 	and.w	r2, r2, #3
 800284e:	0092      	lsls	r2, r2, #2
 8002850:	4093      	lsls	r3, r2
 8002852:	69ba      	ldr	r2, [r7, #24]
 8002854:	4313      	orrs	r3, r2
 8002856:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002858:	4935      	ldr	r1, [pc, #212]	; (8002930 <HAL_GPIO_Init+0x310>)
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	089b      	lsrs	r3, r3, #2
 800285e:	3302      	adds	r3, #2
 8002860:	69ba      	ldr	r2, [r7, #24]
 8002862:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002866:	4b3b      	ldr	r3, [pc, #236]	; (8002954 <HAL_GPIO_Init+0x334>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	43db      	mvns	r3, r3
 8002870:	69ba      	ldr	r2, [r7, #24]
 8002872:	4013      	ands	r3, r2
 8002874:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d003      	beq.n	800288a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002882:	69ba      	ldr	r2, [r7, #24]
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	4313      	orrs	r3, r2
 8002888:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800288a:	4a32      	ldr	r2, [pc, #200]	; (8002954 <HAL_GPIO_Init+0x334>)
 800288c:	69bb      	ldr	r3, [r7, #24]
 800288e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002890:	4b30      	ldr	r3, [pc, #192]	; (8002954 <HAL_GPIO_Init+0x334>)
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	43db      	mvns	r3, r3
 800289a:	69ba      	ldr	r2, [r7, #24]
 800289c:	4013      	ands	r3, r2
 800289e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d003      	beq.n	80028b4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80028ac:	69ba      	ldr	r2, [r7, #24]
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	4313      	orrs	r3, r2
 80028b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80028b4:	4a27      	ldr	r2, [pc, #156]	; (8002954 <HAL_GPIO_Init+0x334>)
 80028b6:	69bb      	ldr	r3, [r7, #24]
 80028b8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028ba:	4b26      	ldr	r3, [pc, #152]	; (8002954 <HAL_GPIO_Init+0x334>)
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	43db      	mvns	r3, r3
 80028c4:	69ba      	ldr	r2, [r7, #24]
 80028c6:	4013      	ands	r3, r2
 80028c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d003      	beq.n	80028de <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80028d6:	69ba      	ldr	r2, [r7, #24]
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	4313      	orrs	r3, r2
 80028dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80028de:	4a1d      	ldr	r2, [pc, #116]	; (8002954 <HAL_GPIO_Init+0x334>)
 80028e0:	69bb      	ldr	r3, [r7, #24]
 80028e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028e4:	4b1b      	ldr	r3, [pc, #108]	; (8002954 <HAL_GPIO_Init+0x334>)
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	43db      	mvns	r3, r3
 80028ee:	69ba      	ldr	r2, [r7, #24]
 80028f0:	4013      	ands	r3, r2
 80028f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d003      	beq.n	8002908 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002900:	69ba      	ldr	r2, [r7, #24]
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	4313      	orrs	r3, r2
 8002906:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002908:	4a12      	ldr	r2, [pc, #72]	; (8002954 <HAL_GPIO_Init+0x334>)
 800290a:	69bb      	ldr	r3, [r7, #24]
 800290c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	3301      	adds	r3, #1
 8002912:	61fb      	str	r3, [r7, #28]
 8002914:	69fb      	ldr	r3, [r7, #28]
 8002916:	2b0f      	cmp	r3, #15
 8002918:	f67f ae90 	bls.w	800263c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800291c:	bf00      	nop
 800291e:	bf00      	nop
 8002920:	3724      	adds	r7, #36	; 0x24
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr
 800292a:	bf00      	nop
 800292c:	40023800 	.word	0x40023800
 8002930:	40013800 	.word	0x40013800
 8002934:	40020000 	.word	0x40020000
 8002938:	40020400 	.word	0x40020400
 800293c:	40020800 	.word	0x40020800
 8002940:	40020c00 	.word	0x40020c00
 8002944:	40021000 	.word	0x40021000
 8002948:	40021400 	.word	0x40021400
 800294c:	40021800 	.word	0x40021800
 8002950:	40021c00 	.word	0x40021c00
 8002954:	40013c00 	.word	0x40013c00

08002958 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b084      	sub	sp, #16
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d101      	bne.n	800296a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e12b      	b.n	8002bc2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002970:	b2db      	uxtb	r3, r3
 8002972:	2b00      	cmp	r3, #0
 8002974:	d106      	bne.n	8002984 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2200      	movs	r2, #0
 800297a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f7ff fa72 	bl	8001e68 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2224      	movs	r2, #36	; 0x24
 8002988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f022 0201 	bic.w	r2, r2, #1
 800299a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80029aa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80029ba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80029bc:	f001 fd3e 	bl	800443c <HAL_RCC_GetPCLK1Freq>
 80029c0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	4a81      	ldr	r2, [pc, #516]	; (8002bcc <HAL_I2C_Init+0x274>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d807      	bhi.n	80029dc <HAL_I2C_Init+0x84>
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	4a80      	ldr	r2, [pc, #512]	; (8002bd0 <HAL_I2C_Init+0x278>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	bf94      	ite	ls
 80029d4:	2301      	movls	r3, #1
 80029d6:	2300      	movhi	r3, #0
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	e006      	b.n	80029ea <HAL_I2C_Init+0x92>
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	4a7d      	ldr	r2, [pc, #500]	; (8002bd4 <HAL_I2C_Init+0x27c>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	bf94      	ite	ls
 80029e4:	2301      	movls	r3, #1
 80029e6:	2300      	movhi	r3, #0
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d001      	beq.n	80029f2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e0e7      	b.n	8002bc2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	4a78      	ldr	r2, [pc, #480]	; (8002bd8 <HAL_I2C_Init+0x280>)
 80029f6:	fba2 2303 	umull	r2, r3, r2, r3
 80029fa:	0c9b      	lsrs	r3, r3, #18
 80029fc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	68ba      	ldr	r2, [r7, #8]
 8002a0e:	430a      	orrs	r2, r1
 8002a10:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	6a1b      	ldr	r3, [r3, #32]
 8002a18:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	4a6a      	ldr	r2, [pc, #424]	; (8002bcc <HAL_I2C_Init+0x274>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d802      	bhi.n	8002a2c <HAL_I2C_Init+0xd4>
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	3301      	adds	r3, #1
 8002a2a:	e009      	b.n	8002a40 <HAL_I2C_Init+0xe8>
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002a32:	fb02 f303 	mul.w	r3, r2, r3
 8002a36:	4a69      	ldr	r2, [pc, #420]	; (8002bdc <HAL_I2C_Init+0x284>)
 8002a38:	fba2 2303 	umull	r2, r3, r2, r3
 8002a3c:	099b      	lsrs	r3, r3, #6
 8002a3e:	3301      	adds	r3, #1
 8002a40:	687a      	ldr	r2, [r7, #4]
 8002a42:	6812      	ldr	r2, [r2, #0]
 8002a44:	430b      	orrs	r3, r1
 8002a46:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	69db      	ldr	r3, [r3, #28]
 8002a4e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002a52:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	495c      	ldr	r1, [pc, #368]	; (8002bcc <HAL_I2C_Init+0x274>)
 8002a5c:	428b      	cmp	r3, r1
 8002a5e:	d819      	bhi.n	8002a94 <HAL_I2C_Init+0x13c>
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	1e59      	subs	r1, r3, #1
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	005b      	lsls	r3, r3, #1
 8002a6a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a6e:	1c59      	adds	r1, r3, #1
 8002a70:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002a74:	400b      	ands	r3, r1
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d00a      	beq.n	8002a90 <HAL_I2C_Init+0x138>
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	1e59      	subs	r1, r3, #1
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	005b      	lsls	r3, r3, #1
 8002a84:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a88:	3301      	adds	r3, #1
 8002a8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a8e:	e051      	b.n	8002b34 <HAL_I2C_Init+0x1dc>
 8002a90:	2304      	movs	r3, #4
 8002a92:	e04f      	b.n	8002b34 <HAL_I2C_Init+0x1dc>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d111      	bne.n	8002ac0 <HAL_I2C_Init+0x168>
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	1e58      	subs	r0, r3, #1
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6859      	ldr	r1, [r3, #4]
 8002aa4:	460b      	mov	r3, r1
 8002aa6:	005b      	lsls	r3, r3, #1
 8002aa8:	440b      	add	r3, r1
 8002aaa:	fbb0 f3f3 	udiv	r3, r0, r3
 8002aae:	3301      	adds	r3, #1
 8002ab0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	bf0c      	ite	eq
 8002ab8:	2301      	moveq	r3, #1
 8002aba:	2300      	movne	r3, #0
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	e012      	b.n	8002ae6 <HAL_I2C_Init+0x18e>
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	1e58      	subs	r0, r3, #1
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6859      	ldr	r1, [r3, #4]
 8002ac8:	460b      	mov	r3, r1
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	440b      	add	r3, r1
 8002ace:	0099      	lsls	r1, r3, #2
 8002ad0:	440b      	add	r3, r1
 8002ad2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ad6:	3301      	adds	r3, #1
 8002ad8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	bf0c      	ite	eq
 8002ae0:	2301      	moveq	r3, #1
 8002ae2:	2300      	movne	r3, #0
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d001      	beq.n	8002aee <HAL_I2C_Init+0x196>
 8002aea:	2301      	movs	r3, #1
 8002aec:	e022      	b.n	8002b34 <HAL_I2C_Init+0x1dc>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d10e      	bne.n	8002b14 <HAL_I2C_Init+0x1bc>
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	1e58      	subs	r0, r3, #1
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6859      	ldr	r1, [r3, #4]
 8002afe:	460b      	mov	r3, r1
 8002b00:	005b      	lsls	r3, r3, #1
 8002b02:	440b      	add	r3, r1
 8002b04:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b08:	3301      	adds	r3, #1
 8002b0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b12:	e00f      	b.n	8002b34 <HAL_I2C_Init+0x1dc>
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	1e58      	subs	r0, r3, #1
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6859      	ldr	r1, [r3, #4]
 8002b1c:	460b      	mov	r3, r1
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	440b      	add	r3, r1
 8002b22:	0099      	lsls	r1, r3, #2
 8002b24:	440b      	add	r3, r1
 8002b26:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b2a:	3301      	adds	r3, #1
 8002b2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b30:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b34:	6879      	ldr	r1, [r7, #4]
 8002b36:	6809      	ldr	r1, [r1, #0]
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	69da      	ldr	r2, [r3, #28]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6a1b      	ldr	r3, [r3, #32]
 8002b4e:	431a      	orrs	r2, r3
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	430a      	orrs	r2, r1
 8002b56:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002b62:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002b66:	687a      	ldr	r2, [r7, #4]
 8002b68:	6911      	ldr	r1, [r2, #16]
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	68d2      	ldr	r2, [r2, #12]
 8002b6e:	4311      	orrs	r1, r2
 8002b70:	687a      	ldr	r2, [r7, #4]
 8002b72:	6812      	ldr	r2, [r2, #0]
 8002b74:	430b      	orrs	r3, r1
 8002b76:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	68db      	ldr	r3, [r3, #12]
 8002b7e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	695a      	ldr	r2, [r3, #20]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	699b      	ldr	r3, [r3, #24]
 8002b8a:	431a      	orrs	r2, r3
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	430a      	orrs	r2, r1
 8002b92:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f042 0201 	orr.w	r2, r2, #1
 8002ba2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2220      	movs	r2, #32
 8002bae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002bc0:	2300      	movs	r3, #0
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3710      	adds	r7, #16
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	000186a0 	.word	0x000186a0
 8002bd0:	001e847f 	.word	0x001e847f
 8002bd4:	003d08ff 	.word	0x003d08ff
 8002bd8:	431bde83 	.word	0x431bde83
 8002bdc:	10624dd3 	.word	0x10624dd3

08002be0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b088      	sub	sp, #32
 8002be4:	af02      	add	r7, sp, #8
 8002be6:	60f8      	str	r0, [r7, #12]
 8002be8:	607a      	str	r2, [r7, #4]
 8002bea:	461a      	mov	r2, r3
 8002bec:	460b      	mov	r3, r1
 8002bee:	817b      	strh	r3, [r7, #10]
 8002bf0:	4613      	mov	r3, r2
 8002bf2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002bf4:	f7ff fb40 	bl	8002278 <HAL_GetTick>
 8002bf8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	2b20      	cmp	r3, #32
 8002c04:	f040 80e0 	bne.w	8002dc8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	9300      	str	r3, [sp, #0]
 8002c0c:	2319      	movs	r3, #25
 8002c0e:	2201      	movs	r2, #1
 8002c10:	4970      	ldr	r1, [pc, #448]	; (8002dd4 <HAL_I2C_Master_Transmit+0x1f4>)
 8002c12:	68f8      	ldr	r0, [r7, #12]
 8002c14:	f000 fde8 	bl	80037e8 <I2C_WaitOnFlagUntilTimeout>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d001      	beq.n	8002c22 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002c1e:	2302      	movs	r3, #2
 8002c20:	e0d3      	b.n	8002dca <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d101      	bne.n	8002c30 <HAL_I2C_Master_Transmit+0x50>
 8002c2c:	2302      	movs	r3, #2
 8002c2e:	e0cc      	b.n	8002dca <HAL_I2C_Master_Transmit+0x1ea>
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2201      	movs	r2, #1
 8002c34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 0301 	and.w	r3, r3, #1
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d007      	beq.n	8002c56 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f042 0201 	orr.w	r2, r2, #1
 8002c54:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c64:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2221      	movs	r2, #33	; 0x21
 8002c6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2210      	movs	r2, #16
 8002c72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	893a      	ldrh	r2, [r7, #8]
 8002c86:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c8c:	b29a      	uxth	r2, r3
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	4a50      	ldr	r2, [pc, #320]	; (8002dd8 <HAL_I2C_Master_Transmit+0x1f8>)
 8002c96:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002c98:	8979      	ldrh	r1, [r7, #10]
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	6a3a      	ldr	r2, [r7, #32]
 8002c9e:	68f8      	ldr	r0, [r7, #12]
 8002ca0:	f000 fbbc 	bl	800341c <I2C_MasterRequestWrite>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d001      	beq.n	8002cae <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e08d      	b.n	8002dca <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cae:	2300      	movs	r3, #0
 8002cb0:	613b      	str	r3, [r7, #16]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	695b      	ldr	r3, [r3, #20]
 8002cb8:	613b      	str	r3, [r7, #16]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	699b      	ldr	r3, [r3, #24]
 8002cc0:	613b      	str	r3, [r7, #16]
 8002cc2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002cc4:	e066      	b.n	8002d94 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cc6:	697a      	ldr	r2, [r7, #20]
 8002cc8:	6a39      	ldr	r1, [r7, #32]
 8002cca:	68f8      	ldr	r0, [r7, #12]
 8002ccc:	f000 fe62 	bl	8003994 <I2C_WaitOnTXEFlagUntilTimeout>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d00d      	beq.n	8002cf2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cda:	2b04      	cmp	r3, #4
 8002cdc:	d107      	bne.n	8002cee <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cec:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e06b      	b.n	8002dca <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf6:	781a      	ldrb	r2, [r3, #0]
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d02:	1c5a      	adds	r2, r3, #1
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d0c:	b29b      	uxth	r3, r3
 8002d0e:	3b01      	subs	r3, #1
 8002d10:	b29a      	uxth	r2, r3
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d1a:	3b01      	subs	r3, #1
 8002d1c:	b29a      	uxth	r2, r3
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	695b      	ldr	r3, [r3, #20]
 8002d28:	f003 0304 	and.w	r3, r3, #4
 8002d2c:	2b04      	cmp	r3, #4
 8002d2e:	d11b      	bne.n	8002d68 <HAL_I2C_Master_Transmit+0x188>
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d017      	beq.n	8002d68 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d3c:	781a      	ldrb	r2, [r3, #0]
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d48:	1c5a      	adds	r2, r3, #1
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d52:	b29b      	uxth	r3, r3
 8002d54:	3b01      	subs	r3, #1
 8002d56:	b29a      	uxth	r2, r3
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d60:	3b01      	subs	r3, #1
 8002d62:	b29a      	uxth	r2, r3
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d68:	697a      	ldr	r2, [r7, #20]
 8002d6a:	6a39      	ldr	r1, [r7, #32]
 8002d6c:	68f8      	ldr	r0, [r7, #12]
 8002d6e:	f000 fe52 	bl	8003a16 <I2C_WaitOnBTFFlagUntilTimeout>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d00d      	beq.n	8002d94 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7c:	2b04      	cmp	r3, #4
 8002d7e:	d107      	bne.n	8002d90 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d8e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	e01a      	b.n	8002dca <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d194      	bne.n	8002cc6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002daa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2220      	movs	r2, #32
 8002db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2200      	movs	r2, #0
 8002db8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	e000      	b.n	8002dca <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002dc8:	2302      	movs	r3, #2
  }
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3718      	adds	r7, #24
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	00100002 	.word	0x00100002
 8002dd8:	ffff0000 	.word	0xffff0000

08002ddc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b08c      	sub	sp, #48	; 0x30
 8002de0:	af02      	add	r7, sp, #8
 8002de2:	60f8      	str	r0, [r7, #12]
 8002de4:	607a      	str	r2, [r7, #4]
 8002de6:	461a      	mov	r2, r3
 8002de8:	460b      	mov	r3, r1
 8002dea:	817b      	strh	r3, [r7, #10]
 8002dec:	4613      	mov	r3, r2
 8002dee:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002df0:	f7ff fa42 	bl	8002278 <HAL_GetTick>
 8002df4:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	2b20      	cmp	r3, #32
 8002e00:	f040 820b 	bne.w	800321a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e06:	9300      	str	r3, [sp, #0]
 8002e08:	2319      	movs	r3, #25
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	497c      	ldr	r1, [pc, #496]	; (8003000 <HAL_I2C_Master_Receive+0x224>)
 8002e0e:	68f8      	ldr	r0, [r7, #12]
 8002e10:	f000 fcea 	bl	80037e8 <I2C_WaitOnFlagUntilTimeout>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d001      	beq.n	8002e1e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002e1a:	2302      	movs	r3, #2
 8002e1c:	e1fe      	b.n	800321c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d101      	bne.n	8002e2c <HAL_I2C_Master_Receive+0x50>
 8002e28:	2302      	movs	r3, #2
 8002e2a:	e1f7      	b.n	800321c <HAL_I2C_Master_Receive+0x440>
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2201      	movs	r2, #1
 8002e30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 0301 	and.w	r3, r3, #1
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d007      	beq.n	8002e52 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f042 0201 	orr.w	r2, r2, #1
 8002e50:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e60:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2222      	movs	r2, #34	; 0x22
 8002e66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2210      	movs	r2, #16
 8002e6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2200      	movs	r2, #0
 8002e76:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	687a      	ldr	r2, [r7, #4]
 8002e7c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	893a      	ldrh	r2, [r7, #8]
 8002e82:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e88:	b29a      	uxth	r2, r3
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	4a5c      	ldr	r2, [pc, #368]	; (8003004 <HAL_I2C_Master_Receive+0x228>)
 8002e92:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002e94:	8979      	ldrh	r1, [r7, #10]
 8002e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e9a:	68f8      	ldr	r0, [r7, #12]
 8002e9c:	f000 fb40 	bl	8003520 <I2C_MasterRequestRead>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d001      	beq.n	8002eaa <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e1b8      	b.n	800321c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d113      	bne.n	8002eda <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	623b      	str	r3, [r7, #32]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	695b      	ldr	r3, [r3, #20]
 8002ebc:	623b      	str	r3, [r7, #32]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	699b      	ldr	r3, [r3, #24]
 8002ec4:	623b      	str	r3, [r7, #32]
 8002ec6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ed6:	601a      	str	r2, [r3, #0]
 8002ed8:	e18c      	b.n	80031f4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	d11b      	bne.n	8002f1a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ef0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	61fb      	str	r3, [r7, #28]
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	695b      	ldr	r3, [r3, #20]
 8002efc:	61fb      	str	r3, [r7, #28]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	699b      	ldr	r3, [r3, #24]
 8002f04:	61fb      	str	r3, [r7, #28]
 8002f06:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f16:	601a      	str	r2, [r3, #0]
 8002f18:	e16c      	b.n	80031f4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f1e:	2b02      	cmp	r3, #2
 8002f20:	d11b      	bne.n	8002f5a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f30:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f40:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f42:	2300      	movs	r3, #0
 8002f44:	61bb      	str	r3, [r7, #24]
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	695b      	ldr	r3, [r3, #20]
 8002f4c:	61bb      	str	r3, [r7, #24]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	699b      	ldr	r3, [r3, #24]
 8002f54:	61bb      	str	r3, [r7, #24]
 8002f56:	69bb      	ldr	r3, [r7, #24]
 8002f58:	e14c      	b.n	80031f4 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002f68:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	617b      	str	r3, [r7, #20]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	695b      	ldr	r3, [r3, #20]
 8002f74:	617b      	str	r3, [r7, #20]
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	699b      	ldr	r3, [r3, #24]
 8002f7c:	617b      	str	r3, [r7, #20]
 8002f7e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002f80:	e138      	b.n	80031f4 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f86:	2b03      	cmp	r3, #3
 8002f88:	f200 80f1 	bhi.w	800316e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d123      	bne.n	8002fdc <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f96:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002f98:	68f8      	ldr	r0, [r7, #12]
 8002f9a:	f000 fd7d 	bl	8003a98 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d001      	beq.n	8002fa8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e139      	b.n	800321c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	691a      	ldr	r2, [r3, #16]
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb2:	b2d2      	uxtb	r2, r2
 8002fb4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fba:	1c5a      	adds	r2, r3, #1
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fc4:	3b01      	subs	r3, #1
 8002fc6:	b29a      	uxth	r2, r3
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fd0:	b29b      	uxth	r3, r3
 8002fd2:	3b01      	subs	r3, #1
 8002fd4:	b29a      	uxth	r2, r3
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002fda:	e10b      	b.n	80031f4 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fe0:	2b02      	cmp	r3, #2
 8002fe2:	d14e      	bne.n	8003082 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe6:	9300      	str	r3, [sp, #0]
 8002fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fea:	2200      	movs	r2, #0
 8002fec:	4906      	ldr	r1, [pc, #24]	; (8003008 <HAL_I2C_Master_Receive+0x22c>)
 8002fee:	68f8      	ldr	r0, [r7, #12]
 8002ff0:	f000 fbfa 	bl	80037e8 <I2C_WaitOnFlagUntilTimeout>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d008      	beq.n	800300c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e10e      	b.n	800321c <HAL_I2C_Master_Receive+0x440>
 8002ffe:	bf00      	nop
 8003000:	00100002 	.word	0x00100002
 8003004:	ffff0000 	.word	0xffff0000
 8003008:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800301a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	691a      	ldr	r2, [r3, #16]
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003026:	b2d2      	uxtb	r2, r2
 8003028:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800302e:	1c5a      	adds	r2, r3, #1
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003038:	3b01      	subs	r3, #1
 800303a:	b29a      	uxth	r2, r3
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003044:	b29b      	uxth	r3, r3
 8003046:	3b01      	subs	r3, #1
 8003048:	b29a      	uxth	r2, r3
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	691a      	ldr	r2, [r3, #16]
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003058:	b2d2      	uxtb	r2, r2
 800305a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003060:	1c5a      	adds	r2, r3, #1
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800306a:	3b01      	subs	r3, #1
 800306c:	b29a      	uxth	r2, r3
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003076:	b29b      	uxth	r3, r3
 8003078:	3b01      	subs	r3, #1
 800307a:	b29a      	uxth	r2, r3
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003080:	e0b8      	b.n	80031f4 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003084:	9300      	str	r3, [sp, #0]
 8003086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003088:	2200      	movs	r2, #0
 800308a:	4966      	ldr	r1, [pc, #408]	; (8003224 <HAL_I2C_Master_Receive+0x448>)
 800308c:	68f8      	ldr	r0, [r7, #12]
 800308e:	f000 fbab 	bl	80037e8 <I2C_WaitOnFlagUntilTimeout>
 8003092:	4603      	mov	r3, r0
 8003094:	2b00      	cmp	r3, #0
 8003096:	d001      	beq.n	800309c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e0bf      	b.n	800321c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	691a      	ldr	r2, [r3, #16]
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b6:	b2d2      	uxtb	r2, r2
 80030b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030be:	1c5a      	adds	r2, r3, #1
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030c8:	3b01      	subs	r3, #1
 80030ca:	b29a      	uxth	r2, r3
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030d4:	b29b      	uxth	r3, r3
 80030d6:	3b01      	subs	r3, #1
 80030d8:	b29a      	uxth	r2, r3
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80030de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e0:	9300      	str	r3, [sp, #0]
 80030e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030e4:	2200      	movs	r2, #0
 80030e6:	494f      	ldr	r1, [pc, #316]	; (8003224 <HAL_I2C_Master_Receive+0x448>)
 80030e8:	68f8      	ldr	r0, [r7, #12]
 80030ea:	f000 fb7d 	bl	80037e8 <I2C_WaitOnFlagUntilTimeout>
 80030ee:	4603      	mov	r3, r0
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d001      	beq.n	80030f8 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	e091      	b.n	800321c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003106:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	691a      	ldr	r2, [r3, #16]
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003112:	b2d2      	uxtb	r2, r2
 8003114:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311a:	1c5a      	adds	r2, r3, #1
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003124:	3b01      	subs	r3, #1
 8003126:	b29a      	uxth	r2, r3
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003130:	b29b      	uxth	r3, r3
 8003132:	3b01      	subs	r3, #1
 8003134:	b29a      	uxth	r2, r3
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	691a      	ldr	r2, [r3, #16]
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003144:	b2d2      	uxtb	r2, r2
 8003146:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314c:	1c5a      	adds	r2, r3, #1
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003156:	3b01      	subs	r3, #1
 8003158:	b29a      	uxth	r2, r3
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003162:	b29b      	uxth	r3, r3
 8003164:	3b01      	subs	r3, #1
 8003166:	b29a      	uxth	r2, r3
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800316c:	e042      	b.n	80031f4 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800316e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003170:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003172:	68f8      	ldr	r0, [r7, #12]
 8003174:	f000 fc90 	bl	8003a98 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003178:	4603      	mov	r3, r0
 800317a:	2b00      	cmp	r3, #0
 800317c:	d001      	beq.n	8003182 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e04c      	b.n	800321c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	691a      	ldr	r2, [r3, #16]
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800318c:	b2d2      	uxtb	r2, r2
 800318e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003194:	1c5a      	adds	r2, r3, #1
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800319e:	3b01      	subs	r3, #1
 80031a0:	b29a      	uxth	r2, r3
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031aa:	b29b      	uxth	r3, r3
 80031ac:	3b01      	subs	r3, #1
 80031ae:	b29a      	uxth	r2, r3
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	695b      	ldr	r3, [r3, #20]
 80031ba:	f003 0304 	and.w	r3, r3, #4
 80031be:	2b04      	cmp	r3, #4
 80031c0:	d118      	bne.n	80031f4 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	691a      	ldr	r2, [r3, #16]
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031cc:	b2d2      	uxtb	r2, r2
 80031ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d4:	1c5a      	adds	r2, r3, #1
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031de:	3b01      	subs	r3, #1
 80031e0:	b29a      	uxth	r2, r3
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031ea:	b29b      	uxth	r3, r3
 80031ec:	3b01      	subs	r3, #1
 80031ee:	b29a      	uxth	r2, r3
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	f47f aec2 	bne.w	8002f82 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2220      	movs	r2, #32
 8003202:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2200      	movs	r2, #0
 800320a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2200      	movs	r2, #0
 8003212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003216:	2300      	movs	r3, #0
 8003218:	e000      	b.n	800321c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800321a:	2302      	movs	r3, #2
  }
}
 800321c:	4618      	mov	r0, r3
 800321e:	3728      	adds	r7, #40	; 0x28
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}
 8003224:	00010004 	.word	0x00010004

08003228 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b088      	sub	sp, #32
 800322c:	af02      	add	r7, sp, #8
 800322e:	60f8      	str	r0, [r7, #12]
 8003230:	4608      	mov	r0, r1
 8003232:	4611      	mov	r1, r2
 8003234:	461a      	mov	r2, r3
 8003236:	4603      	mov	r3, r0
 8003238:	817b      	strh	r3, [r7, #10]
 800323a:	460b      	mov	r3, r1
 800323c:	813b      	strh	r3, [r7, #8]
 800323e:	4613      	mov	r3, r2
 8003240:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003242:	f7ff f819 	bl	8002278 <HAL_GetTick>
 8003246:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800324e:	b2db      	uxtb	r3, r3
 8003250:	2b20      	cmp	r3, #32
 8003252:	f040 80d9 	bne.w	8003408 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	9300      	str	r3, [sp, #0]
 800325a:	2319      	movs	r3, #25
 800325c:	2201      	movs	r2, #1
 800325e:	496d      	ldr	r1, [pc, #436]	; (8003414 <HAL_I2C_Mem_Write+0x1ec>)
 8003260:	68f8      	ldr	r0, [r7, #12]
 8003262:	f000 fac1 	bl	80037e8 <I2C_WaitOnFlagUntilTimeout>
 8003266:	4603      	mov	r3, r0
 8003268:	2b00      	cmp	r3, #0
 800326a:	d001      	beq.n	8003270 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800326c:	2302      	movs	r3, #2
 800326e:	e0cc      	b.n	800340a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003276:	2b01      	cmp	r3, #1
 8003278:	d101      	bne.n	800327e <HAL_I2C_Mem_Write+0x56>
 800327a:	2302      	movs	r3, #2
 800327c:	e0c5      	b.n	800340a <HAL_I2C_Mem_Write+0x1e2>
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2201      	movs	r2, #1
 8003282:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f003 0301 	and.w	r3, r3, #1
 8003290:	2b01      	cmp	r3, #1
 8003292:	d007      	beq.n	80032a4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f042 0201 	orr.w	r2, r2, #1
 80032a2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032b2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2221      	movs	r2, #33	; 0x21
 80032b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2240      	movs	r2, #64	; 0x40
 80032c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2200      	movs	r2, #0
 80032c8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	6a3a      	ldr	r2, [r7, #32]
 80032ce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80032d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032da:	b29a      	uxth	r2, r3
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	4a4d      	ldr	r2, [pc, #308]	; (8003418 <HAL_I2C_Mem_Write+0x1f0>)
 80032e4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80032e6:	88f8      	ldrh	r0, [r7, #6]
 80032e8:	893a      	ldrh	r2, [r7, #8]
 80032ea:	8979      	ldrh	r1, [r7, #10]
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	9301      	str	r3, [sp, #4]
 80032f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032f2:	9300      	str	r3, [sp, #0]
 80032f4:	4603      	mov	r3, r0
 80032f6:	68f8      	ldr	r0, [r7, #12]
 80032f8:	f000 f9e0 	bl	80036bc <I2C_RequestMemoryWrite>
 80032fc:	4603      	mov	r3, r0
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d052      	beq.n	80033a8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e081      	b.n	800340a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003306:	697a      	ldr	r2, [r7, #20]
 8003308:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800330a:	68f8      	ldr	r0, [r7, #12]
 800330c:	f000 fb42 	bl	8003994 <I2C_WaitOnTXEFlagUntilTimeout>
 8003310:	4603      	mov	r3, r0
 8003312:	2b00      	cmp	r3, #0
 8003314:	d00d      	beq.n	8003332 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331a:	2b04      	cmp	r3, #4
 800331c:	d107      	bne.n	800332e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800332c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e06b      	b.n	800340a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003336:	781a      	ldrb	r2, [r3, #0]
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003342:	1c5a      	adds	r2, r3, #1
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800334c:	3b01      	subs	r3, #1
 800334e:	b29a      	uxth	r2, r3
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003358:	b29b      	uxth	r3, r3
 800335a:	3b01      	subs	r3, #1
 800335c:	b29a      	uxth	r2, r3
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	695b      	ldr	r3, [r3, #20]
 8003368:	f003 0304 	and.w	r3, r3, #4
 800336c:	2b04      	cmp	r3, #4
 800336e:	d11b      	bne.n	80033a8 <HAL_I2C_Mem_Write+0x180>
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003374:	2b00      	cmp	r3, #0
 8003376:	d017      	beq.n	80033a8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337c:	781a      	ldrb	r2, [r3, #0]
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003388:	1c5a      	adds	r2, r3, #1
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003392:	3b01      	subs	r3, #1
 8003394:	b29a      	uxth	r2, r3
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800339e:	b29b      	uxth	r3, r3
 80033a0:	3b01      	subs	r3, #1
 80033a2:	b29a      	uxth	r2, r3
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d1aa      	bne.n	8003306 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033b0:	697a      	ldr	r2, [r7, #20]
 80033b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80033b4:	68f8      	ldr	r0, [r7, #12]
 80033b6:	f000 fb2e 	bl	8003a16 <I2C_WaitOnBTFFlagUntilTimeout>
 80033ba:	4603      	mov	r3, r0
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d00d      	beq.n	80033dc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c4:	2b04      	cmp	r3, #4
 80033c6:	d107      	bne.n	80033d8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033d6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	e016      	b.n	800340a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2220      	movs	r2, #32
 80033f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2200      	movs	r2, #0
 80033f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2200      	movs	r2, #0
 8003400:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003404:	2300      	movs	r3, #0
 8003406:	e000      	b.n	800340a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003408:	2302      	movs	r3, #2
  }
}
 800340a:	4618      	mov	r0, r3
 800340c:	3718      	adds	r7, #24
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}
 8003412:	bf00      	nop
 8003414:	00100002 	.word	0x00100002
 8003418:	ffff0000 	.word	0xffff0000

0800341c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b088      	sub	sp, #32
 8003420:	af02      	add	r7, sp, #8
 8003422:	60f8      	str	r0, [r7, #12]
 8003424:	607a      	str	r2, [r7, #4]
 8003426:	603b      	str	r3, [r7, #0]
 8003428:	460b      	mov	r3, r1
 800342a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003430:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	2b08      	cmp	r3, #8
 8003436:	d006      	beq.n	8003446 <I2C_MasterRequestWrite+0x2a>
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	2b01      	cmp	r3, #1
 800343c:	d003      	beq.n	8003446 <I2C_MasterRequestWrite+0x2a>
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003444:	d108      	bne.n	8003458 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003454:	601a      	str	r2, [r3, #0]
 8003456:	e00b      	b.n	8003470 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800345c:	2b12      	cmp	r3, #18
 800345e:	d107      	bne.n	8003470 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800346e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	9300      	str	r3, [sp, #0]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800347c:	68f8      	ldr	r0, [r7, #12]
 800347e:	f000 f9b3 	bl	80037e8 <I2C_WaitOnFlagUntilTimeout>
 8003482:	4603      	mov	r3, r0
 8003484:	2b00      	cmp	r3, #0
 8003486:	d00d      	beq.n	80034a4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003492:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003496:	d103      	bne.n	80034a0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800349e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80034a0:	2303      	movs	r3, #3
 80034a2:	e035      	b.n	8003510 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	691b      	ldr	r3, [r3, #16]
 80034a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80034ac:	d108      	bne.n	80034c0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80034ae:	897b      	ldrh	r3, [r7, #10]
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	461a      	mov	r2, r3
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80034bc:	611a      	str	r2, [r3, #16]
 80034be:	e01b      	b.n	80034f8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80034c0:	897b      	ldrh	r3, [r7, #10]
 80034c2:	11db      	asrs	r3, r3, #7
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	f003 0306 	and.w	r3, r3, #6
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	f063 030f 	orn	r3, r3, #15
 80034d0:	b2da      	uxtb	r2, r3
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	687a      	ldr	r2, [r7, #4]
 80034dc:	490e      	ldr	r1, [pc, #56]	; (8003518 <I2C_MasterRequestWrite+0xfc>)
 80034de:	68f8      	ldr	r0, [r7, #12]
 80034e0:	f000 f9d9 	bl	8003896 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80034e4:	4603      	mov	r3, r0
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d001      	beq.n	80034ee <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	e010      	b.n	8003510 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80034ee:	897b      	ldrh	r3, [r7, #10]
 80034f0:	b2da      	uxtb	r2, r3
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	687a      	ldr	r2, [r7, #4]
 80034fc:	4907      	ldr	r1, [pc, #28]	; (800351c <I2C_MasterRequestWrite+0x100>)
 80034fe:	68f8      	ldr	r0, [r7, #12]
 8003500:	f000 f9c9 	bl	8003896 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003504:	4603      	mov	r3, r0
 8003506:	2b00      	cmp	r3, #0
 8003508:	d001      	beq.n	800350e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	e000      	b.n	8003510 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800350e:	2300      	movs	r3, #0
}
 8003510:	4618      	mov	r0, r3
 8003512:	3718      	adds	r7, #24
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}
 8003518:	00010008 	.word	0x00010008
 800351c:	00010002 	.word	0x00010002

08003520 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b088      	sub	sp, #32
 8003524:	af02      	add	r7, sp, #8
 8003526:	60f8      	str	r0, [r7, #12]
 8003528:	607a      	str	r2, [r7, #4]
 800352a:	603b      	str	r3, [r7, #0]
 800352c:	460b      	mov	r3, r1
 800352e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003534:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003544:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	2b08      	cmp	r3, #8
 800354a:	d006      	beq.n	800355a <I2C_MasterRequestRead+0x3a>
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	2b01      	cmp	r3, #1
 8003550:	d003      	beq.n	800355a <I2C_MasterRequestRead+0x3a>
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003558:	d108      	bne.n	800356c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	681a      	ldr	r2, [r3, #0]
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003568:	601a      	str	r2, [r3, #0]
 800356a:	e00b      	b.n	8003584 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003570:	2b11      	cmp	r3, #17
 8003572:	d107      	bne.n	8003584 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003582:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	9300      	str	r3, [sp, #0]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2200      	movs	r2, #0
 800358c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003590:	68f8      	ldr	r0, [r7, #12]
 8003592:	f000 f929 	bl	80037e8 <I2C_WaitOnFlagUntilTimeout>
 8003596:	4603      	mov	r3, r0
 8003598:	2b00      	cmp	r3, #0
 800359a:	d00d      	beq.n	80035b8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035aa:	d103      	bne.n	80035b4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035b2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80035b4:	2303      	movs	r3, #3
 80035b6:	e079      	b.n	80036ac <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	691b      	ldr	r3, [r3, #16]
 80035bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80035c0:	d108      	bne.n	80035d4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80035c2:	897b      	ldrh	r3, [r7, #10]
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	f043 0301 	orr.w	r3, r3, #1
 80035ca:	b2da      	uxtb	r2, r3
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	611a      	str	r2, [r3, #16]
 80035d2:	e05f      	b.n	8003694 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80035d4:	897b      	ldrh	r3, [r7, #10]
 80035d6:	11db      	asrs	r3, r3, #7
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	f003 0306 	and.w	r3, r3, #6
 80035de:	b2db      	uxtb	r3, r3
 80035e0:	f063 030f 	orn	r3, r3, #15
 80035e4:	b2da      	uxtb	r2, r3
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	4930      	ldr	r1, [pc, #192]	; (80036b4 <I2C_MasterRequestRead+0x194>)
 80035f2:	68f8      	ldr	r0, [r7, #12]
 80035f4:	f000 f94f 	bl	8003896 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035f8:	4603      	mov	r3, r0
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d001      	beq.n	8003602 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e054      	b.n	80036ac <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003602:	897b      	ldrh	r3, [r7, #10]
 8003604:	b2da      	uxtb	r2, r3
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	687a      	ldr	r2, [r7, #4]
 8003610:	4929      	ldr	r1, [pc, #164]	; (80036b8 <I2C_MasterRequestRead+0x198>)
 8003612:	68f8      	ldr	r0, [r7, #12]
 8003614:	f000 f93f 	bl	8003896 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003618:	4603      	mov	r3, r0
 800361a:	2b00      	cmp	r3, #0
 800361c:	d001      	beq.n	8003622 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e044      	b.n	80036ac <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003622:	2300      	movs	r3, #0
 8003624:	613b      	str	r3, [r7, #16]
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	695b      	ldr	r3, [r3, #20]
 800362c:	613b      	str	r3, [r7, #16]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	699b      	ldr	r3, [r3, #24]
 8003634:	613b      	str	r3, [r7, #16]
 8003636:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003646:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	9300      	str	r3, [sp, #0]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2200      	movs	r2, #0
 8003650:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003654:	68f8      	ldr	r0, [r7, #12]
 8003656:	f000 f8c7 	bl	80037e8 <I2C_WaitOnFlagUntilTimeout>
 800365a:	4603      	mov	r3, r0
 800365c:	2b00      	cmp	r3, #0
 800365e:	d00d      	beq.n	800367c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800366a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800366e:	d103      	bne.n	8003678 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003676:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003678:	2303      	movs	r3, #3
 800367a:	e017      	b.n	80036ac <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800367c:	897b      	ldrh	r3, [r7, #10]
 800367e:	11db      	asrs	r3, r3, #7
 8003680:	b2db      	uxtb	r3, r3
 8003682:	f003 0306 	and.w	r3, r3, #6
 8003686:	b2db      	uxtb	r3, r3
 8003688:	f063 030e 	orn	r3, r3, #14
 800368c:	b2da      	uxtb	r2, r3
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	687a      	ldr	r2, [r7, #4]
 8003698:	4907      	ldr	r1, [pc, #28]	; (80036b8 <I2C_MasterRequestRead+0x198>)
 800369a:	68f8      	ldr	r0, [r7, #12]
 800369c:	f000 f8fb 	bl	8003896 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80036a0:	4603      	mov	r3, r0
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d001      	beq.n	80036aa <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e000      	b.n	80036ac <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80036aa:	2300      	movs	r3, #0
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3718      	adds	r7, #24
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}
 80036b4:	00010008 	.word	0x00010008
 80036b8:	00010002 	.word	0x00010002

080036bc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b088      	sub	sp, #32
 80036c0:	af02      	add	r7, sp, #8
 80036c2:	60f8      	str	r0, [r7, #12]
 80036c4:	4608      	mov	r0, r1
 80036c6:	4611      	mov	r1, r2
 80036c8:	461a      	mov	r2, r3
 80036ca:	4603      	mov	r3, r0
 80036cc:	817b      	strh	r3, [r7, #10]
 80036ce:	460b      	mov	r3, r1
 80036d0:	813b      	strh	r3, [r7, #8]
 80036d2:	4613      	mov	r3, r2
 80036d4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036e4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80036e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e8:	9300      	str	r3, [sp, #0]
 80036ea:	6a3b      	ldr	r3, [r7, #32]
 80036ec:	2200      	movs	r2, #0
 80036ee:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80036f2:	68f8      	ldr	r0, [r7, #12]
 80036f4:	f000 f878 	bl	80037e8 <I2C_WaitOnFlagUntilTimeout>
 80036f8:	4603      	mov	r3, r0
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d00d      	beq.n	800371a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003708:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800370c:	d103      	bne.n	8003716 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003714:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003716:	2303      	movs	r3, #3
 8003718:	e05f      	b.n	80037da <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800371a:	897b      	ldrh	r3, [r7, #10]
 800371c:	b2db      	uxtb	r3, r3
 800371e:	461a      	mov	r2, r3
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003728:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800372a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800372c:	6a3a      	ldr	r2, [r7, #32]
 800372e:	492d      	ldr	r1, [pc, #180]	; (80037e4 <I2C_RequestMemoryWrite+0x128>)
 8003730:	68f8      	ldr	r0, [r7, #12]
 8003732:	f000 f8b0 	bl	8003896 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003736:	4603      	mov	r3, r0
 8003738:	2b00      	cmp	r3, #0
 800373a:	d001      	beq.n	8003740 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	e04c      	b.n	80037da <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003740:	2300      	movs	r3, #0
 8003742:	617b      	str	r3, [r7, #20]
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	695b      	ldr	r3, [r3, #20]
 800374a:	617b      	str	r3, [r7, #20]
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	699b      	ldr	r3, [r3, #24]
 8003752:	617b      	str	r3, [r7, #20]
 8003754:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003756:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003758:	6a39      	ldr	r1, [r7, #32]
 800375a:	68f8      	ldr	r0, [r7, #12]
 800375c:	f000 f91a 	bl	8003994 <I2C_WaitOnTXEFlagUntilTimeout>
 8003760:	4603      	mov	r3, r0
 8003762:	2b00      	cmp	r3, #0
 8003764:	d00d      	beq.n	8003782 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376a:	2b04      	cmp	r3, #4
 800376c:	d107      	bne.n	800377e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800377c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e02b      	b.n	80037da <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003782:	88fb      	ldrh	r3, [r7, #6]
 8003784:	2b01      	cmp	r3, #1
 8003786:	d105      	bne.n	8003794 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003788:	893b      	ldrh	r3, [r7, #8]
 800378a:	b2da      	uxtb	r2, r3
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	611a      	str	r2, [r3, #16]
 8003792:	e021      	b.n	80037d8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003794:	893b      	ldrh	r3, [r7, #8]
 8003796:	0a1b      	lsrs	r3, r3, #8
 8003798:	b29b      	uxth	r3, r3
 800379a:	b2da      	uxtb	r2, r3
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80037a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037a4:	6a39      	ldr	r1, [r7, #32]
 80037a6:	68f8      	ldr	r0, [r7, #12]
 80037a8:	f000 f8f4 	bl	8003994 <I2C_WaitOnTXEFlagUntilTimeout>
 80037ac:	4603      	mov	r3, r0
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d00d      	beq.n	80037ce <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b6:	2b04      	cmp	r3, #4
 80037b8:	d107      	bne.n	80037ca <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037c8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e005      	b.n	80037da <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80037ce:	893b      	ldrh	r3, [r7, #8]
 80037d0:	b2da      	uxtb	r2, r3
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80037d8:	2300      	movs	r3, #0
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3718      	adds	r7, #24
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}
 80037e2:	bf00      	nop
 80037e4:	00010002 	.word	0x00010002

080037e8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b084      	sub	sp, #16
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	60f8      	str	r0, [r7, #12]
 80037f0:	60b9      	str	r1, [r7, #8]
 80037f2:	603b      	str	r3, [r7, #0]
 80037f4:	4613      	mov	r3, r2
 80037f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80037f8:	e025      	b.n	8003846 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003800:	d021      	beq.n	8003846 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003802:	f7fe fd39 	bl	8002278 <HAL_GetTick>
 8003806:	4602      	mov	r2, r0
 8003808:	69bb      	ldr	r3, [r7, #24]
 800380a:	1ad3      	subs	r3, r2, r3
 800380c:	683a      	ldr	r2, [r7, #0]
 800380e:	429a      	cmp	r2, r3
 8003810:	d302      	bcc.n	8003818 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d116      	bne.n	8003846 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2200      	movs	r2, #0
 800381c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2220      	movs	r2, #32
 8003822:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2200      	movs	r2, #0
 800382a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003832:	f043 0220 	orr.w	r2, r3, #32
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2200      	movs	r2, #0
 800383e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e023      	b.n	800388e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	0c1b      	lsrs	r3, r3, #16
 800384a:	b2db      	uxtb	r3, r3
 800384c:	2b01      	cmp	r3, #1
 800384e:	d10d      	bne.n	800386c <I2C_WaitOnFlagUntilTimeout+0x84>
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	695b      	ldr	r3, [r3, #20]
 8003856:	43da      	mvns	r2, r3
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	4013      	ands	r3, r2
 800385c:	b29b      	uxth	r3, r3
 800385e:	2b00      	cmp	r3, #0
 8003860:	bf0c      	ite	eq
 8003862:	2301      	moveq	r3, #1
 8003864:	2300      	movne	r3, #0
 8003866:	b2db      	uxtb	r3, r3
 8003868:	461a      	mov	r2, r3
 800386a:	e00c      	b.n	8003886 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	699b      	ldr	r3, [r3, #24]
 8003872:	43da      	mvns	r2, r3
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	4013      	ands	r3, r2
 8003878:	b29b      	uxth	r3, r3
 800387a:	2b00      	cmp	r3, #0
 800387c:	bf0c      	ite	eq
 800387e:	2301      	moveq	r3, #1
 8003880:	2300      	movne	r3, #0
 8003882:	b2db      	uxtb	r3, r3
 8003884:	461a      	mov	r2, r3
 8003886:	79fb      	ldrb	r3, [r7, #7]
 8003888:	429a      	cmp	r2, r3
 800388a:	d0b6      	beq.n	80037fa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800388c:	2300      	movs	r3, #0
}
 800388e:	4618      	mov	r0, r3
 8003890:	3710      	adds	r7, #16
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}

08003896 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003896:	b580      	push	{r7, lr}
 8003898:	b084      	sub	sp, #16
 800389a:	af00      	add	r7, sp, #0
 800389c:	60f8      	str	r0, [r7, #12]
 800389e:	60b9      	str	r1, [r7, #8]
 80038a0:	607a      	str	r2, [r7, #4]
 80038a2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80038a4:	e051      	b.n	800394a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	695b      	ldr	r3, [r3, #20]
 80038ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038b4:	d123      	bne.n	80038fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038c4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80038ce:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2200      	movs	r2, #0
 80038d4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2220      	movs	r2, #32
 80038da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2200      	movs	r2, #0
 80038e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ea:	f043 0204 	orr.w	r2, r3, #4
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2200      	movs	r2, #0
 80038f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	e046      	b.n	800398c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003904:	d021      	beq.n	800394a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003906:	f7fe fcb7 	bl	8002278 <HAL_GetTick>
 800390a:	4602      	mov	r2, r0
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	1ad3      	subs	r3, r2, r3
 8003910:	687a      	ldr	r2, [r7, #4]
 8003912:	429a      	cmp	r2, r3
 8003914:	d302      	bcc.n	800391c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d116      	bne.n	800394a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2200      	movs	r2, #0
 8003920:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2220      	movs	r2, #32
 8003926:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2200      	movs	r2, #0
 800392e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003936:	f043 0220 	orr.w	r2, r3, #32
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	2200      	movs	r2, #0
 8003942:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	e020      	b.n	800398c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	0c1b      	lsrs	r3, r3, #16
 800394e:	b2db      	uxtb	r3, r3
 8003950:	2b01      	cmp	r3, #1
 8003952:	d10c      	bne.n	800396e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	695b      	ldr	r3, [r3, #20]
 800395a:	43da      	mvns	r2, r3
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	4013      	ands	r3, r2
 8003960:	b29b      	uxth	r3, r3
 8003962:	2b00      	cmp	r3, #0
 8003964:	bf14      	ite	ne
 8003966:	2301      	movne	r3, #1
 8003968:	2300      	moveq	r3, #0
 800396a:	b2db      	uxtb	r3, r3
 800396c:	e00b      	b.n	8003986 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	699b      	ldr	r3, [r3, #24]
 8003974:	43da      	mvns	r2, r3
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	4013      	ands	r3, r2
 800397a:	b29b      	uxth	r3, r3
 800397c:	2b00      	cmp	r3, #0
 800397e:	bf14      	ite	ne
 8003980:	2301      	movne	r3, #1
 8003982:	2300      	moveq	r3, #0
 8003984:	b2db      	uxtb	r3, r3
 8003986:	2b00      	cmp	r3, #0
 8003988:	d18d      	bne.n	80038a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800398a:	2300      	movs	r3, #0
}
 800398c:	4618      	mov	r0, r3
 800398e:	3710      	adds	r7, #16
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}

08003994 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b084      	sub	sp, #16
 8003998:	af00      	add	r7, sp, #0
 800399a:	60f8      	str	r0, [r7, #12]
 800399c:	60b9      	str	r1, [r7, #8]
 800399e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80039a0:	e02d      	b.n	80039fe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80039a2:	68f8      	ldr	r0, [r7, #12]
 80039a4:	f000 f8ce 	bl	8003b44 <I2C_IsAcknowledgeFailed>
 80039a8:	4603      	mov	r3, r0
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d001      	beq.n	80039b2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e02d      	b.n	8003a0e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039b8:	d021      	beq.n	80039fe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039ba:	f7fe fc5d 	bl	8002278 <HAL_GetTick>
 80039be:	4602      	mov	r2, r0
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	1ad3      	subs	r3, r2, r3
 80039c4:	68ba      	ldr	r2, [r7, #8]
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d302      	bcc.n	80039d0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d116      	bne.n	80039fe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2200      	movs	r2, #0
 80039d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2220      	movs	r2, #32
 80039da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2200      	movs	r2, #0
 80039e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ea:	f043 0220 	orr.w	r2, r3, #32
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2200      	movs	r2, #0
 80039f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	e007      	b.n	8003a0e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	695b      	ldr	r3, [r3, #20]
 8003a04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a08:	2b80      	cmp	r3, #128	; 0x80
 8003a0a:	d1ca      	bne.n	80039a2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003a0c:	2300      	movs	r3, #0
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3710      	adds	r7, #16
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}

08003a16 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a16:	b580      	push	{r7, lr}
 8003a18:	b084      	sub	sp, #16
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	60f8      	str	r0, [r7, #12]
 8003a1e:	60b9      	str	r1, [r7, #8]
 8003a20:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003a22:	e02d      	b.n	8003a80 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003a24:	68f8      	ldr	r0, [r7, #12]
 8003a26:	f000 f88d 	bl	8003b44 <I2C_IsAcknowledgeFailed>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d001      	beq.n	8003a34 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	e02d      	b.n	8003a90 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a3a:	d021      	beq.n	8003a80 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a3c:	f7fe fc1c 	bl	8002278 <HAL_GetTick>
 8003a40:	4602      	mov	r2, r0
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	68ba      	ldr	r2, [r7, #8]
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d302      	bcc.n	8003a52 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d116      	bne.n	8003a80 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2200      	movs	r2, #0
 8003a56:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2220      	movs	r2, #32
 8003a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2200      	movs	r2, #0
 8003a64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a6c:	f043 0220 	orr.w	r2, r3, #32
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2200      	movs	r2, #0
 8003a78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e007      	b.n	8003a90 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	695b      	ldr	r3, [r3, #20]
 8003a86:	f003 0304 	and.w	r3, r3, #4
 8003a8a:	2b04      	cmp	r3, #4
 8003a8c:	d1ca      	bne.n	8003a24 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003a8e:	2300      	movs	r3, #0
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3710      	adds	r7, #16
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}

08003a98 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b084      	sub	sp, #16
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	60f8      	str	r0, [r7, #12]
 8003aa0:	60b9      	str	r1, [r7, #8]
 8003aa2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003aa4:	e042      	b.n	8003b2c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	695b      	ldr	r3, [r3, #20]
 8003aac:	f003 0310 	and.w	r3, r3, #16
 8003ab0:	2b10      	cmp	r3, #16
 8003ab2:	d119      	bne.n	8003ae8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f06f 0210 	mvn.w	r2, #16
 8003abc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2220      	movs	r2, #32
 8003ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	e029      	b.n	8003b3c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ae8:	f7fe fbc6 	bl	8002278 <HAL_GetTick>
 8003aec:	4602      	mov	r2, r0
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	1ad3      	subs	r3, r2, r3
 8003af2:	68ba      	ldr	r2, [r7, #8]
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d302      	bcc.n	8003afe <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d116      	bne.n	8003b2c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2200      	movs	r2, #0
 8003b02:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2220      	movs	r2, #32
 8003b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b18:	f043 0220 	orr.w	r2, r3, #32
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2200      	movs	r2, #0
 8003b24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e007      	b.n	8003b3c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	695b      	ldr	r3, [r3, #20]
 8003b32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b36:	2b40      	cmp	r3, #64	; 0x40
 8003b38:	d1b5      	bne.n	8003aa6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003b3a:	2300      	movs	r3, #0
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	3710      	adds	r7, #16
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}

08003b44 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b083      	sub	sp, #12
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	695b      	ldr	r3, [r3, #20]
 8003b52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b5a:	d11b      	bne.n	8003b94 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003b64:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2220      	movs	r2, #32
 8003b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2200      	movs	r2, #0
 8003b78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b80:	f043 0204 	orr.w	r2, r3, #4
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	e000      	b.n	8003b96 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003b94:	2300      	movs	r3, #0
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	370c      	adds	r7, #12
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba0:	4770      	bx	lr
	...

08003ba4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b086      	sub	sp, #24
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d101      	bne.n	8003bb6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e264      	b.n	8004080 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f003 0301 	and.w	r3, r3, #1
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d075      	beq.n	8003cae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003bc2:	4ba3      	ldr	r3, [pc, #652]	; (8003e50 <HAL_RCC_OscConfig+0x2ac>)
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	f003 030c 	and.w	r3, r3, #12
 8003bca:	2b04      	cmp	r3, #4
 8003bcc:	d00c      	beq.n	8003be8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bce:	4ba0      	ldr	r3, [pc, #640]	; (8003e50 <HAL_RCC_OscConfig+0x2ac>)
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003bd6:	2b08      	cmp	r3, #8
 8003bd8:	d112      	bne.n	8003c00 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bda:	4b9d      	ldr	r3, [pc, #628]	; (8003e50 <HAL_RCC_OscConfig+0x2ac>)
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003be2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003be6:	d10b      	bne.n	8003c00 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003be8:	4b99      	ldr	r3, [pc, #612]	; (8003e50 <HAL_RCC_OscConfig+0x2ac>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d05b      	beq.n	8003cac <HAL_RCC_OscConfig+0x108>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d157      	bne.n	8003cac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	e23f      	b.n	8004080 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c08:	d106      	bne.n	8003c18 <HAL_RCC_OscConfig+0x74>
 8003c0a:	4b91      	ldr	r3, [pc, #580]	; (8003e50 <HAL_RCC_OscConfig+0x2ac>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a90      	ldr	r2, [pc, #576]	; (8003e50 <HAL_RCC_OscConfig+0x2ac>)
 8003c10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c14:	6013      	str	r3, [r2, #0]
 8003c16:	e01d      	b.n	8003c54 <HAL_RCC_OscConfig+0xb0>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c20:	d10c      	bne.n	8003c3c <HAL_RCC_OscConfig+0x98>
 8003c22:	4b8b      	ldr	r3, [pc, #556]	; (8003e50 <HAL_RCC_OscConfig+0x2ac>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a8a      	ldr	r2, [pc, #552]	; (8003e50 <HAL_RCC_OscConfig+0x2ac>)
 8003c28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c2c:	6013      	str	r3, [r2, #0]
 8003c2e:	4b88      	ldr	r3, [pc, #544]	; (8003e50 <HAL_RCC_OscConfig+0x2ac>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a87      	ldr	r2, [pc, #540]	; (8003e50 <HAL_RCC_OscConfig+0x2ac>)
 8003c34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c38:	6013      	str	r3, [r2, #0]
 8003c3a:	e00b      	b.n	8003c54 <HAL_RCC_OscConfig+0xb0>
 8003c3c:	4b84      	ldr	r3, [pc, #528]	; (8003e50 <HAL_RCC_OscConfig+0x2ac>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a83      	ldr	r2, [pc, #524]	; (8003e50 <HAL_RCC_OscConfig+0x2ac>)
 8003c42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c46:	6013      	str	r3, [r2, #0]
 8003c48:	4b81      	ldr	r3, [pc, #516]	; (8003e50 <HAL_RCC_OscConfig+0x2ac>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a80      	ldr	r2, [pc, #512]	; (8003e50 <HAL_RCC_OscConfig+0x2ac>)
 8003c4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d013      	beq.n	8003c84 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c5c:	f7fe fb0c 	bl	8002278 <HAL_GetTick>
 8003c60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c62:	e008      	b.n	8003c76 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c64:	f7fe fb08 	bl	8002278 <HAL_GetTick>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	1ad3      	subs	r3, r2, r3
 8003c6e:	2b64      	cmp	r3, #100	; 0x64
 8003c70:	d901      	bls.n	8003c76 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003c72:	2303      	movs	r3, #3
 8003c74:	e204      	b.n	8004080 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c76:	4b76      	ldr	r3, [pc, #472]	; (8003e50 <HAL_RCC_OscConfig+0x2ac>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d0f0      	beq.n	8003c64 <HAL_RCC_OscConfig+0xc0>
 8003c82:	e014      	b.n	8003cae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c84:	f7fe faf8 	bl	8002278 <HAL_GetTick>
 8003c88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c8a:	e008      	b.n	8003c9e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c8c:	f7fe faf4 	bl	8002278 <HAL_GetTick>
 8003c90:	4602      	mov	r2, r0
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	1ad3      	subs	r3, r2, r3
 8003c96:	2b64      	cmp	r3, #100	; 0x64
 8003c98:	d901      	bls.n	8003c9e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c9a:	2303      	movs	r3, #3
 8003c9c:	e1f0      	b.n	8004080 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c9e:	4b6c      	ldr	r3, [pc, #432]	; (8003e50 <HAL_RCC_OscConfig+0x2ac>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d1f0      	bne.n	8003c8c <HAL_RCC_OscConfig+0xe8>
 8003caa:	e000      	b.n	8003cae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f003 0302 	and.w	r3, r3, #2
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d063      	beq.n	8003d82 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003cba:	4b65      	ldr	r3, [pc, #404]	; (8003e50 <HAL_RCC_OscConfig+0x2ac>)
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	f003 030c 	and.w	r3, r3, #12
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d00b      	beq.n	8003cde <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cc6:	4b62      	ldr	r3, [pc, #392]	; (8003e50 <HAL_RCC_OscConfig+0x2ac>)
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003cce:	2b08      	cmp	r3, #8
 8003cd0:	d11c      	bne.n	8003d0c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cd2:	4b5f      	ldr	r3, [pc, #380]	; (8003e50 <HAL_RCC_OscConfig+0x2ac>)
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d116      	bne.n	8003d0c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cde:	4b5c      	ldr	r3, [pc, #368]	; (8003e50 <HAL_RCC_OscConfig+0x2ac>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f003 0302 	and.w	r3, r3, #2
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d005      	beq.n	8003cf6 <HAL_RCC_OscConfig+0x152>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	68db      	ldr	r3, [r3, #12]
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	d001      	beq.n	8003cf6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e1c4      	b.n	8004080 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cf6:	4b56      	ldr	r3, [pc, #344]	; (8003e50 <HAL_RCC_OscConfig+0x2ac>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	691b      	ldr	r3, [r3, #16]
 8003d02:	00db      	lsls	r3, r3, #3
 8003d04:	4952      	ldr	r1, [pc, #328]	; (8003e50 <HAL_RCC_OscConfig+0x2ac>)
 8003d06:	4313      	orrs	r3, r2
 8003d08:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d0a:	e03a      	b.n	8003d82 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	68db      	ldr	r3, [r3, #12]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d020      	beq.n	8003d56 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d14:	4b4f      	ldr	r3, [pc, #316]	; (8003e54 <HAL_RCC_OscConfig+0x2b0>)
 8003d16:	2201      	movs	r2, #1
 8003d18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d1a:	f7fe faad 	bl	8002278 <HAL_GetTick>
 8003d1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d20:	e008      	b.n	8003d34 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d22:	f7fe faa9 	bl	8002278 <HAL_GetTick>
 8003d26:	4602      	mov	r2, r0
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	1ad3      	subs	r3, r2, r3
 8003d2c:	2b02      	cmp	r3, #2
 8003d2e:	d901      	bls.n	8003d34 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003d30:	2303      	movs	r3, #3
 8003d32:	e1a5      	b.n	8004080 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d34:	4b46      	ldr	r3, [pc, #280]	; (8003e50 <HAL_RCC_OscConfig+0x2ac>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f003 0302 	and.w	r3, r3, #2
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d0f0      	beq.n	8003d22 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d40:	4b43      	ldr	r3, [pc, #268]	; (8003e50 <HAL_RCC_OscConfig+0x2ac>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	691b      	ldr	r3, [r3, #16]
 8003d4c:	00db      	lsls	r3, r3, #3
 8003d4e:	4940      	ldr	r1, [pc, #256]	; (8003e50 <HAL_RCC_OscConfig+0x2ac>)
 8003d50:	4313      	orrs	r3, r2
 8003d52:	600b      	str	r3, [r1, #0]
 8003d54:	e015      	b.n	8003d82 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d56:	4b3f      	ldr	r3, [pc, #252]	; (8003e54 <HAL_RCC_OscConfig+0x2b0>)
 8003d58:	2200      	movs	r2, #0
 8003d5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d5c:	f7fe fa8c 	bl	8002278 <HAL_GetTick>
 8003d60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d62:	e008      	b.n	8003d76 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d64:	f7fe fa88 	bl	8002278 <HAL_GetTick>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	1ad3      	subs	r3, r2, r3
 8003d6e:	2b02      	cmp	r3, #2
 8003d70:	d901      	bls.n	8003d76 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003d72:	2303      	movs	r3, #3
 8003d74:	e184      	b.n	8004080 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d76:	4b36      	ldr	r3, [pc, #216]	; (8003e50 <HAL_RCC_OscConfig+0x2ac>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f003 0302 	and.w	r3, r3, #2
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d1f0      	bne.n	8003d64 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 0308 	and.w	r3, r3, #8
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d030      	beq.n	8003df0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	695b      	ldr	r3, [r3, #20]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d016      	beq.n	8003dc4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d96:	4b30      	ldr	r3, [pc, #192]	; (8003e58 <HAL_RCC_OscConfig+0x2b4>)
 8003d98:	2201      	movs	r2, #1
 8003d9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d9c:	f7fe fa6c 	bl	8002278 <HAL_GetTick>
 8003da0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003da2:	e008      	b.n	8003db6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003da4:	f7fe fa68 	bl	8002278 <HAL_GetTick>
 8003da8:	4602      	mov	r2, r0
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	1ad3      	subs	r3, r2, r3
 8003dae:	2b02      	cmp	r3, #2
 8003db0:	d901      	bls.n	8003db6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003db2:	2303      	movs	r3, #3
 8003db4:	e164      	b.n	8004080 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003db6:	4b26      	ldr	r3, [pc, #152]	; (8003e50 <HAL_RCC_OscConfig+0x2ac>)
 8003db8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dba:	f003 0302 	and.w	r3, r3, #2
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d0f0      	beq.n	8003da4 <HAL_RCC_OscConfig+0x200>
 8003dc2:	e015      	b.n	8003df0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003dc4:	4b24      	ldr	r3, [pc, #144]	; (8003e58 <HAL_RCC_OscConfig+0x2b4>)
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dca:	f7fe fa55 	bl	8002278 <HAL_GetTick>
 8003dce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dd0:	e008      	b.n	8003de4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003dd2:	f7fe fa51 	bl	8002278 <HAL_GetTick>
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	1ad3      	subs	r3, r2, r3
 8003ddc:	2b02      	cmp	r3, #2
 8003dde:	d901      	bls.n	8003de4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003de0:	2303      	movs	r3, #3
 8003de2:	e14d      	b.n	8004080 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003de4:	4b1a      	ldr	r3, [pc, #104]	; (8003e50 <HAL_RCC_OscConfig+0x2ac>)
 8003de6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003de8:	f003 0302 	and.w	r3, r3, #2
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d1f0      	bne.n	8003dd2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f003 0304 	and.w	r3, r3, #4
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	f000 80a0 	beq.w	8003f3e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e02:	4b13      	ldr	r3, [pc, #76]	; (8003e50 <HAL_RCC_OscConfig+0x2ac>)
 8003e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d10f      	bne.n	8003e2e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e0e:	2300      	movs	r3, #0
 8003e10:	60bb      	str	r3, [r7, #8]
 8003e12:	4b0f      	ldr	r3, [pc, #60]	; (8003e50 <HAL_RCC_OscConfig+0x2ac>)
 8003e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e16:	4a0e      	ldr	r2, [pc, #56]	; (8003e50 <HAL_RCC_OscConfig+0x2ac>)
 8003e18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e1c:	6413      	str	r3, [r2, #64]	; 0x40
 8003e1e:	4b0c      	ldr	r3, [pc, #48]	; (8003e50 <HAL_RCC_OscConfig+0x2ac>)
 8003e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e26:	60bb      	str	r3, [r7, #8]
 8003e28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e2e:	4b0b      	ldr	r3, [pc, #44]	; (8003e5c <HAL_RCC_OscConfig+0x2b8>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d121      	bne.n	8003e7e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e3a:	4b08      	ldr	r3, [pc, #32]	; (8003e5c <HAL_RCC_OscConfig+0x2b8>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a07      	ldr	r2, [pc, #28]	; (8003e5c <HAL_RCC_OscConfig+0x2b8>)
 8003e40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e46:	f7fe fa17 	bl	8002278 <HAL_GetTick>
 8003e4a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e4c:	e011      	b.n	8003e72 <HAL_RCC_OscConfig+0x2ce>
 8003e4e:	bf00      	nop
 8003e50:	40023800 	.word	0x40023800
 8003e54:	42470000 	.word	0x42470000
 8003e58:	42470e80 	.word	0x42470e80
 8003e5c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e60:	f7fe fa0a 	bl	8002278 <HAL_GetTick>
 8003e64:	4602      	mov	r2, r0
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	1ad3      	subs	r3, r2, r3
 8003e6a:	2b02      	cmp	r3, #2
 8003e6c:	d901      	bls.n	8003e72 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003e6e:	2303      	movs	r3, #3
 8003e70:	e106      	b.n	8004080 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e72:	4b85      	ldr	r3, [pc, #532]	; (8004088 <HAL_RCC_OscConfig+0x4e4>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d0f0      	beq.n	8003e60 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	2b01      	cmp	r3, #1
 8003e84:	d106      	bne.n	8003e94 <HAL_RCC_OscConfig+0x2f0>
 8003e86:	4b81      	ldr	r3, [pc, #516]	; (800408c <HAL_RCC_OscConfig+0x4e8>)
 8003e88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e8a:	4a80      	ldr	r2, [pc, #512]	; (800408c <HAL_RCC_OscConfig+0x4e8>)
 8003e8c:	f043 0301 	orr.w	r3, r3, #1
 8003e90:	6713      	str	r3, [r2, #112]	; 0x70
 8003e92:	e01c      	b.n	8003ece <HAL_RCC_OscConfig+0x32a>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	2b05      	cmp	r3, #5
 8003e9a:	d10c      	bne.n	8003eb6 <HAL_RCC_OscConfig+0x312>
 8003e9c:	4b7b      	ldr	r3, [pc, #492]	; (800408c <HAL_RCC_OscConfig+0x4e8>)
 8003e9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ea0:	4a7a      	ldr	r2, [pc, #488]	; (800408c <HAL_RCC_OscConfig+0x4e8>)
 8003ea2:	f043 0304 	orr.w	r3, r3, #4
 8003ea6:	6713      	str	r3, [r2, #112]	; 0x70
 8003ea8:	4b78      	ldr	r3, [pc, #480]	; (800408c <HAL_RCC_OscConfig+0x4e8>)
 8003eaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eac:	4a77      	ldr	r2, [pc, #476]	; (800408c <HAL_RCC_OscConfig+0x4e8>)
 8003eae:	f043 0301 	orr.w	r3, r3, #1
 8003eb2:	6713      	str	r3, [r2, #112]	; 0x70
 8003eb4:	e00b      	b.n	8003ece <HAL_RCC_OscConfig+0x32a>
 8003eb6:	4b75      	ldr	r3, [pc, #468]	; (800408c <HAL_RCC_OscConfig+0x4e8>)
 8003eb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eba:	4a74      	ldr	r2, [pc, #464]	; (800408c <HAL_RCC_OscConfig+0x4e8>)
 8003ebc:	f023 0301 	bic.w	r3, r3, #1
 8003ec0:	6713      	str	r3, [r2, #112]	; 0x70
 8003ec2:	4b72      	ldr	r3, [pc, #456]	; (800408c <HAL_RCC_OscConfig+0x4e8>)
 8003ec4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ec6:	4a71      	ldr	r2, [pc, #452]	; (800408c <HAL_RCC_OscConfig+0x4e8>)
 8003ec8:	f023 0304 	bic.w	r3, r3, #4
 8003ecc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d015      	beq.n	8003f02 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ed6:	f7fe f9cf 	bl	8002278 <HAL_GetTick>
 8003eda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003edc:	e00a      	b.n	8003ef4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ede:	f7fe f9cb 	bl	8002278 <HAL_GetTick>
 8003ee2:	4602      	mov	r2, r0
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	1ad3      	subs	r3, r2, r3
 8003ee8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d901      	bls.n	8003ef4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003ef0:	2303      	movs	r3, #3
 8003ef2:	e0c5      	b.n	8004080 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ef4:	4b65      	ldr	r3, [pc, #404]	; (800408c <HAL_RCC_OscConfig+0x4e8>)
 8003ef6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ef8:	f003 0302 	and.w	r3, r3, #2
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d0ee      	beq.n	8003ede <HAL_RCC_OscConfig+0x33a>
 8003f00:	e014      	b.n	8003f2c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f02:	f7fe f9b9 	bl	8002278 <HAL_GetTick>
 8003f06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f08:	e00a      	b.n	8003f20 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f0a:	f7fe f9b5 	bl	8002278 <HAL_GetTick>
 8003f0e:	4602      	mov	r2, r0
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	1ad3      	subs	r3, r2, r3
 8003f14:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d901      	bls.n	8003f20 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003f1c:	2303      	movs	r3, #3
 8003f1e:	e0af      	b.n	8004080 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f20:	4b5a      	ldr	r3, [pc, #360]	; (800408c <HAL_RCC_OscConfig+0x4e8>)
 8003f22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f24:	f003 0302 	and.w	r3, r3, #2
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d1ee      	bne.n	8003f0a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f2c:	7dfb      	ldrb	r3, [r7, #23]
 8003f2e:	2b01      	cmp	r3, #1
 8003f30:	d105      	bne.n	8003f3e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f32:	4b56      	ldr	r3, [pc, #344]	; (800408c <HAL_RCC_OscConfig+0x4e8>)
 8003f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f36:	4a55      	ldr	r2, [pc, #340]	; (800408c <HAL_RCC_OscConfig+0x4e8>)
 8003f38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f3c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	699b      	ldr	r3, [r3, #24]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	f000 809b 	beq.w	800407e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f48:	4b50      	ldr	r3, [pc, #320]	; (800408c <HAL_RCC_OscConfig+0x4e8>)
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	f003 030c 	and.w	r3, r3, #12
 8003f50:	2b08      	cmp	r3, #8
 8003f52:	d05c      	beq.n	800400e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	699b      	ldr	r3, [r3, #24]
 8003f58:	2b02      	cmp	r3, #2
 8003f5a:	d141      	bne.n	8003fe0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f5c:	4b4c      	ldr	r3, [pc, #304]	; (8004090 <HAL_RCC_OscConfig+0x4ec>)
 8003f5e:	2200      	movs	r2, #0
 8003f60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f62:	f7fe f989 	bl	8002278 <HAL_GetTick>
 8003f66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f68:	e008      	b.n	8003f7c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f6a:	f7fe f985 	bl	8002278 <HAL_GetTick>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	1ad3      	subs	r3, r2, r3
 8003f74:	2b02      	cmp	r3, #2
 8003f76:	d901      	bls.n	8003f7c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003f78:	2303      	movs	r3, #3
 8003f7a:	e081      	b.n	8004080 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f7c:	4b43      	ldr	r3, [pc, #268]	; (800408c <HAL_RCC_OscConfig+0x4e8>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d1f0      	bne.n	8003f6a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	69da      	ldr	r2, [r3, #28]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6a1b      	ldr	r3, [r3, #32]
 8003f90:	431a      	orrs	r2, r3
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f96:	019b      	lsls	r3, r3, #6
 8003f98:	431a      	orrs	r2, r3
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f9e:	085b      	lsrs	r3, r3, #1
 8003fa0:	3b01      	subs	r3, #1
 8003fa2:	041b      	lsls	r3, r3, #16
 8003fa4:	431a      	orrs	r2, r3
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003faa:	061b      	lsls	r3, r3, #24
 8003fac:	4937      	ldr	r1, [pc, #220]	; (800408c <HAL_RCC_OscConfig+0x4e8>)
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fb2:	4b37      	ldr	r3, [pc, #220]	; (8004090 <HAL_RCC_OscConfig+0x4ec>)
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fb8:	f7fe f95e 	bl	8002278 <HAL_GetTick>
 8003fbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fbe:	e008      	b.n	8003fd2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fc0:	f7fe f95a 	bl	8002278 <HAL_GetTick>
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	1ad3      	subs	r3, r2, r3
 8003fca:	2b02      	cmp	r3, #2
 8003fcc:	d901      	bls.n	8003fd2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003fce:	2303      	movs	r3, #3
 8003fd0:	e056      	b.n	8004080 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fd2:	4b2e      	ldr	r3, [pc, #184]	; (800408c <HAL_RCC_OscConfig+0x4e8>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d0f0      	beq.n	8003fc0 <HAL_RCC_OscConfig+0x41c>
 8003fde:	e04e      	b.n	800407e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fe0:	4b2b      	ldr	r3, [pc, #172]	; (8004090 <HAL_RCC_OscConfig+0x4ec>)
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fe6:	f7fe f947 	bl	8002278 <HAL_GetTick>
 8003fea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fec:	e008      	b.n	8004000 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fee:	f7fe f943 	bl	8002278 <HAL_GetTick>
 8003ff2:	4602      	mov	r2, r0
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	1ad3      	subs	r3, r2, r3
 8003ff8:	2b02      	cmp	r3, #2
 8003ffa:	d901      	bls.n	8004000 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003ffc:	2303      	movs	r3, #3
 8003ffe:	e03f      	b.n	8004080 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004000:	4b22      	ldr	r3, [pc, #136]	; (800408c <HAL_RCC_OscConfig+0x4e8>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004008:	2b00      	cmp	r3, #0
 800400a:	d1f0      	bne.n	8003fee <HAL_RCC_OscConfig+0x44a>
 800400c:	e037      	b.n	800407e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	699b      	ldr	r3, [r3, #24]
 8004012:	2b01      	cmp	r3, #1
 8004014:	d101      	bne.n	800401a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	e032      	b.n	8004080 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800401a:	4b1c      	ldr	r3, [pc, #112]	; (800408c <HAL_RCC_OscConfig+0x4e8>)
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	699b      	ldr	r3, [r3, #24]
 8004024:	2b01      	cmp	r3, #1
 8004026:	d028      	beq.n	800407a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004032:	429a      	cmp	r2, r3
 8004034:	d121      	bne.n	800407a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004040:	429a      	cmp	r2, r3
 8004042:	d11a      	bne.n	800407a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004044:	68fa      	ldr	r2, [r7, #12]
 8004046:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800404a:	4013      	ands	r3, r2
 800404c:	687a      	ldr	r2, [r7, #4]
 800404e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004050:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004052:	4293      	cmp	r3, r2
 8004054:	d111      	bne.n	800407a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004060:	085b      	lsrs	r3, r3, #1
 8004062:	3b01      	subs	r3, #1
 8004064:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004066:	429a      	cmp	r2, r3
 8004068:	d107      	bne.n	800407a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004074:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004076:	429a      	cmp	r2, r3
 8004078:	d001      	beq.n	800407e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	e000      	b.n	8004080 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800407e:	2300      	movs	r3, #0
}
 8004080:	4618      	mov	r0, r3
 8004082:	3718      	adds	r7, #24
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}
 8004088:	40007000 	.word	0x40007000
 800408c:	40023800 	.word	0x40023800
 8004090:	42470060 	.word	0x42470060

08004094 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b084      	sub	sp, #16
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
 800409c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d101      	bne.n	80040a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040a4:	2301      	movs	r3, #1
 80040a6:	e0cc      	b.n	8004242 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040a8:	4b68      	ldr	r3, [pc, #416]	; (800424c <HAL_RCC_ClockConfig+0x1b8>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f003 0307 	and.w	r3, r3, #7
 80040b0:	683a      	ldr	r2, [r7, #0]
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d90c      	bls.n	80040d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040b6:	4b65      	ldr	r3, [pc, #404]	; (800424c <HAL_RCC_ClockConfig+0x1b8>)
 80040b8:	683a      	ldr	r2, [r7, #0]
 80040ba:	b2d2      	uxtb	r2, r2
 80040bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040be:	4b63      	ldr	r3, [pc, #396]	; (800424c <HAL_RCC_ClockConfig+0x1b8>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f003 0307 	and.w	r3, r3, #7
 80040c6:	683a      	ldr	r2, [r7, #0]
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d001      	beq.n	80040d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	e0b8      	b.n	8004242 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f003 0302 	and.w	r3, r3, #2
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d020      	beq.n	800411e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 0304 	and.w	r3, r3, #4
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d005      	beq.n	80040f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040e8:	4b59      	ldr	r3, [pc, #356]	; (8004250 <HAL_RCC_ClockConfig+0x1bc>)
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	4a58      	ldr	r2, [pc, #352]	; (8004250 <HAL_RCC_ClockConfig+0x1bc>)
 80040ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80040f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f003 0308 	and.w	r3, r3, #8
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d005      	beq.n	800410c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004100:	4b53      	ldr	r3, [pc, #332]	; (8004250 <HAL_RCC_ClockConfig+0x1bc>)
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	4a52      	ldr	r2, [pc, #328]	; (8004250 <HAL_RCC_ClockConfig+0x1bc>)
 8004106:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800410a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800410c:	4b50      	ldr	r3, [pc, #320]	; (8004250 <HAL_RCC_ClockConfig+0x1bc>)
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	494d      	ldr	r1, [pc, #308]	; (8004250 <HAL_RCC_ClockConfig+0x1bc>)
 800411a:	4313      	orrs	r3, r2
 800411c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 0301 	and.w	r3, r3, #1
 8004126:	2b00      	cmp	r3, #0
 8004128:	d044      	beq.n	80041b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	2b01      	cmp	r3, #1
 8004130:	d107      	bne.n	8004142 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004132:	4b47      	ldr	r3, [pc, #284]	; (8004250 <HAL_RCC_ClockConfig+0x1bc>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800413a:	2b00      	cmp	r3, #0
 800413c:	d119      	bne.n	8004172 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	e07f      	b.n	8004242 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	2b02      	cmp	r3, #2
 8004148:	d003      	beq.n	8004152 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800414e:	2b03      	cmp	r3, #3
 8004150:	d107      	bne.n	8004162 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004152:	4b3f      	ldr	r3, [pc, #252]	; (8004250 <HAL_RCC_ClockConfig+0x1bc>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800415a:	2b00      	cmp	r3, #0
 800415c:	d109      	bne.n	8004172 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	e06f      	b.n	8004242 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004162:	4b3b      	ldr	r3, [pc, #236]	; (8004250 <HAL_RCC_ClockConfig+0x1bc>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f003 0302 	and.w	r3, r3, #2
 800416a:	2b00      	cmp	r3, #0
 800416c:	d101      	bne.n	8004172 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	e067      	b.n	8004242 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004172:	4b37      	ldr	r3, [pc, #220]	; (8004250 <HAL_RCC_ClockConfig+0x1bc>)
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	f023 0203 	bic.w	r2, r3, #3
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	4934      	ldr	r1, [pc, #208]	; (8004250 <HAL_RCC_ClockConfig+0x1bc>)
 8004180:	4313      	orrs	r3, r2
 8004182:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004184:	f7fe f878 	bl	8002278 <HAL_GetTick>
 8004188:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800418a:	e00a      	b.n	80041a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800418c:	f7fe f874 	bl	8002278 <HAL_GetTick>
 8004190:	4602      	mov	r2, r0
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	1ad3      	subs	r3, r2, r3
 8004196:	f241 3288 	movw	r2, #5000	; 0x1388
 800419a:	4293      	cmp	r3, r2
 800419c:	d901      	bls.n	80041a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800419e:	2303      	movs	r3, #3
 80041a0:	e04f      	b.n	8004242 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041a2:	4b2b      	ldr	r3, [pc, #172]	; (8004250 <HAL_RCC_ClockConfig+0x1bc>)
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	f003 020c 	and.w	r2, r3, #12
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	009b      	lsls	r3, r3, #2
 80041b0:	429a      	cmp	r2, r3
 80041b2:	d1eb      	bne.n	800418c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80041b4:	4b25      	ldr	r3, [pc, #148]	; (800424c <HAL_RCC_ClockConfig+0x1b8>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f003 0307 	and.w	r3, r3, #7
 80041bc:	683a      	ldr	r2, [r7, #0]
 80041be:	429a      	cmp	r2, r3
 80041c0:	d20c      	bcs.n	80041dc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041c2:	4b22      	ldr	r3, [pc, #136]	; (800424c <HAL_RCC_ClockConfig+0x1b8>)
 80041c4:	683a      	ldr	r2, [r7, #0]
 80041c6:	b2d2      	uxtb	r2, r2
 80041c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041ca:	4b20      	ldr	r3, [pc, #128]	; (800424c <HAL_RCC_ClockConfig+0x1b8>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f003 0307 	and.w	r3, r3, #7
 80041d2:	683a      	ldr	r2, [r7, #0]
 80041d4:	429a      	cmp	r2, r3
 80041d6:	d001      	beq.n	80041dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80041d8:	2301      	movs	r3, #1
 80041da:	e032      	b.n	8004242 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f003 0304 	and.w	r3, r3, #4
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d008      	beq.n	80041fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041e8:	4b19      	ldr	r3, [pc, #100]	; (8004250 <HAL_RCC_ClockConfig+0x1bc>)
 80041ea:	689b      	ldr	r3, [r3, #8]
 80041ec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	68db      	ldr	r3, [r3, #12]
 80041f4:	4916      	ldr	r1, [pc, #88]	; (8004250 <HAL_RCC_ClockConfig+0x1bc>)
 80041f6:	4313      	orrs	r3, r2
 80041f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f003 0308 	and.w	r3, r3, #8
 8004202:	2b00      	cmp	r3, #0
 8004204:	d009      	beq.n	800421a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004206:	4b12      	ldr	r3, [pc, #72]	; (8004250 <HAL_RCC_ClockConfig+0x1bc>)
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	691b      	ldr	r3, [r3, #16]
 8004212:	00db      	lsls	r3, r3, #3
 8004214:	490e      	ldr	r1, [pc, #56]	; (8004250 <HAL_RCC_ClockConfig+0x1bc>)
 8004216:	4313      	orrs	r3, r2
 8004218:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800421a:	f000 f821 	bl	8004260 <HAL_RCC_GetSysClockFreq>
 800421e:	4602      	mov	r2, r0
 8004220:	4b0b      	ldr	r3, [pc, #44]	; (8004250 <HAL_RCC_ClockConfig+0x1bc>)
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	091b      	lsrs	r3, r3, #4
 8004226:	f003 030f 	and.w	r3, r3, #15
 800422a:	490a      	ldr	r1, [pc, #40]	; (8004254 <HAL_RCC_ClockConfig+0x1c0>)
 800422c:	5ccb      	ldrb	r3, [r1, r3]
 800422e:	fa22 f303 	lsr.w	r3, r2, r3
 8004232:	4a09      	ldr	r2, [pc, #36]	; (8004258 <HAL_RCC_ClockConfig+0x1c4>)
 8004234:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004236:	4b09      	ldr	r3, [pc, #36]	; (800425c <HAL_RCC_ClockConfig+0x1c8>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4618      	mov	r0, r3
 800423c:	f7fd ffd8 	bl	80021f0 <HAL_InitTick>

  return HAL_OK;
 8004240:	2300      	movs	r3, #0
}
 8004242:	4618      	mov	r0, r3
 8004244:	3710      	adds	r7, #16
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}
 800424a:	bf00      	nop
 800424c:	40023c00 	.word	0x40023c00
 8004250:	40023800 	.word	0x40023800
 8004254:	08007458 	.word	0x08007458
 8004258:	20000000 	.word	0x20000000
 800425c:	20000004 	.word	0x20000004

08004260 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004260:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004264:	b084      	sub	sp, #16
 8004266:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004268:	2300      	movs	r3, #0
 800426a:	607b      	str	r3, [r7, #4]
 800426c:	2300      	movs	r3, #0
 800426e:	60fb      	str	r3, [r7, #12]
 8004270:	2300      	movs	r3, #0
 8004272:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004274:	2300      	movs	r3, #0
 8004276:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004278:	4b67      	ldr	r3, [pc, #412]	; (8004418 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	f003 030c 	and.w	r3, r3, #12
 8004280:	2b08      	cmp	r3, #8
 8004282:	d00d      	beq.n	80042a0 <HAL_RCC_GetSysClockFreq+0x40>
 8004284:	2b08      	cmp	r3, #8
 8004286:	f200 80bd 	bhi.w	8004404 <HAL_RCC_GetSysClockFreq+0x1a4>
 800428a:	2b00      	cmp	r3, #0
 800428c:	d002      	beq.n	8004294 <HAL_RCC_GetSysClockFreq+0x34>
 800428e:	2b04      	cmp	r3, #4
 8004290:	d003      	beq.n	800429a <HAL_RCC_GetSysClockFreq+0x3a>
 8004292:	e0b7      	b.n	8004404 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004294:	4b61      	ldr	r3, [pc, #388]	; (800441c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004296:	60bb      	str	r3, [r7, #8]
       break;
 8004298:	e0b7      	b.n	800440a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800429a:	4b61      	ldr	r3, [pc, #388]	; (8004420 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800429c:	60bb      	str	r3, [r7, #8]
      break;
 800429e:	e0b4      	b.n	800440a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80042a0:	4b5d      	ldr	r3, [pc, #372]	; (8004418 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042a8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80042aa:	4b5b      	ldr	r3, [pc, #364]	; (8004418 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d04d      	beq.n	8004352 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042b6:	4b58      	ldr	r3, [pc, #352]	; (8004418 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	099b      	lsrs	r3, r3, #6
 80042bc:	461a      	mov	r2, r3
 80042be:	f04f 0300 	mov.w	r3, #0
 80042c2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80042c6:	f04f 0100 	mov.w	r1, #0
 80042ca:	ea02 0800 	and.w	r8, r2, r0
 80042ce:	ea03 0901 	and.w	r9, r3, r1
 80042d2:	4640      	mov	r0, r8
 80042d4:	4649      	mov	r1, r9
 80042d6:	f04f 0200 	mov.w	r2, #0
 80042da:	f04f 0300 	mov.w	r3, #0
 80042de:	014b      	lsls	r3, r1, #5
 80042e0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80042e4:	0142      	lsls	r2, r0, #5
 80042e6:	4610      	mov	r0, r2
 80042e8:	4619      	mov	r1, r3
 80042ea:	ebb0 0008 	subs.w	r0, r0, r8
 80042ee:	eb61 0109 	sbc.w	r1, r1, r9
 80042f2:	f04f 0200 	mov.w	r2, #0
 80042f6:	f04f 0300 	mov.w	r3, #0
 80042fa:	018b      	lsls	r3, r1, #6
 80042fc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004300:	0182      	lsls	r2, r0, #6
 8004302:	1a12      	subs	r2, r2, r0
 8004304:	eb63 0301 	sbc.w	r3, r3, r1
 8004308:	f04f 0000 	mov.w	r0, #0
 800430c:	f04f 0100 	mov.w	r1, #0
 8004310:	00d9      	lsls	r1, r3, #3
 8004312:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004316:	00d0      	lsls	r0, r2, #3
 8004318:	4602      	mov	r2, r0
 800431a:	460b      	mov	r3, r1
 800431c:	eb12 0208 	adds.w	r2, r2, r8
 8004320:	eb43 0309 	adc.w	r3, r3, r9
 8004324:	f04f 0000 	mov.w	r0, #0
 8004328:	f04f 0100 	mov.w	r1, #0
 800432c:	0259      	lsls	r1, r3, #9
 800432e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004332:	0250      	lsls	r0, r2, #9
 8004334:	4602      	mov	r2, r0
 8004336:	460b      	mov	r3, r1
 8004338:	4610      	mov	r0, r2
 800433a:	4619      	mov	r1, r3
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	461a      	mov	r2, r3
 8004340:	f04f 0300 	mov.w	r3, #0
 8004344:	f7fc fc24 	bl	8000b90 <__aeabi_uldivmod>
 8004348:	4602      	mov	r2, r0
 800434a:	460b      	mov	r3, r1
 800434c:	4613      	mov	r3, r2
 800434e:	60fb      	str	r3, [r7, #12]
 8004350:	e04a      	b.n	80043e8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004352:	4b31      	ldr	r3, [pc, #196]	; (8004418 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	099b      	lsrs	r3, r3, #6
 8004358:	461a      	mov	r2, r3
 800435a:	f04f 0300 	mov.w	r3, #0
 800435e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004362:	f04f 0100 	mov.w	r1, #0
 8004366:	ea02 0400 	and.w	r4, r2, r0
 800436a:	ea03 0501 	and.w	r5, r3, r1
 800436e:	4620      	mov	r0, r4
 8004370:	4629      	mov	r1, r5
 8004372:	f04f 0200 	mov.w	r2, #0
 8004376:	f04f 0300 	mov.w	r3, #0
 800437a:	014b      	lsls	r3, r1, #5
 800437c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004380:	0142      	lsls	r2, r0, #5
 8004382:	4610      	mov	r0, r2
 8004384:	4619      	mov	r1, r3
 8004386:	1b00      	subs	r0, r0, r4
 8004388:	eb61 0105 	sbc.w	r1, r1, r5
 800438c:	f04f 0200 	mov.w	r2, #0
 8004390:	f04f 0300 	mov.w	r3, #0
 8004394:	018b      	lsls	r3, r1, #6
 8004396:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800439a:	0182      	lsls	r2, r0, #6
 800439c:	1a12      	subs	r2, r2, r0
 800439e:	eb63 0301 	sbc.w	r3, r3, r1
 80043a2:	f04f 0000 	mov.w	r0, #0
 80043a6:	f04f 0100 	mov.w	r1, #0
 80043aa:	00d9      	lsls	r1, r3, #3
 80043ac:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80043b0:	00d0      	lsls	r0, r2, #3
 80043b2:	4602      	mov	r2, r0
 80043b4:	460b      	mov	r3, r1
 80043b6:	1912      	adds	r2, r2, r4
 80043b8:	eb45 0303 	adc.w	r3, r5, r3
 80043bc:	f04f 0000 	mov.w	r0, #0
 80043c0:	f04f 0100 	mov.w	r1, #0
 80043c4:	0299      	lsls	r1, r3, #10
 80043c6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80043ca:	0290      	lsls	r0, r2, #10
 80043cc:	4602      	mov	r2, r0
 80043ce:	460b      	mov	r3, r1
 80043d0:	4610      	mov	r0, r2
 80043d2:	4619      	mov	r1, r3
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	461a      	mov	r2, r3
 80043d8:	f04f 0300 	mov.w	r3, #0
 80043dc:	f7fc fbd8 	bl	8000b90 <__aeabi_uldivmod>
 80043e0:	4602      	mov	r2, r0
 80043e2:	460b      	mov	r3, r1
 80043e4:	4613      	mov	r3, r2
 80043e6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80043e8:	4b0b      	ldr	r3, [pc, #44]	; (8004418 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	0c1b      	lsrs	r3, r3, #16
 80043ee:	f003 0303 	and.w	r3, r3, #3
 80043f2:	3301      	adds	r3, #1
 80043f4:	005b      	lsls	r3, r3, #1
 80043f6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80043f8:	68fa      	ldr	r2, [r7, #12]
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004400:	60bb      	str	r3, [r7, #8]
      break;
 8004402:	e002      	b.n	800440a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004404:	4b05      	ldr	r3, [pc, #20]	; (800441c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004406:	60bb      	str	r3, [r7, #8]
      break;
 8004408:	bf00      	nop
    }
  }
  return sysclockfreq;
 800440a:	68bb      	ldr	r3, [r7, #8]
}
 800440c:	4618      	mov	r0, r3
 800440e:	3710      	adds	r7, #16
 8004410:	46bd      	mov	sp, r7
 8004412:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004416:	bf00      	nop
 8004418:	40023800 	.word	0x40023800
 800441c:	00f42400 	.word	0x00f42400
 8004420:	007a1200 	.word	0x007a1200

08004424 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004424:	b480      	push	{r7}
 8004426:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004428:	4b03      	ldr	r3, [pc, #12]	; (8004438 <HAL_RCC_GetHCLKFreq+0x14>)
 800442a:	681b      	ldr	r3, [r3, #0]
}
 800442c:	4618      	mov	r0, r3
 800442e:	46bd      	mov	sp, r7
 8004430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004434:	4770      	bx	lr
 8004436:	bf00      	nop
 8004438:	20000000 	.word	0x20000000

0800443c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004440:	f7ff fff0 	bl	8004424 <HAL_RCC_GetHCLKFreq>
 8004444:	4602      	mov	r2, r0
 8004446:	4b05      	ldr	r3, [pc, #20]	; (800445c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	0a9b      	lsrs	r3, r3, #10
 800444c:	f003 0307 	and.w	r3, r3, #7
 8004450:	4903      	ldr	r1, [pc, #12]	; (8004460 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004452:	5ccb      	ldrb	r3, [r1, r3]
 8004454:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004458:	4618      	mov	r0, r3
 800445a:	bd80      	pop	{r7, pc}
 800445c:	40023800 	.word	0x40023800
 8004460:	08007468 	.word	0x08007468

08004464 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004468:	f7ff ffdc 	bl	8004424 <HAL_RCC_GetHCLKFreq>
 800446c:	4602      	mov	r2, r0
 800446e:	4b05      	ldr	r3, [pc, #20]	; (8004484 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	0b5b      	lsrs	r3, r3, #13
 8004474:	f003 0307 	and.w	r3, r3, #7
 8004478:	4903      	ldr	r1, [pc, #12]	; (8004488 <HAL_RCC_GetPCLK2Freq+0x24>)
 800447a:	5ccb      	ldrb	r3, [r1, r3]
 800447c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004480:	4618      	mov	r0, r3
 8004482:	bd80      	pop	{r7, pc}
 8004484:	40023800 	.word	0x40023800
 8004488:	08007468 	.word	0x08007468

0800448c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b082      	sub	sp, #8
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d101      	bne.n	800449e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	e041      	b.n	8004522 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d106      	bne.n	80044b8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2200      	movs	r2, #0
 80044ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	f7fd fd20 	bl	8001ef8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2202      	movs	r2, #2
 80044bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	3304      	adds	r3, #4
 80044c8:	4619      	mov	r1, r3
 80044ca:	4610      	mov	r0, r2
 80044cc:	f000 f9b8 	bl	8004840 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2201      	movs	r2, #1
 80044d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2201      	movs	r2, #1
 80044dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2201      	movs	r2, #1
 80044e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2201      	movs	r2, #1
 80044ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2201      	movs	r2, #1
 80044f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2201      	movs	r2, #1
 80044fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2201      	movs	r2, #1
 8004504:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2201      	movs	r2, #1
 800450c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2201      	movs	r2, #1
 8004514:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2201      	movs	r2, #1
 800451c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004520:	2300      	movs	r3, #0
}
 8004522:	4618      	mov	r0, r3
 8004524:	3708      	adds	r7, #8
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}
	...

0800452c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b084      	sub	sp, #16
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
 8004534:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d109      	bne.n	8004550 <HAL_TIM_PWM_Start+0x24>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004542:	b2db      	uxtb	r3, r3
 8004544:	2b01      	cmp	r3, #1
 8004546:	bf14      	ite	ne
 8004548:	2301      	movne	r3, #1
 800454a:	2300      	moveq	r3, #0
 800454c:	b2db      	uxtb	r3, r3
 800454e:	e022      	b.n	8004596 <HAL_TIM_PWM_Start+0x6a>
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	2b04      	cmp	r3, #4
 8004554:	d109      	bne.n	800456a <HAL_TIM_PWM_Start+0x3e>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800455c:	b2db      	uxtb	r3, r3
 800455e:	2b01      	cmp	r3, #1
 8004560:	bf14      	ite	ne
 8004562:	2301      	movne	r3, #1
 8004564:	2300      	moveq	r3, #0
 8004566:	b2db      	uxtb	r3, r3
 8004568:	e015      	b.n	8004596 <HAL_TIM_PWM_Start+0x6a>
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	2b08      	cmp	r3, #8
 800456e:	d109      	bne.n	8004584 <HAL_TIM_PWM_Start+0x58>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004576:	b2db      	uxtb	r3, r3
 8004578:	2b01      	cmp	r3, #1
 800457a:	bf14      	ite	ne
 800457c:	2301      	movne	r3, #1
 800457e:	2300      	moveq	r3, #0
 8004580:	b2db      	uxtb	r3, r3
 8004582:	e008      	b.n	8004596 <HAL_TIM_PWM_Start+0x6a>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800458a:	b2db      	uxtb	r3, r3
 800458c:	2b01      	cmp	r3, #1
 800458e:	bf14      	ite	ne
 8004590:	2301      	movne	r3, #1
 8004592:	2300      	moveq	r3, #0
 8004594:	b2db      	uxtb	r3, r3
 8004596:	2b00      	cmp	r3, #0
 8004598:	d001      	beq.n	800459e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	e07c      	b.n	8004698 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d104      	bne.n	80045ae <HAL_TIM_PWM_Start+0x82>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2202      	movs	r2, #2
 80045a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80045ac:	e013      	b.n	80045d6 <HAL_TIM_PWM_Start+0xaa>
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	2b04      	cmp	r3, #4
 80045b2:	d104      	bne.n	80045be <HAL_TIM_PWM_Start+0x92>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2202      	movs	r2, #2
 80045b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80045bc:	e00b      	b.n	80045d6 <HAL_TIM_PWM_Start+0xaa>
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	2b08      	cmp	r3, #8
 80045c2:	d104      	bne.n	80045ce <HAL_TIM_PWM_Start+0xa2>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2202      	movs	r2, #2
 80045c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045cc:	e003      	b.n	80045d6 <HAL_TIM_PWM_Start+0xaa>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2202      	movs	r2, #2
 80045d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	2201      	movs	r2, #1
 80045dc:	6839      	ldr	r1, [r7, #0]
 80045de:	4618      	mov	r0, r3
 80045e0:	f000 fb7e 	bl	8004ce0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a2d      	ldr	r2, [pc, #180]	; (80046a0 <HAL_TIM_PWM_Start+0x174>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d004      	beq.n	80045f8 <HAL_TIM_PWM_Start+0xcc>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a2c      	ldr	r2, [pc, #176]	; (80046a4 <HAL_TIM_PWM_Start+0x178>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d101      	bne.n	80045fc <HAL_TIM_PWM_Start+0xd0>
 80045f8:	2301      	movs	r3, #1
 80045fa:	e000      	b.n	80045fe <HAL_TIM_PWM_Start+0xd2>
 80045fc:	2300      	movs	r3, #0
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d007      	beq.n	8004612 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004610:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a22      	ldr	r2, [pc, #136]	; (80046a0 <HAL_TIM_PWM_Start+0x174>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d022      	beq.n	8004662 <HAL_TIM_PWM_Start+0x136>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004624:	d01d      	beq.n	8004662 <HAL_TIM_PWM_Start+0x136>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a1f      	ldr	r2, [pc, #124]	; (80046a8 <HAL_TIM_PWM_Start+0x17c>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d018      	beq.n	8004662 <HAL_TIM_PWM_Start+0x136>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a1d      	ldr	r2, [pc, #116]	; (80046ac <HAL_TIM_PWM_Start+0x180>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d013      	beq.n	8004662 <HAL_TIM_PWM_Start+0x136>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a1c      	ldr	r2, [pc, #112]	; (80046b0 <HAL_TIM_PWM_Start+0x184>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d00e      	beq.n	8004662 <HAL_TIM_PWM_Start+0x136>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a16      	ldr	r2, [pc, #88]	; (80046a4 <HAL_TIM_PWM_Start+0x178>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d009      	beq.n	8004662 <HAL_TIM_PWM_Start+0x136>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a18      	ldr	r2, [pc, #96]	; (80046b4 <HAL_TIM_PWM_Start+0x188>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d004      	beq.n	8004662 <HAL_TIM_PWM_Start+0x136>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a16      	ldr	r2, [pc, #88]	; (80046b8 <HAL_TIM_PWM_Start+0x18c>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d111      	bne.n	8004686 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	f003 0307 	and.w	r3, r3, #7
 800466c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2b06      	cmp	r3, #6
 8004672:	d010      	beq.n	8004696 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f042 0201 	orr.w	r2, r2, #1
 8004682:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004684:	e007      	b.n	8004696 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	681a      	ldr	r2, [r3, #0]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f042 0201 	orr.w	r2, r2, #1
 8004694:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004696:	2300      	movs	r3, #0
}
 8004698:	4618      	mov	r0, r3
 800469a:	3710      	adds	r7, #16
 800469c:	46bd      	mov	sp, r7
 800469e:	bd80      	pop	{r7, pc}
 80046a0:	40010000 	.word	0x40010000
 80046a4:	40010400 	.word	0x40010400
 80046a8:	40000400 	.word	0x40000400
 80046ac:	40000800 	.word	0x40000800
 80046b0:	40000c00 	.word	0x40000c00
 80046b4:	40014000 	.word	0x40014000
 80046b8:	40001800 	.word	0x40001800

080046bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b086      	sub	sp, #24
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	60f8      	str	r0, [r7, #12]
 80046c4:	60b9      	str	r1, [r7, #8]
 80046c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046c8:	2300      	movs	r3, #0
 80046ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046d2:	2b01      	cmp	r3, #1
 80046d4:	d101      	bne.n	80046da <HAL_TIM_PWM_ConfigChannel+0x1e>
 80046d6:	2302      	movs	r3, #2
 80046d8:	e0ae      	b.n	8004838 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2201      	movs	r2, #1
 80046de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2b0c      	cmp	r3, #12
 80046e6:	f200 809f 	bhi.w	8004828 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80046ea:	a201      	add	r2, pc, #4	; (adr r2, 80046f0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80046ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046f0:	08004725 	.word	0x08004725
 80046f4:	08004829 	.word	0x08004829
 80046f8:	08004829 	.word	0x08004829
 80046fc:	08004829 	.word	0x08004829
 8004700:	08004765 	.word	0x08004765
 8004704:	08004829 	.word	0x08004829
 8004708:	08004829 	.word	0x08004829
 800470c:	08004829 	.word	0x08004829
 8004710:	080047a7 	.word	0x080047a7
 8004714:	08004829 	.word	0x08004829
 8004718:	08004829 	.word	0x08004829
 800471c:	08004829 	.word	0x08004829
 8004720:	080047e7 	.word	0x080047e7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	68b9      	ldr	r1, [r7, #8]
 800472a:	4618      	mov	r0, r3
 800472c:	f000 f928 	bl	8004980 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	699a      	ldr	r2, [r3, #24]
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f042 0208 	orr.w	r2, r2, #8
 800473e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	699a      	ldr	r2, [r3, #24]
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f022 0204 	bic.w	r2, r2, #4
 800474e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	6999      	ldr	r1, [r3, #24]
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	691a      	ldr	r2, [r3, #16]
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	430a      	orrs	r2, r1
 8004760:	619a      	str	r2, [r3, #24]
      break;
 8004762:	e064      	b.n	800482e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	68b9      	ldr	r1, [r7, #8]
 800476a:	4618      	mov	r0, r3
 800476c:	f000 f978 	bl	8004a60 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	699a      	ldr	r2, [r3, #24]
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800477e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	699a      	ldr	r2, [r3, #24]
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800478e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	6999      	ldr	r1, [r3, #24]
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	691b      	ldr	r3, [r3, #16]
 800479a:	021a      	lsls	r2, r3, #8
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	430a      	orrs	r2, r1
 80047a2:	619a      	str	r2, [r3, #24]
      break;
 80047a4:	e043      	b.n	800482e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	68b9      	ldr	r1, [r7, #8]
 80047ac:	4618      	mov	r0, r3
 80047ae:	f000 f9cd 	bl	8004b4c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	69da      	ldr	r2, [r3, #28]
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f042 0208 	orr.w	r2, r2, #8
 80047c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	69da      	ldr	r2, [r3, #28]
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f022 0204 	bic.w	r2, r2, #4
 80047d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	69d9      	ldr	r1, [r3, #28]
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	691a      	ldr	r2, [r3, #16]
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	430a      	orrs	r2, r1
 80047e2:	61da      	str	r2, [r3, #28]
      break;
 80047e4:	e023      	b.n	800482e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	68b9      	ldr	r1, [r7, #8]
 80047ec:	4618      	mov	r0, r3
 80047ee:	f000 fa21 	bl	8004c34 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	69da      	ldr	r2, [r3, #28]
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004800:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	69da      	ldr	r2, [r3, #28]
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004810:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	69d9      	ldr	r1, [r3, #28]
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	691b      	ldr	r3, [r3, #16]
 800481c:	021a      	lsls	r2, r3, #8
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	430a      	orrs	r2, r1
 8004824:	61da      	str	r2, [r3, #28]
      break;
 8004826:	e002      	b.n	800482e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004828:	2301      	movs	r3, #1
 800482a:	75fb      	strb	r3, [r7, #23]
      break;
 800482c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	2200      	movs	r2, #0
 8004832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004836:	7dfb      	ldrb	r3, [r7, #23]
}
 8004838:	4618      	mov	r0, r3
 800483a:	3718      	adds	r7, #24
 800483c:	46bd      	mov	sp, r7
 800483e:	bd80      	pop	{r7, pc}

08004840 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004840:	b480      	push	{r7}
 8004842:	b085      	sub	sp, #20
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
 8004848:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	4a40      	ldr	r2, [pc, #256]	; (8004954 <TIM_Base_SetConfig+0x114>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d013      	beq.n	8004880 <TIM_Base_SetConfig+0x40>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800485e:	d00f      	beq.n	8004880 <TIM_Base_SetConfig+0x40>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	4a3d      	ldr	r2, [pc, #244]	; (8004958 <TIM_Base_SetConfig+0x118>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d00b      	beq.n	8004880 <TIM_Base_SetConfig+0x40>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	4a3c      	ldr	r2, [pc, #240]	; (800495c <TIM_Base_SetConfig+0x11c>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d007      	beq.n	8004880 <TIM_Base_SetConfig+0x40>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	4a3b      	ldr	r2, [pc, #236]	; (8004960 <TIM_Base_SetConfig+0x120>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d003      	beq.n	8004880 <TIM_Base_SetConfig+0x40>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	4a3a      	ldr	r2, [pc, #232]	; (8004964 <TIM_Base_SetConfig+0x124>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d108      	bne.n	8004892 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004886:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	68fa      	ldr	r2, [r7, #12]
 800488e:	4313      	orrs	r3, r2
 8004890:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	4a2f      	ldr	r2, [pc, #188]	; (8004954 <TIM_Base_SetConfig+0x114>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d02b      	beq.n	80048f2 <TIM_Base_SetConfig+0xb2>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048a0:	d027      	beq.n	80048f2 <TIM_Base_SetConfig+0xb2>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	4a2c      	ldr	r2, [pc, #176]	; (8004958 <TIM_Base_SetConfig+0x118>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d023      	beq.n	80048f2 <TIM_Base_SetConfig+0xb2>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	4a2b      	ldr	r2, [pc, #172]	; (800495c <TIM_Base_SetConfig+0x11c>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d01f      	beq.n	80048f2 <TIM_Base_SetConfig+0xb2>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	4a2a      	ldr	r2, [pc, #168]	; (8004960 <TIM_Base_SetConfig+0x120>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d01b      	beq.n	80048f2 <TIM_Base_SetConfig+0xb2>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	4a29      	ldr	r2, [pc, #164]	; (8004964 <TIM_Base_SetConfig+0x124>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d017      	beq.n	80048f2 <TIM_Base_SetConfig+0xb2>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	4a28      	ldr	r2, [pc, #160]	; (8004968 <TIM_Base_SetConfig+0x128>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d013      	beq.n	80048f2 <TIM_Base_SetConfig+0xb2>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	4a27      	ldr	r2, [pc, #156]	; (800496c <TIM_Base_SetConfig+0x12c>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d00f      	beq.n	80048f2 <TIM_Base_SetConfig+0xb2>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	4a26      	ldr	r2, [pc, #152]	; (8004970 <TIM_Base_SetConfig+0x130>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d00b      	beq.n	80048f2 <TIM_Base_SetConfig+0xb2>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	4a25      	ldr	r2, [pc, #148]	; (8004974 <TIM_Base_SetConfig+0x134>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d007      	beq.n	80048f2 <TIM_Base_SetConfig+0xb2>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	4a24      	ldr	r2, [pc, #144]	; (8004978 <TIM_Base_SetConfig+0x138>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d003      	beq.n	80048f2 <TIM_Base_SetConfig+0xb2>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	4a23      	ldr	r2, [pc, #140]	; (800497c <TIM_Base_SetConfig+0x13c>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d108      	bne.n	8004904 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	68db      	ldr	r3, [r3, #12]
 80048fe:	68fa      	ldr	r2, [r7, #12]
 8004900:	4313      	orrs	r3, r2
 8004902:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	695b      	ldr	r3, [r3, #20]
 800490e:	4313      	orrs	r3, r2
 8004910:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	68fa      	ldr	r2, [r7, #12]
 8004916:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	689a      	ldr	r2, [r3, #8]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	681a      	ldr	r2, [r3, #0]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	4a0a      	ldr	r2, [pc, #40]	; (8004954 <TIM_Base_SetConfig+0x114>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d003      	beq.n	8004938 <TIM_Base_SetConfig+0xf8>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	4a0c      	ldr	r2, [pc, #48]	; (8004964 <TIM_Base_SetConfig+0x124>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d103      	bne.n	8004940 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	691a      	ldr	r2, [r3, #16]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2201      	movs	r2, #1
 8004944:	615a      	str	r2, [r3, #20]
}
 8004946:	bf00      	nop
 8004948:	3714      	adds	r7, #20
 800494a:	46bd      	mov	sp, r7
 800494c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004950:	4770      	bx	lr
 8004952:	bf00      	nop
 8004954:	40010000 	.word	0x40010000
 8004958:	40000400 	.word	0x40000400
 800495c:	40000800 	.word	0x40000800
 8004960:	40000c00 	.word	0x40000c00
 8004964:	40010400 	.word	0x40010400
 8004968:	40014000 	.word	0x40014000
 800496c:	40014400 	.word	0x40014400
 8004970:	40014800 	.word	0x40014800
 8004974:	40001800 	.word	0x40001800
 8004978:	40001c00 	.word	0x40001c00
 800497c:	40002000 	.word	0x40002000

08004980 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004980:	b480      	push	{r7}
 8004982:	b087      	sub	sp, #28
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
 8004988:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6a1b      	ldr	r3, [r3, #32]
 800498e:	f023 0201 	bic.w	r2, r3, #1
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6a1b      	ldr	r3, [r3, #32]
 800499a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	699b      	ldr	r3, [r3, #24]
 80049a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	f023 0303 	bic.w	r3, r3, #3
 80049b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	68fa      	ldr	r2, [r7, #12]
 80049be:	4313      	orrs	r3, r2
 80049c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	f023 0302 	bic.w	r3, r3, #2
 80049c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	697a      	ldr	r2, [r7, #20]
 80049d0:	4313      	orrs	r3, r2
 80049d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	4a20      	ldr	r2, [pc, #128]	; (8004a58 <TIM_OC1_SetConfig+0xd8>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d003      	beq.n	80049e4 <TIM_OC1_SetConfig+0x64>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	4a1f      	ldr	r2, [pc, #124]	; (8004a5c <TIM_OC1_SetConfig+0xdc>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d10c      	bne.n	80049fe <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	f023 0308 	bic.w	r3, r3, #8
 80049ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	68db      	ldr	r3, [r3, #12]
 80049f0:	697a      	ldr	r2, [r7, #20]
 80049f2:	4313      	orrs	r3, r2
 80049f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	f023 0304 	bic.w	r3, r3, #4
 80049fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	4a15      	ldr	r2, [pc, #84]	; (8004a58 <TIM_OC1_SetConfig+0xd8>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d003      	beq.n	8004a0e <TIM_OC1_SetConfig+0x8e>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	4a14      	ldr	r2, [pc, #80]	; (8004a5c <TIM_OC1_SetConfig+0xdc>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d111      	bne.n	8004a32 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004a1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	695b      	ldr	r3, [r3, #20]
 8004a22:	693a      	ldr	r2, [r7, #16]
 8004a24:	4313      	orrs	r3, r2
 8004a26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	699b      	ldr	r3, [r3, #24]
 8004a2c:	693a      	ldr	r2, [r7, #16]
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	693a      	ldr	r2, [r7, #16]
 8004a36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	68fa      	ldr	r2, [r7, #12]
 8004a3c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	685a      	ldr	r2, [r3, #4]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	697a      	ldr	r2, [r7, #20]
 8004a4a:	621a      	str	r2, [r3, #32]
}
 8004a4c:	bf00      	nop
 8004a4e:	371c      	adds	r7, #28
 8004a50:	46bd      	mov	sp, r7
 8004a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a56:	4770      	bx	lr
 8004a58:	40010000 	.word	0x40010000
 8004a5c:	40010400 	.word	0x40010400

08004a60 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b087      	sub	sp, #28
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
 8004a68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6a1b      	ldr	r3, [r3, #32]
 8004a6e:	f023 0210 	bic.w	r2, r3, #16
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6a1b      	ldr	r3, [r3, #32]
 8004a7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	699b      	ldr	r3, [r3, #24]
 8004a86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	021b      	lsls	r3, r3, #8
 8004a9e:	68fa      	ldr	r2, [r7, #12]
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	f023 0320 	bic.w	r3, r3, #32
 8004aaa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	689b      	ldr	r3, [r3, #8]
 8004ab0:	011b      	lsls	r3, r3, #4
 8004ab2:	697a      	ldr	r2, [r7, #20]
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	4a22      	ldr	r2, [pc, #136]	; (8004b44 <TIM_OC2_SetConfig+0xe4>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d003      	beq.n	8004ac8 <TIM_OC2_SetConfig+0x68>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	4a21      	ldr	r2, [pc, #132]	; (8004b48 <TIM_OC2_SetConfig+0xe8>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d10d      	bne.n	8004ae4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ace:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	68db      	ldr	r3, [r3, #12]
 8004ad4:	011b      	lsls	r3, r3, #4
 8004ad6:	697a      	ldr	r2, [r7, #20]
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ae2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	4a17      	ldr	r2, [pc, #92]	; (8004b44 <TIM_OC2_SetConfig+0xe4>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d003      	beq.n	8004af4 <TIM_OC2_SetConfig+0x94>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	4a16      	ldr	r2, [pc, #88]	; (8004b48 <TIM_OC2_SetConfig+0xe8>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d113      	bne.n	8004b1c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004afa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b02:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	695b      	ldr	r3, [r3, #20]
 8004b08:	009b      	lsls	r3, r3, #2
 8004b0a:	693a      	ldr	r2, [r7, #16]
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	699b      	ldr	r3, [r3, #24]
 8004b14:	009b      	lsls	r3, r3, #2
 8004b16:	693a      	ldr	r2, [r7, #16]
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	693a      	ldr	r2, [r7, #16]
 8004b20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	68fa      	ldr	r2, [r7, #12]
 8004b26:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	685a      	ldr	r2, [r3, #4]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	697a      	ldr	r2, [r7, #20]
 8004b34:	621a      	str	r2, [r3, #32]
}
 8004b36:	bf00      	nop
 8004b38:	371c      	adds	r7, #28
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b40:	4770      	bx	lr
 8004b42:	bf00      	nop
 8004b44:	40010000 	.word	0x40010000
 8004b48:	40010400 	.word	0x40010400

08004b4c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b087      	sub	sp, #28
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
 8004b54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6a1b      	ldr	r3, [r3, #32]
 8004b5a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6a1b      	ldr	r3, [r3, #32]
 8004b66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	69db      	ldr	r3, [r3, #28]
 8004b72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	f023 0303 	bic.w	r3, r3, #3
 8004b82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	68fa      	ldr	r2, [r7, #12]
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	021b      	lsls	r3, r3, #8
 8004b9c:	697a      	ldr	r2, [r7, #20]
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	4a21      	ldr	r2, [pc, #132]	; (8004c2c <TIM_OC3_SetConfig+0xe0>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d003      	beq.n	8004bb2 <TIM_OC3_SetConfig+0x66>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	4a20      	ldr	r2, [pc, #128]	; (8004c30 <TIM_OC3_SetConfig+0xe4>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d10d      	bne.n	8004bce <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004bb8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	68db      	ldr	r3, [r3, #12]
 8004bbe:	021b      	lsls	r3, r3, #8
 8004bc0:	697a      	ldr	r2, [r7, #20]
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004bcc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	4a16      	ldr	r2, [pc, #88]	; (8004c2c <TIM_OC3_SetConfig+0xe0>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d003      	beq.n	8004bde <TIM_OC3_SetConfig+0x92>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	4a15      	ldr	r2, [pc, #84]	; (8004c30 <TIM_OC3_SetConfig+0xe4>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d113      	bne.n	8004c06 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004be4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004bec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	695b      	ldr	r3, [r3, #20]
 8004bf2:	011b      	lsls	r3, r3, #4
 8004bf4:	693a      	ldr	r2, [r7, #16]
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	699b      	ldr	r3, [r3, #24]
 8004bfe:	011b      	lsls	r3, r3, #4
 8004c00:	693a      	ldr	r2, [r7, #16]
 8004c02:	4313      	orrs	r3, r2
 8004c04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	693a      	ldr	r2, [r7, #16]
 8004c0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	68fa      	ldr	r2, [r7, #12]
 8004c10:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	685a      	ldr	r2, [r3, #4]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	697a      	ldr	r2, [r7, #20]
 8004c1e:	621a      	str	r2, [r3, #32]
}
 8004c20:	bf00      	nop
 8004c22:	371c      	adds	r7, #28
 8004c24:	46bd      	mov	sp, r7
 8004c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2a:	4770      	bx	lr
 8004c2c:	40010000 	.word	0x40010000
 8004c30:	40010400 	.word	0x40010400

08004c34 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b087      	sub	sp, #28
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
 8004c3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6a1b      	ldr	r3, [r3, #32]
 8004c42:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6a1b      	ldr	r3, [r3, #32]
 8004c4e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	69db      	ldr	r3, [r3, #28]
 8004c5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	021b      	lsls	r3, r3, #8
 8004c72:	68fa      	ldr	r2, [r7, #12]
 8004c74:	4313      	orrs	r3, r2
 8004c76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004c78:	693b      	ldr	r3, [r7, #16]
 8004c7a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c7e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	031b      	lsls	r3, r3, #12
 8004c86:	693a      	ldr	r2, [r7, #16]
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	4a12      	ldr	r2, [pc, #72]	; (8004cd8 <TIM_OC4_SetConfig+0xa4>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d003      	beq.n	8004c9c <TIM_OC4_SetConfig+0x68>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	4a11      	ldr	r2, [pc, #68]	; (8004cdc <TIM_OC4_SetConfig+0xa8>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d109      	bne.n	8004cb0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ca2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	695b      	ldr	r3, [r3, #20]
 8004ca8:	019b      	lsls	r3, r3, #6
 8004caa:	697a      	ldr	r2, [r7, #20]
 8004cac:	4313      	orrs	r3, r2
 8004cae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	697a      	ldr	r2, [r7, #20]
 8004cb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	68fa      	ldr	r2, [r7, #12]
 8004cba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	685a      	ldr	r2, [r3, #4]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	693a      	ldr	r2, [r7, #16]
 8004cc8:	621a      	str	r2, [r3, #32]
}
 8004cca:	bf00      	nop
 8004ccc:	371c      	adds	r7, #28
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd4:	4770      	bx	lr
 8004cd6:	bf00      	nop
 8004cd8:	40010000 	.word	0x40010000
 8004cdc:	40010400 	.word	0x40010400

08004ce0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b087      	sub	sp, #28
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	60f8      	str	r0, [r7, #12]
 8004ce8:	60b9      	str	r1, [r7, #8]
 8004cea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	f003 031f 	and.w	r3, r3, #31
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8004cf8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	6a1a      	ldr	r2, [r3, #32]
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	43db      	mvns	r3, r3
 8004d02:	401a      	ands	r2, r3
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	6a1a      	ldr	r2, [r3, #32]
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	f003 031f 	and.w	r3, r3, #31
 8004d12:	6879      	ldr	r1, [r7, #4]
 8004d14:	fa01 f303 	lsl.w	r3, r1, r3
 8004d18:	431a      	orrs	r2, r3
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	621a      	str	r2, [r3, #32]
}
 8004d1e:	bf00      	nop
 8004d20:	371c      	adds	r7, #28
 8004d22:	46bd      	mov	sp, r7
 8004d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d28:	4770      	bx	lr
	...

08004d2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b085      	sub	sp, #20
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
 8004d34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	d101      	bne.n	8004d44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d40:	2302      	movs	r3, #2
 8004d42:	e05a      	b.n	8004dfa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2201      	movs	r2, #1
 8004d48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2202      	movs	r2, #2
 8004d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d6a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	68fa      	ldr	r2, [r7, #12]
 8004d72:	4313      	orrs	r3, r2
 8004d74:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	68fa      	ldr	r2, [r7, #12]
 8004d7c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a21      	ldr	r2, [pc, #132]	; (8004e08 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d022      	beq.n	8004dce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d90:	d01d      	beq.n	8004dce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a1d      	ldr	r2, [pc, #116]	; (8004e0c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d018      	beq.n	8004dce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a1b      	ldr	r2, [pc, #108]	; (8004e10 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d013      	beq.n	8004dce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a1a      	ldr	r2, [pc, #104]	; (8004e14 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d00e      	beq.n	8004dce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a18      	ldr	r2, [pc, #96]	; (8004e18 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d009      	beq.n	8004dce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a17      	ldr	r2, [pc, #92]	; (8004e1c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d004      	beq.n	8004dce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a15      	ldr	r2, [pc, #84]	; (8004e20 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d10c      	bne.n	8004de8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004dd4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	68ba      	ldr	r2, [r7, #8]
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	68ba      	ldr	r2, [r7, #8]
 8004de6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2201      	movs	r2, #1
 8004dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2200      	movs	r2, #0
 8004df4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004df8:	2300      	movs	r3, #0
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	3714      	adds	r7, #20
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e04:	4770      	bx	lr
 8004e06:	bf00      	nop
 8004e08:	40010000 	.word	0x40010000
 8004e0c:	40000400 	.word	0x40000400
 8004e10:	40000800 	.word	0x40000800
 8004e14:	40000c00 	.word	0x40000c00
 8004e18:	40010400 	.word	0x40010400
 8004e1c:	40014000 	.word	0x40014000
 8004e20:	40001800 	.word	0x40001800

08004e24 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b082      	sub	sp, #8
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d101      	bne.n	8004e36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	e03f      	b.n	8004eb6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e3c:	b2db      	uxtb	r3, r3
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d106      	bne.n	8004e50 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2200      	movs	r2, #0
 8004e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f7fd f8ee 	bl	800202c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2224      	movs	r2, #36	; 0x24
 8004e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	68da      	ldr	r2, [r3, #12]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e66:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004e68:	6878      	ldr	r0, [r7, #4]
 8004e6a:	f000 fce5 	bl	8005838 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	691a      	ldr	r2, [r3, #16]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e7c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	695a      	ldr	r2, [r3, #20]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e8c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	68da      	ldr	r2, [r3, #12]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e9c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2220      	movs	r2, #32
 8004ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2220      	movs	r2, #32
 8004eb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004eb4:	2300      	movs	r3, #0
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3708      	adds	r7, #8
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}

08004ebe <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ebe:	b580      	push	{r7, lr}
 8004ec0:	b084      	sub	sp, #16
 8004ec2:	af00      	add	r7, sp, #0
 8004ec4:	60f8      	str	r0, [r7, #12]
 8004ec6:	60b9      	str	r1, [r7, #8]
 8004ec8:	4613      	mov	r3, r2
 8004eca:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ed2:	b2db      	uxtb	r3, r3
 8004ed4:	2b20      	cmp	r3, #32
 8004ed6:	d11d      	bne.n	8004f14 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d002      	beq.n	8004ee4 <HAL_UART_Receive_IT+0x26>
 8004ede:	88fb      	ldrh	r3, [r7, #6]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d101      	bne.n	8004ee8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	e016      	b.n	8004f16 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004eee:	2b01      	cmp	r3, #1
 8004ef0:	d101      	bne.n	8004ef6 <HAL_UART_Receive_IT+0x38>
 8004ef2:	2302      	movs	r3, #2
 8004ef4:	e00f      	b.n	8004f16 <HAL_UART_Receive_IT+0x58>
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	2201      	movs	r2, #1
 8004efa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	2200      	movs	r2, #0
 8004f02:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004f04:	88fb      	ldrh	r3, [r7, #6]
 8004f06:	461a      	mov	r2, r3
 8004f08:	68b9      	ldr	r1, [r7, #8]
 8004f0a:	68f8      	ldr	r0, [r7, #12]
 8004f0c:	f000 fac0 	bl	8005490 <UART_Start_Receive_IT>
 8004f10:	4603      	mov	r3, r0
 8004f12:	e000      	b.n	8004f16 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004f14:	2302      	movs	r3, #2
  }
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	3710      	adds	r7, #16
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}
	...

08004f20 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b0ba      	sub	sp, #232	; 0xe8
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	68db      	ldr	r3, [r3, #12]
 8004f38:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	695b      	ldr	r3, [r3, #20]
 8004f42:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004f46:	2300      	movs	r3, #0
 8004f48:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004f52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f56:	f003 030f 	and.w	r3, r3, #15
 8004f5a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004f5e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d10f      	bne.n	8004f86 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004f66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f6a:	f003 0320 	and.w	r3, r3, #32
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d009      	beq.n	8004f86 <HAL_UART_IRQHandler+0x66>
 8004f72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f76:	f003 0320 	and.w	r3, r3, #32
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d003      	beq.n	8004f86 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f000 fb9f 	bl	80056c2 <UART_Receive_IT>
      return;
 8004f84:	e256      	b.n	8005434 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004f86:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	f000 80de 	beq.w	800514c <HAL_UART_IRQHandler+0x22c>
 8004f90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f94:	f003 0301 	and.w	r3, r3, #1
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d106      	bne.n	8004faa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004f9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fa0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	f000 80d1 	beq.w	800514c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004faa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fae:	f003 0301 	and.w	r3, r3, #1
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d00b      	beq.n	8004fce <HAL_UART_IRQHandler+0xae>
 8004fb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d005      	beq.n	8004fce <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fc6:	f043 0201 	orr.w	r2, r3, #1
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004fce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fd2:	f003 0304 	and.w	r3, r3, #4
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d00b      	beq.n	8004ff2 <HAL_UART_IRQHandler+0xd2>
 8004fda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004fde:	f003 0301 	and.w	r3, r3, #1
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d005      	beq.n	8004ff2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fea:	f043 0202 	orr.w	r2, r3, #2
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004ff2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ff6:	f003 0302 	and.w	r3, r3, #2
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d00b      	beq.n	8005016 <HAL_UART_IRQHandler+0xf6>
 8004ffe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005002:	f003 0301 	and.w	r3, r3, #1
 8005006:	2b00      	cmp	r3, #0
 8005008:	d005      	beq.n	8005016 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800500e:	f043 0204 	orr.w	r2, r3, #4
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005016:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800501a:	f003 0308 	and.w	r3, r3, #8
 800501e:	2b00      	cmp	r3, #0
 8005020:	d011      	beq.n	8005046 <HAL_UART_IRQHandler+0x126>
 8005022:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005026:	f003 0320 	and.w	r3, r3, #32
 800502a:	2b00      	cmp	r3, #0
 800502c:	d105      	bne.n	800503a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800502e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005032:	f003 0301 	and.w	r3, r3, #1
 8005036:	2b00      	cmp	r3, #0
 8005038:	d005      	beq.n	8005046 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800503e:	f043 0208 	orr.w	r2, r3, #8
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800504a:	2b00      	cmp	r3, #0
 800504c:	f000 81ed 	beq.w	800542a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005050:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005054:	f003 0320 	and.w	r3, r3, #32
 8005058:	2b00      	cmp	r3, #0
 800505a:	d008      	beq.n	800506e <HAL_UART_IRQHandler+0x14e>
 800505c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005060:	f003 0320 	and.w	r3, r3, #32
 8005064:	2b00      	cmp	r3, #0
 8005066:	d002      	beq.n	800506e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005068:	6878      	ldr	r0, [r7, #4]
 800506a:	f000 fb2a 	bl	80056c2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	695b      	ldr	r3, [r3, #20]
 8005074:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005078:	2b40      	cmp	r3, #64	; 0x40
 800507a:	bf0c      	ite	eq
 800507c:	2301      	moveq	r3, #1
 800507e:	2300      	movne	r3, #0
 8005080:	b2db      	uxtb	r3, r3
 8005082:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800508a:	f003 0308 	and.w	r3, r3, #8
 800508e:	2b00      	cmp	r3, #0
 8005090:	d103      	bne.n	800509a <HAL_UART_IRQHandler+0x17a>
 8005092:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005096:	2b00      	cmp	r3, #0
 8005098:	d04f      	beq.n	800513a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	f000 fa32 	bl	8005504 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	695b      	ldr	r3, [r3, #20]
 80050a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050aa:	2b40      	cmp	r3, #64	; 0x40
 80050ac:	d141      	bne.n	8005132 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	3314      	adds	r3, #20
 80050b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80050bc:	e853 3f00 	ldrex	r3, [r3]
 80050c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80050c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80050c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	3314      	adds	r3, #20
 80050d6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80050da:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80050de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050e2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80050e6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80050ea:	e841 2300 	strex	r3, r2, [r1]
 80050ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80050f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d1d9      	bne.n	80050ae <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d013      	beq.n	800512a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005106:	4a7d      	ldr	r2, [pc, #500]	; (80052fc <HAL_UART_IRQHandler+0x3dc>)
 8005108:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800510e:	4618      	mov	r0, r3
 8005110:	f7fd fa63 	bl	80025da <HAL_DMA_Abort_IT>
 8005114:	4603      	mov	r3, r0
 8005116:	2b00      	cmp	r3, #0
 8005118:	d016      	beq.n	8005148 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800511e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005120:	687a      	ldr	r2, [r7, #4]
 8005122:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005124:	4610      	mov	r0, r2
 8005126:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005128:	e00e      	b.n	8005148 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f000 f99a 	bl	8005464 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005130:	e00a      	b.n	8005148 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f000 f996 	bl	8005464 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005138:	e006      	b.n	8005148 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	f000 f992 	bl	8005464 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2200      	movs	r2, #0
 8005144:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005146:	e170      	b.n	800542a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005148:	bf00      	nop
    return;
 800514a:	e16e      	b.n	800542a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005150:	2b01      	cmp	r3, #1
 8005152:	f040 814a 	bne.w	80053ea <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005156:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800515a:	f003 0310 	and.w	r3, r3, #16
 800515e:	2b00      	cmp	r3, #0
 8005160:	f000 8143 	beq.w	80053ea <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005164:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005168:	f003 0310 	and.w	r3, r3, #16
 800516c:	2b00      	cmp	r3, #0
 800516e:	f000 813c 	beq.w	80053ea <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005172:	2300      	movs	r3, #0
 8005174:	60bb      	str	r3, [r7, #8]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	60bb      	str	r3, [r7, #8]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	60bb      	str	r3, [r7, #8]
 8005186:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	695b      	ldr	r3, [r3, #20]
 800518e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005192:	2b40      	cmp	r3, #64	; 0x40
 8005194:	f040 80b4 	bne.w	8005300 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80051a4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	f000 8140 	beq.w	800542e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80051b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80051b6:	429a      	cmp	r2, r3
 80051b8:	f080 8139 	bcs.w	800542e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80051c2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051c8:	69db      	ldr	r3, [r3, #28]
 80051ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051ce:	f000 8088 	beq.w	80052e2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	330c      	adds	r3, #12
 80051d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80051e0:	e853 3f00 	ldrex	r3, [r3]
 80051e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80051e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80051ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	330c      	adds	r3, #12
 80051fa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80051fe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005202:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005206:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800520a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800520e:	e841 2300 	strex	r3, r2, [r1]
 8005212:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005216:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800521a:	2b00      	cmp	r3, #0
 800521c:	d1d9      	bne.n	80051d2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	3314      	adds	r3, #20
 8005224:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005226:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005228:	e853 3f00 	ldrex	r3, [r3]
 800522c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800522e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005230:	f023 0301 	bic.w	r3, r3, #1
 8005234:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	3314      	adds	r3, #20
 800523e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005242:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005246:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005248:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800524a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800524e:	e841 2300 	strex	r3, r2, [r1]
 8005252:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005254:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005256:	2b00      	cmp	r3, #0
 8005258:	d1e1      	bne.n	800521e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	3314      	adds	r3, #20
 8005260:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005262:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005264:	e853 3f00 	ldrex	r3, [r3]
 8005268:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800526a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800526c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005270:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	3314      	adds	r3, #20
 800527a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800527e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005280:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005282:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005284:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005286:	e841 2300 	strex	r3, r2, [r1]
 800528a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800528c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800528e:	2b00      	cmp	r3, #0
 8005290:	d1e3      	bne.n	800525a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2220      	movs	r2, #32
 8005296:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2200      	movs	r2, #0
 800529e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	330c      	adds	r3, #12
 80052a6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052aa:	e853 3f00 	ldrex	r3, [r3]
 80052ae:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80052b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052b2:	f023 0310 	bic.w	r3, r3, #16
 80052b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	330c      	adds	r3, #12
 80052c0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80052c4:	65ba      	str	r2, [r7, #88]	; 0x58
 80052c6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052c8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80052ca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80052cc:	e841 2300 	strex	r3, r2, [r1]
 80052d0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80052d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d1e3      	bne.n	80052a0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052dc:	4618      	mov	r0, r3
 80052de:	f7fd f90c 	bl	80024fa <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80052ea:	b29b      	uxth	r3, r3
 80052ec:	1ad3      	subs	r3, r2, r3
 80052ee:	b29b      	uxth	r3, r3
 80052f0:	4619      	mov	r1, r3
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	f000 f8c0 	bl	8005478 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80052f8:	e099      	b.n	800542e <HAL_UART_IRQHandler+0x50e>
 80052fa:	bf00      	nop
 80052fc:	080055cb 	.word	0x080055cb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005308:	b29b      	uxth	r3, r3
 800530a:	1ad3      	subs	r3, r2, r3
 800530c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005314:	b29b      	uxth	r3, r3
 8005316:	2b00      	cmp	r3, #0
 8005318:	f000 808b 	beq.w	8005432 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800531c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005320:	2b00      	cmp	r3, #0
 8005322:	f000 8086 	beq.w	8005432 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	330c      	adds	r3, #12
 800532c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800532e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005330:	e853 3f00 	ldrex	r3, [r3]
 8005334:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005336:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005338:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800533c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	330c      	adds	r3, #12
 8005346:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800534a:	647a      	str	r2, [r7, #68]	; 0x44
 800534c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800534e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005350:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005352:	e841 2300 	strex	r3, r2, [r1]
 8005356:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005358:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800535a:	2b00      	cmp	r3, #0
 800535c:	d1e3      	bne.n	8005326 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	3314      	adds	r3, #20
 8005364:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005368:	e853 3f00 	ldrex	r3, [r3]
 800536c:	623b      	str	r3, [r7, #32]
   return(result);
 800536e:	6a3b      	ldr	r3, [r7, #32]
 8005370:	f023 0301 	bic.w	r3, r3, #1
 8005374:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	3314      	adds	r3, #20
 800537e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005382:	633a      	str	r2, [r7, #48]	; 0x30
 8005384:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005386:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005388:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800538a:	e841 2300 	strex	r3, r2, [r1]
 800538e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005392:	2b00      	cmp	r3, #0
 8005394:	d1e3      	bne.n	800535e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2220      	movs	r2, #32
 800539a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2200      	movs	r2, #0
 80053a2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	330c      	adds	r3, #12
 80053aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	e853 3f00 	ldrex	r3, [r3]
 80053b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	f023 0310 	bic.w	r3, r3, #16
 80053ba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	330c      	adds	r3, #12
 80053c4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80053c8:	61fa      	str	r2, [r7, #28]
 80053ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053cc:	69b9      	ldr	r1, [r7, #24]
 80053ce:	69fa      	ldr	r2, [r7, #28]
 80053d0:	e841 2300 	strex	r3, r2, [r1]
 80053d4:	617b      	str	r3, [r7, #20]
   return(result);
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d1e3      	bne.n	80053a4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80053dc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80053e0:	4619      	mov	r1, r3
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f000 f848 	bl	8005478 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80053e8:	e023      	b.n	8005432 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80053ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d009      	beq.n	800540a <HAL_UART_IRQHandler+0x4ea>
 80053f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d003      	beq.n	800540a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005402:	6878      	ldr	r0, [r7, #4]
 8005404:	f000 f8f5 	bl	80055f2 <UART_Transmit_IT>
    return;
 8005408:	e014      	b.n	8005434 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800540a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800540e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005412:	2b00      	cmp	r3, #0
 8005414:	d00e      	beq.n	8005434 <HAL_UART_IRQHandler+0x514>
 8005416:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800541a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800541e:	2b00      	cmp	r3, #0
 8005420:	d008      	beq.n	8005434 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	f000 f935 	bl	8005692 <UART_EndTransmit_IT>
    return;
 8005428:	e004      	b.n	8005434 <HAL_UART_IRQHandler+0x514>
    return;
 800542a:	bf00      	nop
 800542c:	e002      	b.n	8005434 <HAL_UART_IRQHandler+0x514>
      return;
 800542e:	bf00      	nop
 8005430:	e000      	b.n	8005434 <HAL_UART_IRQHandler+0x514>
      return;
 8005432:	bf00      	nop
  }
}
 8005434:	37e8      	adds	r7, #232	; 0xe8
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}
 800543a:	bf00      	nop

0800543c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800543c:	b480      	push	{r7}
 800543e:	b083      	sub	sp, #12
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005444:	bf00      	nop
 8005446:	370c      	adds	r7, #12
 8005448:	46bd      	mov	sp, r7
 800544a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544e:	4770      	bx	lr

08005450 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005450:	b480      	push	{r7}
 8005452:	b083      	sub	sp, #12
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005458:	bf00      	nop
 800545a:	370c      	adds	r7, #12
 800545c:	46bd      	mov	sp, r7
 800545e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005462:	4770      	bx	lr

08005464 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005464:	b480      	push	{r7}
 8005466:	b083      	sub	sp, #12
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800546c:	bf00      	nop
 800546e:	370c      	adds	r7, #12
 8005470:	46bd      	mov	sp, r7
 8005472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005476:	4770      	bx	lr

08005478 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005478:	b480      	push	{r7}
 800547a:	b083      	sub	sp, #12
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
 8005480:	460b      	mov	r3, r1
 8005482:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005484:	bf00      	nop
 8005486:	370c      	adds	r7, #12
 8005488:	46bd      	mov	sp, r7
 800548a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548e:	4770      	bx	lr

08005490 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005490:	b480      	push	{r7}
 8005492:	b085      	sub	sp, #20
 8005494:	af00      	add	r7, sp, #0
 8005496:	60f8      	str	r0, [r7, #12]
 8005498:	60b9      	str	r1, [r7, #8]
 800549a:	4613      	mov	r3, r2
 800549c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	68ba      	ldr	r2, [r7, #8]
 80054a2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	88fa      	ldrh	r2, [r7, #6]
 80054a8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	88fa      	ldrh	r2, [r7, #6]
 80054ae:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	2200      	movs	r2, #0
 80054b4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	2222      	movs	r2, #34	; 0x22
 80054ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	2200      	movs	r2, #0
 80054c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	68da      	ldr	r2, [r3, #12]
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80054d4:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	695a      	ldr	r2, [r3, #20]
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f042 0201 	orr.w	r2, r2, #1
 80054e4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	68da      	ldr	r2, [r3, #12]
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f042 0220 	orr.w	r2, r2, #32
 80054f4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80054f6:	2300      	movs	r3, #0
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	3714      	adds	r7, #20
 80054fc:	46bd      	mov	sp, r7
 80054fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005502:	4770      	bx	lr

08005504 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005504:	b480      	push	{r7}
 8005506:	b095      	sub	sp, #84	; 0x54
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	330c      	adds	r3, #12
 8005512:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005514:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005516:	e853 3f00 	ldrex	r3, [r3]
 800551a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800551c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800551e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005522:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	330c      	adds	r3, #12
 800552a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800552c:	643a      	str	r2, [r7, #64]	; 0x40
 800552e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005530:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005532:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005534:	e841 2300 	strex	r3, r2, [r1]
 8005538:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800553a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800553c:	2b00      	cmp	r3, #0
 800553e:	d1e5      	bne.n	800550c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	3314      	adds	r3, #20
 8005546:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005548:	6a3b      	ldr	r3, [r7, #32]
 800554a:	e853 3f00 	ldrex	r3, [r3]
 800554e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005550:	69fb      	ldr	r3, [r7, #28]
 8005552:	f023 0301 	bic.w	r3, r3, #1
 8005556:	64bb      	str	r3, [r7, #72]	; 0x48
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	3314      	adds	r3, #20
 800555e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005560:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005562:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005564:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005566:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005568:	e841 2300 	strex	r3, r2, [r1]
 800556c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800556e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005570:	2b00      	cmp	r3, #0
 8005572:	d1e5      	bne.n	8005540 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005578:	2b01      	cmp	r3, #1
 800557a:	d119      	bne.n	80055b0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	330c      	adds	r3, #12
 8005582:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	e853 3f00 	ldrex	r3, [r3]
 800558a:	60bb      	str	r3, [r7, #8]
   return(result);
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	f023 0310 	bic.w	r3, r3, #16
 8005592:	647b      	str	r3, [r7, #68]	; 0x44
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	330c      	adds	r3, #12
 800559a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800559c:	61ba      	str	r2, [r7, #24]
 800559e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055a0:	6979      	ldr	r1, [r7, #20]
 80055a2:	69ba      	ldr	r2, [r7, #24]
 80055a4:	e841 2300 	strex	r3, r2, [r1]
 80055a8:	613b      	str	r3, [r7, #16]
   return(result);
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d1e5      	bne.n	800557c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2220      	movs	r2, #32
 80055b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2200      	movs	r2, #0
 80055bc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80055be:	bf00      	nop
 80055c0:	3754      	adds	r7, #84	; 0x54
 80055c2:	46bd      	mov	sp, r7
 80055c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c8:	4770      	bx	lr

080055ca <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80055ca:	b580      	push	{r7, lr}
 80055cc:	b084      	sub	sp, #16
 80055ce:	af00      	add	r7, sp, #0
 80055d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055d6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	2200      	movs	r2, #0
 80055dc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2200      	movs	r2, #0
 80055e2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80055e4:	68f8      	ldr	r0, [r7, #12]
 80055e6:	f7ff ff3d 	bl	8005464 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80055ea:	bf00      	nop
 80055ec:	3710      	adds	r7, #16
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bd80      	pop	{r7, pc}

080055f2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80055f2:	b480      	push	{r7}
 80055f4:	b085      	sub	sp, #20
 80055f6:	af00      	add	r7, sp, #0
 80055f8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005600:	b2db      	uxtb	r3, r3
 8005602:	2b21      	cmp	r3, #33	; 0x21
 8005604:	d13e      	bne.n	8005684 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	689b      	ldr	r3, [r3, #8]
 800560a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800560e:	d114      	bne.n	800563a <UART_Transmit_IT+0x48>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	691b      	ldr	r3, [r3, #16]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d110      	bne.n	800563a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6a1b      	ldr	r3, [r3, #32]
 800561c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	881b      	ldrh	r3, [r3, #0]
 8005622:	461a      	mov	r2, r3
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800562c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6a1b      	ldr	r3, [r3, #32]
 8005632:	1c9a      	adds	r2, r3, #2
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	621a      	str	r2, [r3, #32]
 8005638:	e008      	b.n	800564c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6a1b      	ldr	r3, [r3, #32]
 800563e:	1c59      	adds	r1, r3, #1
 8005640:	687a      	ldr	r2, [r7, #4]
 8005642:	6211      	str	r1, [r2, #32]
 8005644:	781a      	ldrb	r2, [r3, #0]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005650:	b29b      	uxth	r3, r3
 8005652:	3b01      	subs	r3, #1
 8005654:	b29b      	uxth	r3, r3
 8005656:	687a      	ldr	r2, [r7, #4]
 8005658:	4619      	mov	r1, r3
 800565a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800565c:	2b00      	cmp	r3, #0
 800565e:	d10f      	bne.n	8005680 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	68da      	ldr	r2, [r3, #12]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800566e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	68da      	ldr	r2, [r3, #12]
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800567e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005680:	2300      	movs	r3, #0
 8005682:	e000      	b.n	8005686 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005684:	2302      	movs	r3, #2
  }
}
 8005686:	4618      	mov	r0, r3
 8005688:	3714      	adds	r7, #20
 800568a:	46bd      	mov	sp, r7
 800568c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005690:	4770      	bx	lr

08005692 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005692:	b580      	push	{r7, lr}
 8005694:	b082      	sub	sp, #8
 8005696:	af00      	add	r7, sp, #0
 8005698:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	68da      	ldr	r2, [r3, #12]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056a8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2220      	movs	r2, #32
 80056ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f7ff fec2 	bl	800543c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80056b8:	2300      	movs	r3, #0
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	3708      	adds	r7, #8
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}

080056c2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80056c2:	b580      	push	{r7, lr}
 80056c4:	b08c      	sub	sp, #48	; 0x30
 80056c6:	af00      	add	r7, sp, #0
 80056c8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80056d0:	b2db      	uxtb	r3, r3
 80056d2:	2b22      	cmp	r3, #34	; 0x22
 80056d4:	f040 80ab 	bne.w	800582e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	689b      	ldr	r3, [r3, #8]
 80056dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056e0:	d117      	bne.n	8005712 <UART_Receive_IT+0x50>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	691b      	ldr	r3, [r3, #16]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d113      	bne.n	8005712 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80056ea:	2300      	movs	r3, #0
 80056ec:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056f2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	b29b      	uxth	r3, r3
 80056fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005700:	b29a      	uxth	r2, r3
 8005702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005704:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800570a:	1c9a      	adds	r2, r3, #2
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	629a      	str	r2, [r3, #40]	; 0x28
 8005710:	e026      	b.n	8005760 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005716:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005718:	2300      	movs	r3, #0
 800571a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	689b      	ldr	r3, [r3, #8]
 8005720:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005724:	d007      	beq.n	8005736 <UART_Receive_IT+0x74>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	689b      	ldr	r3, [r3, #8]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d10a      	bne.n	8005744 <UART_Receive_IT+0x82>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	691b      	ldr	r3, [r3, #16]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d106      	bne.n	8005744 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	b2da      	uxtb	r2, r3
 800573e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005740:	701a      	strb	r2, [r3, #0]
 8005742:	e008      	b.n	8005756 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	b2db      	uxtb	r3, r3
 800574c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005750:	b2da      	uxtb	r2, r3
 8005752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005754:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800575a:	1c5a      	adds	r2, r3, #1
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005764:	b29b      	uxth	r3, r3
 8005766:	3b01      	subs	r3, #1
 8005768:	b29b      	uxth	r3, r3
 800576a:	687a      	ldr	r2, [r7, #4]
 800576c:	4619      	mov	r1, r3
 800576e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005770:	2b00      	cmp	r3, #0
 8005772:	d15a      	bne.n	800582a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	68da      	ldr	r2, [r3, #12]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f022 0220 	bic.w	r2, r2, #32
 8005782:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	68da      	ldr	r2, [r3, #12]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005792:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	695a      	ldr	r2, [r3, #20]
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f022 0201 	bic.w	r2, r2, #1
 80057a2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2220      	movs	r2, #32
 80057a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057b0:	2b01      	cmp	r3, #1
 80057b2:	d135      	bne.n	8005820 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2200      	movs	r2, #0
 80057b8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	330c      	adds	r3, #12
 80057c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	e853 3f00 	ldrex	r3, [r3]
 80057c8:	613b      	str	r3, [r7, #16]
   return(result);
 80057ca:	693b      	ldr	r3, [r7, #16]
 80057cc:	f023 0310 	bic.w	r3, r3, #16
 80057d0:	627b      	str	r3, [r7, #36]	; 0x24
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	330c      	adds	r3, #12
 80057d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057da:	623a      	str	r2, [r7, #32]
 80057dc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057de:	69f9      	ldr	r1, [r7, #28]
 80057e0:	6a3a      	ldr	r2, [r7, #32]
 80057e2:	e841 2300 	strex	r3, r2, [r1]
 80057e6:	61bb      	str	r3, [r7, #24]
   return(result);
 80057e8:	69bb      	ldr	r3, [r7, #24]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d1e5      	bne.n	80057ba <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f003 0310 	and.w	r3, r3, #16
 80057f8:	2b10      	cmp	r3, #16
 80057fa:	d10a      	bne.n	8005812 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80057fc:	2300      	movs	r3, #0
 80057fe:	60fb      	str	r3, [r7, #12]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	60fb      	str	r3, [r7, #12]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	60fb      	str	r3, [r7, #12]
 8005810:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005816:	4619      	mov	r1, r3
 8005818:	6878      	ldr	r0, [r7, #4]
 800581a:	f7ff fe2d 	bl	8005478 <HAL_UARTEx_RxEventCallback>
 800581e:	e002      	b.n	8005826 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	f7ff fe15 	bl	8005450 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005826:	2300      	movs	r3, #0
 8005828:	e002      	b.n	8005830 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800582a:	2300      	movs	r3, #0
 800582c:	e000      	b.n	8005830 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800582e:	2302      	movs	r3, #2
  }
}
 8005830:	4618      	mov	r0, r3
 8005832:	3730      	adds	r7, #48	; 0x30
 8005834:	46bd      	mov	sp, r7
 8005836:	bd80      	pop	{r7, pc}

08005838 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800583c:	b09f      	sub	sp, #124	; 0x7c
 800583e:	af00      	add	r7, sp, #0
 8005840:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005842:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	691b      	ldr	r3, [r3, #16]
 8005848:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800584c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800584e:	68d9      	ldr	r1, [r3, #12]
 8005850:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005852:	681a      	ldr	r2, [r3, #0]
 8005854:	ea40 0301 	orr.w	r3, r0, r1
 8005858:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800585a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800585c:	689a      	ldr	r2, [r3, #8]
 800585e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005860:	691b      	ldr	r3, [r3, #16]
 8005862:	431a      	orrs	r2, r3
 8005864:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005866:	695b      	ldr	r3, [r3, #20]
 8005868:	431a      	orrs	r2, r3
 800586a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800586c:	69db      	ldr	r3, [r3, #28]
 800586e:	4313      	orrs	r3, r2
 8005870:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005872:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	68db      	ldr	r3, [r3, #12]
 8005878:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800587c:	f021 010c 	bic.w	r1, r1, #12
 8005880:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005882:	681a      	ldr	r2, [r3, #0]
 8005884:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005886:	430b      	orrs	r3, r1
 8005888:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800588a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	695b      	ldr	r3, [r3, #20]
 8005890:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005894:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005896:	6999      	ldr	r1, [r3, #24]
 8005898:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800589a:	681a      	ldr	r2, [r3, #0]
 800589c:	ea40 0301 	orr.w	r3, r0, r1
 80058a0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80058a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058a4:	681a      	ldr	r2, [r3, #0]
 80058a6:	4bc5      	ldr	r3, [pc, #788]	; (8005bbc <UART_SetConfig+0x384>)
 80058a8:	429a      	cmp	r2, r3
 80058aa:	d004      	beq.n	80058b6 <UART_SetConfig+0x7e>
 80058ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058ae:	681a      	ldr	r2, [r3, #0]
 80058b0:	4bc3      	ldr	r3, [pc, #780]	; (8005bc0 <UART_SetConfig+0x388>)
 80058b2:	429a      	cmp	r2, r3
 80058b4:	d103      	bne.n	80058be <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80058b6:	f7fe fdd5 	bl	8004464 <HAL_RCC_GetPCLK2Freq>
 80058ba:	6778      	str	r0, [r7, #116]	; 0x74
 80058bc:	e002      	b.n	80058c4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80058be:	f7fe fdbd 	bl	800443c <HAL_RCC_GetPCLK1Freq>
 80058c2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80058c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058c6:	69db      	ldr	r3, [r3, #28]
 80058c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058cc:	f040 80b6 	bne.w	8005a3c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80058d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80058d2:	461c      	mov	r4, r3
 80058d4:	f04f 0500 	mov.w	r5, #0
 80058d8:	4622      	mov	r2, r4
 80058da:	462b      	mov	r3, r5
 80058dc:	1891      	adds	r1, r2, r2
 80058de:	6439      	str	r1, [r7, #64]	; 0x40
 80058e0:	415b      	adcs	r3, r3
 80058e2:	647b      	str	r3, [r7, #68]	; 0x44
 80058e4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80058e8:	1912      	adds	r2, r2, r4
 80058ea:	eb45 0303 	adc.w	r3, r5, r3
 80058ee:	f04f 0000 	mov.w	r0, #0
 80058f2:	f04f 0100 	mov.w	r1, #0
 80058f6:	00d9      	lsls	r1, r3, #3
 80058f8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80058fc:	00d0      	lsls	r0, r2, #3
 80058fe:	4602      	mov	r2, r0
 8005900:	460b      	mov	r3, r1
 8005902:	1911      	adds	r1, r2, r4
 8005904:	6639      	str	r1, [r7, #96]	; 0x60
 8005906:	416b      	adcs	r3, r5
 8005908:	667b      	str	r3, [r7, #100]	; 0x64
 800590a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	461a      	mov	r2, r3
 8005910:	f04f 0300 	mov.w	r3, #0
 8005914:	1891      	adds	r1, r2, r2
 8005916:	63b9      	str	r1, [r7, #56]	; 0x38
 8005918:	415b      	adcs	r3, r3
 800591a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800591c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005920:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005924:	f7fb f934 	bl	8000b90 <__aeabi_uldivmod>
 8005928:	4602      	mov	r2, r0
 800592a:	460b      	mov	r3, r1
 800592c:	4ba5      	ldr	r3, [pc, #660]	; (8005bc4 <UART_SetConfig+0x38c>)
 800592e:	fba3 2302 	umull	r2, r3, r3, r2
 8005932:	095b      	lsrs	r3, r3, #5
 8005934:	011e      	lsls	r6, r3, #4
 8005936:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005938:	461c      	mov	r4, r3
 800593a:	f04f 0500 	mov.w	r5, #0
 800593e:	4622      	mov	r2, r4
 8005940:	462b      	mov	r3, r5
 8005942:	1891      	adds	r1, r2, r2
 8005944:	6339      	str	r1, [r7, #48]	; 0x30
 8005946:	415b      	adcs	r3, r3
 8005948:	637b      	str	r3, [r7, #52]	; 0x34
 800594a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800594e:	1912      	adds	r2, r2, r4
 8005950:	eb45 0303 	adc.w	r3, r5, r3
 8005954:	f04f 0000 	mov.w	r0, #0
 8005958:	f04f 0100 	mov.w	r1, #0
 800595c:	00d9      	lsls	r1, r3, #3
 800595e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005962:	00d0      	lsls	r0, r2, #3
 8005964:	4602      	mov	r2, r0
 8005966:	460b      	mov	r3, r1
 8005968:	1911      	adds	r1, r2, r4
 800596a:	65b9      	str	r1, [r7, #88]	; 0x58
 800596c:	416b      	adcs	r3, r5
 800596e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005970:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	461a      	mov	r2, r3
 8005976:	f04f 0300 	mov.w	r3, #0
 800597a:	1891      	adds	r1, r2, r2
 800597c:	62b9      	str	r1, [r7, #40]	; 0x28
 800597e:	415b      	adcs	r3, r3
 8005980:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005982:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005986:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800598a:	f7fb f901 	bl	8000b90 <__aeabi_uldivmod>
 800598e:	4602      	mov	r2, r0
 8005990:	460b      	mov	r3, r1
 8005992:	4b8c      	ldr	r3, [pc, #560]	; (8005bc4 <UART_SetConfig+0x38c>)
 8005994:	fba3 1302 	umull	r1, r3, r3, r2
 8005998:	095b      	lsrs	r3, r3, #5
 800599a:	2164      	movs	r1, #100	; 0x64
 800599c:	fb01 f303 	mul.w	r3, r1, r3
 80059a0:	1ad3      	subs	r3, r2, r3
 80059a2:	00db      	lsls	r3, r3, #3
 80059a4:	3332      	adds	r3, #50	; 0x32
 80059a6:	4a87      	ldr	r2, [pc, #540]	; (8005bc4 <UART_SetConfig+0x38c>)
 80059a8:	fba2 2303 	umull	r2, r3, r2, r3
 80059ac:	095b      	lsrs	r3, r3, #5
 80059ae:	005b      	lsls	r3, r3, #1
 80059b0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80059b4:	441e      	add	r6, r3
 80059b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059b8:	4618      	mov	r0, r3
 80059ba:	f04f 0100 	mov.w	r1, #0
 80059be:	4602      	mov	r2, r0
 80059c0:	460b      	mov	r3, r1
 80059c2:	1894      	adds	r4, r2, r2
 80059c4:	623c      	str	r4, [r7, #32]
 80059c6:	415b      	adcs	r3, r3
 80059c8:	627b      	str	r3, [r7, #36]	; 0x24
 80059ca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80059ce:	1812      	adds	r2, r2, r0
 80059d0:	eb41 0303 	adc.w	r3, r1, r3
 80059d4:	f04f 0400 	mov.w	r4, #0
 80059d8:	f04f 0500 	mov.w	r5, #0
 80059dc:	00dd      	lsls	r5, r3, #3
 80059de:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80059e2:	00d4      	lsls	r4, r2, #3
 80059e4:	4622      	mov	r2, r4
 80059e6:	462b      	mov	r3, r5
 80059e8:	1814      	adds	r4, r2, r0
 80059ea:	653c      	str	r4, [r7, #80]	; 0x50
 80059ec:	414b      	adcs	r3, r1
 80059ee:	657b      	str	r3, [r7, #84]	; 0x54
 80059f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	461a      	mov	r2, r3
 80059f6:	f04f 0300 	mov.w	r3, #0
 80059fa:	1891      	adds	r1, r2, r2
 80059fc:	61b9      	str	r1, [r7, #24]
 80059fe:	415b      	adcs	r3, r3
 8005a00:	61fb      	str	r3, [r7, #28]
 8005a02:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005a06:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005a0a:	f7fb f8c1 	bl	8000b90 <__aeabi_uldivmod>
 8005a0e:	4602      	mov	r2, r0
 8005a10:	460b      	mov	r3, r1
 8005a12:	4b6c      	ldr	r3, [pc, #432]	; (8005bc4 <UART_SetConfig+0x38c>)
 8005a14:	fba3 1302 	umull	r1, r3, r3, r2
 8005a18:	095b      	lsrs	r3, r3, #5
 8005a1a:	2164      	movs	r1, #100	; 0x64
 8005a1c:	fb01 f303 	mul.w	r3, r1, r3
 8005a20:	1ad3      	subs	r3, r2, r3
 8005a22:	00db      	lsls	r3, r3, #3
 8005a24:	3332      	adds	r3, #50	; 0x32
 8005a26:	4a67      	ldr	r2, [pc, #412]	; (8005bc4 <UART_SetConfig+0x38c>)
 8005a28:	fba2 2303 	umull	r2, r3, r2, r3
 8005a2c:	095b      	lsrs	r3, r3, #5
 8005a2e:	f003 0207 	and.w	r2, r3, #7
 8005a32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4432      	add	r2, r6
 8005a38:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005a3a:	e0b9      	b.n	8005bb0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005a3c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a3e:	461c      	mov	r4, r3
 8005a40:	f04f 0500 	mov.w	r5, #0
 8005a44:	4622      	mov	r2, r4
 8005a46:	462b      	mov	r3, r5
 8005a48:	1891      	adds	r1, r2, r2
 8005a4a:	6139      	str	r1, [r7, #16]
 8005a4c:	415b      	adcs	r3, r3
 8005a4e:	617b      	str	r3, [r7, #20]
 8005a50:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005a54:	1912      	adds	r2, r2, r4
 8005a56:	eb45 0303 	adc.w	r3, r5, r3
 8005a5a:	f04f 0000 	mov.w	r0, #0
 8005a5e:	f04f 0100 	mov.w	r1, #0
 8005a62:	00d9      	lsls	r1, r3, #3
 8005a64:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005a68:	00d0      	lsls	r0, r2, #3
 8005a6a:	4602      	mov	r2, r0
 8005a6c:	460b      	mov	r3, r1
 8005a6e:	eb12 0804 	adds.w	r8, r2, r4
 8005a72:	eb43 0905 	adc.w	r9, r3, r5
 8005a76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	f04f 0100 	mov.w	r1, #0
 8005a80:	f04f 0200 	mov.w	r2, #0
 8005a84:	f04f 0300 	mov.w	r3, #0
 8005a88:	008b      	lsls	r3, r1, #2
 8005a8a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005a8e:	0082      	lsls	r2, r0, #2
 8005a90:	4640      	mov	r0, r8
 8005a92:	4649      	mov	r1, r9
 8005a94:	f7fb f87c 	bl	8000b90 <__aeabi_uldivmod>
 8005a98:	4602      	mov	r2, r0
 8005a9a:	460b      	mov	r3, r1
 8005a9c:	4b49      	ldr	r3, [pc, #292]	; (8005bc4 <UART_SetConfig+0x38c>)
 8005a9e:	fba3 2302 	umull	r2, r3, r3, r2
 8005aa2:	095b      	lsrs	r3, r3, #5
 8005aa4:	011e      	lsls	r6, r3, #4
 8005aa6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	f04f 0100 	mov.w	r1, #0
 8005aae:	4602      	mov	r2, r0
 8005ab0:	460b      	mov	r3, r1
 8005ab2:	1894      	adds	r4, r2, r2
 8005ab4:	60bc      	str	r4, [r7, #8]
 8005ab6:	415b      	adcs	r3, r3
 8005ab8:	60fb      	str	r3, [r7, #12]
 8005aba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005abe:	1812      	adds	r2, r2, r0
 8005ac0:	eb41 0303 	adc.w	r3, r1, r3
 8005ac4:	f04f 0400 	mov.w	r4, #0
 8005ac8:	f04f 0500 	mov.w	r5, #0
 8005acc:	00dd      	lsls	r5, r3, #3
 8005ace:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005ad2:	00d4      	lsls	r4, r2, #3
 8005ad4:	4622      	mov	r2, r4
 8005ad6:	462b      	mov	r3, r5
 8005ad8:	1814      	adds	r4, r2, r0
 8005ada:	64bc      	str	r4, [r7, #72]	; 0x48
 8005adc:	414b      	adcs	r3, r1
 8005ade:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ae0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ae2:	685b      	ldr	r3, [r3, #4]
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	f04f 0100 	mov.w	r1, #0
 8005aea:	f04f 0200 	mov.w	r2, #0
 8005aee:	f04f 0300 	mov.w	r3, #0
 8005af2:	008b      	lsls	r3, r1, #2
 8005af4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005af8:	0082      	lsls	r2, r0, #2
 8005afa:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005afe:	f7fb f847 	bl	8000b90 <__aeabi_uldivmod>
 8005b02:	4602      	mov	r2, r0
 8005b04:	460b      	mov	r3, r1
 8005b06:	4b2f      	ldr	r3, [pc, #188]	; (8005bc4 <UART_SetConfig+0x38c>)
 8005b08:	fba3 1302 	umull	r1, r3, r3, r2
 8005b0c:	095b      	lsrs	r3, r3, #5
 8005b0e:	2164      	movs	r1, #100	; 0x64
 8005b10:	fb01 f303 	mul.w	r3, r1, r3
 8005b14:	1ad3      	subs	r3, r2, r3
 8005b16:	011b      	lsls	r3, r3, #4
 8005b18:	3332      	adds	r3, #50	; 0x32
 8005b1a:	4a2a      	ldr	r2, [pc, #168]	; (8005bc4 <UART_SetConfig+0x38c>)
 8005b1c:	fba2 2303 	umull	r2, r3, r2, r3
 8005b20:	095b      	lsrs	r3, r3, #5
 8005b22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005b26:	441e      	add	r6, r3
 8005b28:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	f04f 0100 	mov.w	r1, #0
 8005b30:	4602      	mov	r2, r0
 8005b32:	460b      	mov	r3, r1
 8005b34:	1894      	adds	r4, r2, r2
 8005b36:	603c      	str	r4, [r7, #0]
 8005b38:	415b      	adcs	r3, r3
 8005b3a:	607b      	str	r3, [r7, #4]
 8005b3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b40:	1812      	adds	r2, r2, r0
 8005b42:	eb41 0303 	adc.w	r3, r1, r3
 8005b46:	f04f 0400 	mov.w	r4, #0
 8005b4a:	f04f 0500 	mov.w	r5, #0
 8005b4e:	00dd      	lsls	r5, r3, #3
 8005b50:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005b54:	00d4      	lsls	r4, r2, #3
 8005b56:	4622      	mov	r2, r4
 8005b58:	462b      	mov	r3, r5
 8005b5a:	eb12 0a00 	adds.w	sl, r2, r0
 8005b5e:	eb43 0b01 	adc.w	fp, r3, r1
 8005b62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	4618      	mov	r0, r3
 8005b68:	f04f 0100 	mov.w	r1, #0
 8005b6c:	f04f 0200 	mov.w	r2, #0
 8005b70:	f04f 0300 	mov.w	r3, #0
 8005b74:	008b      	lsls	r3, r1, #2
 8005b76:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005b7a:	0082      	lsls	r2, r0, #2
 8005b7c:	4650      	mov	r0, sl
 8005b7e:	4659      	mov	r1, fp
 8005b80:	f7fb f806 	bl	8000b90 <__aeabi_uldivmod>
 8005b84:	4602      	mov	r2, r0
 8005b86:	460b      	mov	r3, r1
 8005b88:	4b0e      	ldr	r3, [pc, #56]	; (8005bc4 <UART_SetConfig+0x38c>)
 8005b8a:	fba3 1302 	umull	r1, r3, r3, r2
 8005b8e:	095b      	lsrs	r3, r3, #5
 8005b90:	2164      	movs	r1, #100	; 0x64
 8005b92:	fb01 f303 	mul.w	r3, r1, r3
 8005b96:	1ad3      	subs	r3, r2, r3
 8005b98:	011b      	lsls	r3, r3, #4
 8005b9a:	3332      	adds	r3, #50	; 0x32
 8005b9c:	4a09      	ldr	r2, [pc, #36]	; (8005bc4 <UART_SetConfig+0x38c>)
 8005b9e:	fba2 2303 	umull	r2, r3, r2, r3
 8005ba2:	095b      	lsrs	r3, r3, #5
 8005ba4:	f003 020f 	and.w	r2, r3, #15
 8005ba8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4432      	add	r2, r6
 8005bae:	609a      	str	r2, [r3, #8]
}
 8005bb0:	bf00      	nop
 8005bb2:	377c      	adds	r7, #124	; 0x7c
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bba:	bf00      	nop
 8005bbc:	40011000 	.word	0x40011000
 8005bc0:	40011400 	.word	0x40011400
 8005bc4:	51eb851f 	.word	0x51eb851f

08005bc8 <atoi>:
 8005bc8:	220a      	movs	r2, #10
 8005bca:	2100      	movs	r1, #0
 8005bcc:	f000 b8b6 	b.w	8005d3c <strtol>

08005bd0 <__errno>:
 8005bd0:	4b01      	ldr	r3, [pc, #4]	; (8005bd8 <__errno+0x8>)
 8005bd2:	6818      	ldr	r0, [r3, #0]
 8005bd4:	4770      	bx	lr
 8005bd6:	bf00      	nop
 8005bd8:	2000000c 	.word	0x2000000c

08005bdc <__libc_init_array>:
 8005bdc:	b570      	push	{r4, r5, r6, lr}
 8005bde:	4d0d      	ldr	r5, [pc, #52]	; (8005c14 <__libc_init_array+0x38>)
 8005be0:	4c0d      	ldr	r4, [pc, #52]	; (8005c18 <__libc_init_array+0x3c>)
 8005be2:	1b64      	subs	r4, r4, r5
 8005be4:	10a4      	asrs	r4, r4, #2
 8005be6:	2600      	movs	r6, #0
 8005be8:	42a6      	cmp	r6, r4
 8005bea:	d109      	bne.n	8005c00 <__libc_init_array+0x24>
 8005bec:	4d0b      	ldr	r5, [pc, #44]	; (8005c1c <__libc_init_array+0x40>)
 8005bee:	4c0c      	ldr	r4, [pc, #48]	; (8005c20 <__libc_init_array+0x44>)
 8005bf0:	f001 fc24 	bl	800743c <_init>
 8005bf4:	1b64      	subs	r4, r4, r5
 8005bf6:	10a4      	asrs	r4, r4, #2
 8005bf8:	2600      	movs	r6, #0
 8005bfa:	42a6      	cmp	r6, r4
 8005bfc:	d105      	bne.n	8005c0a <__libc_init_array+0x2e>
 8005bfe:	bd70      	pop	{r4, r5, r6, pc}
 8005c00:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c04:	4798      	blx	r3
 8005c06:	3601      	adds	r6, #1
 8005c08:	e7ee      	b.n	8005be8 <__libc_init_array+0xc>
 8005c0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c0e:	4798      	blx	r3
 8005c10:	3601      	adds	r6, #1
 8005c12:	e7f2      	b.n	8005bfa <__libc_init_array+0x1e>
 8005c14:	08007758 	.word	0x08007758
 8005c18:	08007758 	.word	0x08007758
 8005c1c:	08007758 	.word	0x08007758
 8005c20:	0800775c 	.word	0x0800775c

08005c24 <memset>:
 8005c24:	4402      	add	r2, r0
 8005c26:	4603      	mov	r3, r0
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d100      	bne.n	8005c2e <memset+0xa>
 8005c2c:	4770      	bx	lr
 8005c2e:	f803 1b01 	strb.w	r1, [r3], #1
 8005c32:	e7f9      	b.n	8005c28 <memset+0x4>

08005c34 <_strtol_l.isra.0>:
 8005c34:	2b01      	cmp	r3, #1
 8005c36:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c3a:	d001      	beq.n	8005c40 <_strtol_l.isra.0+0xc>
 8005c3c:	2b24      	cmp	r3, #36	; 0x24
 8005c3e:	d906      	bls.n	8005c4e <_strtol_l.isra.0+0x1a>
 8005c40:	f7ff ffc6 	bl	8005bd0 <__errno>
 8005c44:	2316      	movs	r3, #22
 8005c46:	6003      	str	r3, [r0, #0]
 8005c48:	2000      	movs	r0, #0
 8005c4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c4e:	4f3a      	ldr	r7, [pc, #232]	; (8005d38 <_strtol_l.isra.0+0x104>)
 8005c50:	468e      	mov	lr, r1
 8005c52:	4676      	mov	r6, lr
 8005c54:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8005c58:	5de5      	ldrb	r5, [r4, r7]
 8005c5a:	f015 0508 	ands.w	r5, r5, #8
 8005c5e:	d1f8      	bne.n	8005c52 <_strtol_l.isra.0+0x1e>
 8005c60:	2c2d      	cmp	r4, #45	; 0x2d
 8005c62:	d134      	bne.n	8005cce <_strtol_l.isra.0+0x9a>
 8005c64:	f89e 4000 	ldrb.w	r4, [lr]
 8005c68:	f04f 0801 	mov.w	r8, #1
 8005c6c:	f106 0e02 	add.w	lr, r6, #2
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d05c      	beq.n	8005d2e <_strtol_l.isra.0+0xfa>
 8005c74:	2b10      	cmp	r3, #16
 8005c76:	d10c      	bne.n	8005c92 <_strtol_l.isra.0+0x5e>
 8005c78:	2c30      	cmp	r4, #48	; 0x30
 8005c7a:	d10a      	bne.n	8005c92 <_strtol_l.isra.0+0x5e>
 8005c7c:	f89e 4000 	ldrb.w	r4, [lr]
 8005c80:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8005c84:	2c58      	cmp	r4, #88	; 0x58
 8005c86:	d14d      	bne.n	8005d24 <_strtol_l.isra.0+0xf0>
 8005c88:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8005c8c:	2310      	movs	r3, #16
 8005c8e:	f10e 0e02 	add.w	lr, lr, #2
 8005c92:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8005c96:	f10c 3cff 	add.w	ip, ip, #4294967295
 8005c9a:	2600      	movs	r6, #0
 8005c9c:	fbbc f9f3 	udiv	r9, ip, r3
 8005ca0:	4635      	mov	r5, r6
 8005ca2:	fb03 ca19 	mls	sl, r3, r9, ip
 8005ca6:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8005caa:	2f09      	cmp	r7, #9
 8005cac:	d818      	bhi.n	8005ce0 <_strtol_l.isra.0+0xac>
 8005cae:	463c      	mov	r4, r7
 8005cb0:	42a3      	cmp	r3, r4
 8005cb2:	dd24      	ble.n	8005cfe <_strtol_l.isra.0+0xca>
 8005cb4:	2e00      	cmp	r6, #0
 8005cb6:	db1f      	blt.n	8005cf8 <_strtol_l.isra.0+0xc4>
 8005cb8:	45a9      	cmp	r9, r5
 8005cba:	d31d      	bcc.n	8005cf8 <_strtol_l.isra.0+0xc4>
 8005cbc:	d101      	bne.n	8005cc2 <_strtol_l.isra.0+0x8e>
 8005cbe:	45a2      	cmp	sl, r4
 8005cc0:	db1a      	blt.n	8005cf8 <_strtol_l.isra.0+0xc4>
 8005cc2:	fb05 4503 	mla	r5, r5, r3, r4
 8005cc6:	2601      	movs	r6, #1
 8005cc8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8005ccc:	e7eb      	b.n	8005ca6 <_strtol_l.isra.0+0x72>
 8005cce:	2c2b      	cmp	r4, #43	; 0x2b
 8005cd0:	bf08      	it	eq
 8005cd2:	f89e 4000 	ldrbeq.w	r4, [lr]
 8005cd6:	46a8      	mov	r8, r5
 8005cd8:	bf08      	it	eq
 8005cda:	f106 0e02 	addeq.w	lr, r6, #2
 8005cde:	e7c7      	b.n	8005c70 <_strtol_l.isra.0+0x3c>
 8005ce0:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8005ce4:	2f19      	cmp	r7, #25
 8005ce6:	d801      	bhi.n	8005cec <_strtol_l.isra.0+0xb8>
 8005ce8:	3c37      	subs	r4, #55	; 0x37
 8005cea:	e7e1      	b.n	8005cb0 <_strtol_l.isra.0+0x7c>
 8005cec:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8005cf0:	2f19      	cmp	r7, #25
 8005cf2:	d804      	bhi.n	8005cfe <_strtol_l.isra.0+0xca>
 8005cf4:	3c57      	subs	r4, #87	; 0x57
 8005cf6:	e7db      	b.n	8005cb0 <_strtol_l.isra.0+0x7c>
 8005cf8:	f04f 36ff 	mov.w	r6, #4294967295
 8005cfc:	e7e4      	b.n	8005cc8 <_strtol_l.isra.0+0x94>
 8005cfe:	2e00      	cmp	r6, #0
 8005d00:	da05      	bge.n	8005d0e <_strtol_l.isra.0+0xda>
 8005d02:	2322      	movs	r3, #34	; 0x22
 8005d04:	6003      	str	r3, [r0, #0]
 8005d06:	4665      	mov	r5, ip
 8005d08:	b942      	cbnz	r2, 8005d1c <_strtol_l.isra.0+0xe8>
 8005d0a:	4628      	mov	r0, r5
 8005d0c:	e79d      	b.n	8005c4a <_strtol_l.isra.0+0x16>
 8005d0e:	f1b8 0f00 	cmp.w	r8, #0
 8005d12:	d000      	beq.n	8005d16 <_strtol_l.isra.0+0xe2>
 8005d14:	426d      	negs	r5, r5
 8005d16:	2a00      	cmp	r2, #0
 8005d18:	d0f7      	beq.n	8005d0a <_strtol_l.isra.0+0xd6>
 8005d1a:	b10e      	cbz	r6, 8005d20 <_strtol_l.isra.0+0xec>
 8005d1c:	f10e 31ff 	add.w	r1, lr, #4294967295
 8005d20:	6011      	str	r1, [r2, #0]
 8005d22:	e7f2      	b.n	8005d0a <_strtol_l.isra.0+0xd6>
 8005d24:	2430      	movs	r4, #48	; 0x30
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d1b3      	bne.n	8005c92 <_strtol_l.isra.0+0x5e>
 8005d2a:	2308      	movs	r3, #8
 8005d2c:	e7b1      	b.n	8005c92 <_strtol_l.isra.0+0x5e>
 8005d2e:	2c30      	cmp	r4, #48	; 0x30
 8005d30:	d0a4      	beq.n	8005c7c <_strtol_l.isra.0+0x48>
 8005d32:	230a      	movs	r3, #10
 8005d34:	e7ad      	b.n	8005c92 <_strtol_l.isra.0+0x5e>
 8005d36:	bf00      	nop
 8005d38:	08007471 	.word	0x08007471

08005d3c <strtol>:
 8005d3c:	4613      	mov	r3, r2
 8005d3e:	460a      	mov	r2, r1
 8005d40:	4601      	mov	r1, r0
 8005d42:	4802      	ldr	r0, [pc, #8]	; (8005d4c <strtol+0x10>)
 8005d44:	6800      	ldr	r0, [r0, #0]
 8005d46:	f7ff bf75 	b.w	8005c34 <_strtol_l.isra.0>
 8005d4a:	bf00      	nop
 8005d4c:	2000000c 	.word	0x2000000c

08005d50 <sin>:
 8005d50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005d52:	ec53 2b10 	vmov	r2, r3, d0
 8005d56:	4826      	ldr	r0, [pc, #152]	; (8005df0 <sin+0xa0>)
 8005d58:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005d5c:	4281      	cmp	r1, r0
 8005d5e:	dc07      	bgt.n	8005d70 <sin+0x20>
 8005d60:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8005de8 <sin+0x98>
 8005d64:	2000      	movs	r0, #0
 8005d66:	f001 f993 	bl	8007090 <__kernel_sin>
 8005d6a:	ec51 0b10 	vmov	r0, r1, d0
 8005d6e:	e007      	b.n	8005d80 <sin+0x30>
 8005d70:	4820      	ldr	r0, [pc, #128]	; (8005df4 <sin+0xa4>)
 8005d72:	4281      	cmp	r1, r0
 8005d74:	dd09      	ble.n	8005d8a <sin+0x3a>
 8005d76:	ee10 0a10 	vmov	r0, s0
 8005d7a:	4619      	mov	r1, r3
 8005d7c:	f7fa fa28 	bl	80001d0 <__aeabi_dsub>
 8005d80:	ec41 0b10 	vmov	d0, r0, r1
 8005d84:	b005      	add	sp, #20
 8005d86:	f85d fb04 	ldr.w	pc, [sp], #4
 8005d8a:	4668      	mov	r0, sp
 8005d8c:	f000 fab8 	bl	8006300 <__ieee754_rem_pio2>
 8005d90:	f000 0003 	and.w	r0, r0, #3
 8005d94:	2801      	cmp	r0, #1
 8005d96:	d008      	beq.n	8005daa <sin+0x5a>
 8005d98:	2802      	cmp	r0, #2
 8005d9a:	d00d      	beq.n	8005db8 <sin+0x68>
 8005d9c:	b9d0      	cbnz	r0, 8005dd4 <sin+0x84>
 8005d9e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005da2:	ed9d 0b00 	vldr	d0, [sp]
 8005da6:	2001      	movs	r0, #1
 8005da8:	e7dd      	b.n	8005d66 <sin+0x16>
 8005daa:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005dae:	ed9d 0b00 	vldr	d0, [sp]
 8005db2:	f000 fd65 	bl	8006880 <__kernel_cos>
 8005db6:	e7d8      	b.n	8005d6a <sin+0x1a>
 8005db8:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005dbc:	ed9d 0b00 	vldr	d0, [sp]
 8005dc0:	2001      	movs	r0, #1
 8005dc2:	f001 f965 	bl	8007090 <__kernel_sin>
 8005dc6:	ec53 2b10 	vmov	r2, r3, d0
 8005dca:	ee10 0a10 	vmov	r0, s0
 8005dce:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8005dd2:	e7d5      	b.n	8005d80 <sin+0x30>
 8005dd4:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005dd8:	ed9d 0b00 	vldr	d0, [sp]
 8005ddc:	f000 fd50 	bl	8006880 <__kernel_cos>
 8005de0:	e7f1      	b.n	8005dc6 <sin+0x76>
 8005de2:	bf00      	nop
 8005de4:	f3af 8000 	nop.w
	...
 8005df0:	3fe921fb 	.word	0x3fe921fb
 8005df4:	7fefffff 	.word	0x7fefffff

08005df8 <asin>:
 8005df8:	b538      	push	{r3, r4, r5, lr}
 8005dfa:	ed2d 8b02 	vpush	{d8}
 8005dfe:	ec55 4b10 	vmov	r4, r5, d0
 8005e02:	f000 f869 	bl	8005ed8 <__ieee754_asin>
 8005e06:	4b16      	ldr	r3, [pc, #88]	; (8005e60 <asin+0x68>)
 8005e08:	eeb0 8a40 	vmov.f32	s16, s0
 8005e0c:	eef0 8a60 	vmov.f32	s17, s1
 8005e10:	f993 3000 	ldrsb.w	r3, [r3]
 8005e14:	3301      	adds	r3, #1
 8005e16:	d01c      	beq.n	8005e52 <asin+0x5a>
 8005e18:	4622      	mov	r2, r4
 8005e1a:	462b      	mov	r3, r5
 8005e1c:	4620      	mov	r0, r4
 8005e1e:	4629      	mov	r1, r5
 8005e20:	f7fa fe28 	bl	8000a74 <__aeabi_dcmpun>
 8005e24:	b9a8      	cbnz	r0, 8005e52 <asin+0x5a>
 8005e26:	ec45 4b10 	vmov	d0, r4, r5
 8005e2a:	f001 f9ef 	bl	800720c <fabs>
 8005e2e:	4b0d      	ldr	r3, [pc, #52]	; (8005e64 <asin+0x6c>)
 8005e30:	ec51 0b10 	vmov	r0, r1, d0
 8005e34:	2200      	movs	r2, #0
 8005e36:	f7fa fe13 	bl	8000a60 <__aeabi_dcmpgt>
 8005e3a:	b150      	cbz	r0, 8005e52 <asin+0x5a>
 8005e3c:	f7ff fec8 	bl	8005bd0 <__errno>
 8005e40:	ecbd 8b02 	vpop	{d8}
 8005e44:	2321      	movs	r3, #33	; 0x21
 8005e46:	6003      	str	r3, [r0, #0]
 8005e48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005e4c:	4806      	ldr	r0, [pc, #24]	; (8005e68 <asin+0x70>)
 8005e4e:	f001 ba67 	b.w	8007320 <nan>
 8005e52:	eeb0 0a48 	vmov.f32	s0, s16
 8005e56:	eef0 0a68 	vmov.f32	s1, s17
 8005e5a:	ecbd 8b02 	vpop	{d8}
 8005e5e:	bd38      	pop	{r3, r4, r5, pc}
 8005e60:	20000070 	.word	0x20000070
 8005e64:	3ff00000 	.word	0x3ff00000
 8005e68:	08007571 	.word	0x08007571

08005e6c <sqrt>:
 8005e6c:	b538      	push	{r3, r4, r5, lr}
 8005e6e:	ed2d 8b02 	vpush	{d8}
 8005e72:	ec55 4b10 	vmov	r4, r5, d0
 8005e76:	f000 fc4d 	bl	8006714 <__ieee754_sqrt>
 8005e7a:	4b15      	ldr	r3, [pc, #84]	; (8005ed0 <sqrt+0x64>)
 8005e7c:	eeb0 8a40 	vmov.f32	s16, s0
 8005e80:	eef0 8a60 	vmov.f32	s17, s1
 8005e84:	f993 3000 	ldrsb.w	r3, [r3]
 8005e88:	3301      	adds	r3, #1
 8005e8a:	d019      	beq.n	8005ec0 <sqrt+0x54>
 8005e8c:	4622      	mov	r2, r4
 8005e8e:	462b      	mov	r3, r5
 8005e90:	4620      	mov	r0, r4
 8005e92:	4629      	mov	r1, r5
 8005e94:	f7fa fdee 	bl	8000a74 <__aeabi_dcmpun>
 8005e98:	b990      	cbnz	r0, 8005ec0 <sqrt+0x54>
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	4620      	mov	r0, r4
 8005ea0:	4629      	mov	r1, r5
 8005ea2:	f7fa fdbf 	bl	8000a24 <__aeabi_dcmplt>
 8005ea6:	b158      	cbz	r0, 8005ec0 <sqrt+0x54>
 8005ea8:	f7ff fe92 	bl	8005bd0 <__errno>
 8005eac:	2321      	movs	r3, #33	; 0x21
 8005eae:	6003      	str	r3, [r0, #0]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	4610      	mov	r0, r2
 8005eb6:	4619      	mov	r1, r3
 8005eb8:	f7fa fc6c 	bl	8000794 <__aeabi_ddiv>
 8005ebc:	ec41 0b18 	vmov	d8, r0, r1
 8005ec0:	eeb0 0a48 	vmov.f32	s0, s16
 8005ec4:	eef0 0a68 	vmov.f32	s1, s17
 8005ec8:	ecbd 8b02 	vpop	{d8}
 8005ecc:	bd38      	pop	{r3, r4, r5, pc}
 8005ece:	bf00      	nop
 8005ed0:	20000070 	.word	0x20000070
 8005ed4:	00000000 	.word	0x00000000

08005ed8 <__ieee754_asin>:
 8005ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005edc:	ed2d 8b04 	vpush	{d8-d9}
 8005ee0:	ec55 4b10 	vmov	r4, r5, d0
 8005ee4:	4bcc      	ldr	r3, [pc, #816]	; (8006218 <__ieee754_asin+0x340>)
 8005ee6:	b083      	sub	sp, #12
 8005ee8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8005eec:	4598      	cmp	r8, r3
 8005eee:	9501      	str	r5, [sp, #4]
 8005ef0:	dd35      	ble.n	8005f5e <__ieee754_asin+0x86>
 8005ef2:	ee10 3a10 	vmov	r3, s0
 8005ef6:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 8005efa:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 8005efe:	ea58 0303 	orrs.w	r3, r8, r3
 8005f02:	d117      	bne.n	8005f34 <__ieee754_asin+0x5c>
 8005f04:	a3aa      	add	r3, pc, #680	; (adr r3, 80061b0 <__ieee754_asin+0x2d8>)
 8005f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f0a:	ee10 0a10 	vmov	r0, s0
 8005f0e:	4629      	mov	r1, r5
 8005f10:	f7fa fb16 	bl	8000540 <__aeabi_dmul>
 8005f14:	a3a8      	add	r3, pc, #672	; (adr r3, 80061b8 <__ieee754_asin+0x2e0>)
 8005f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f1a:	4606      	mov	r6, r0
 8005f1c:	460f      	mov	r7, r1
 8005f1e:	4620      	mov	r0, r4
 8005f20:	4629      	mov	r1, r5
 8005f22:	f7fa fb0d 	bl	8000540 <__aeabi_dmul>
 8005f26:	4602      	mov	r2, r0
 8005f28:	460b      	mov	r3, r1
 8005f2a:	4630      	mov	r0, r6
 8005f2c:	4639      	mov	r1, r7
 8005f2e:	f7fa f951 	bl	80001d4 <__adddf3>
 8005f32:	e00b      	b.n	8005f4c <__ieee754_asin+0x74>
 8005f34:	ee10 2a10 	vmov	r2, s0
 8005f38:	462b      	mov	r3, r5
 8005f3a:	ee10 0a10 	vmov	r0, s0
 8005f3e:	4629      	mov	r1, r5
 8005f40:	f7fa f946 	bl	80001d0 <__aeabi_dsub>
 8005f44:	4602      	mov	r2, r0
 8005f46:	460b      	mov	r3, r1
 8005f48:	f7fa fc24 	bl	8000794 <__aeabi_ddiv>
 8005f4c:	4604      	mov	r4, r0
 8005f4e:	460d      	mov	r5, r1
 8005f50:	ec45 4b10 	vmov	d0, r4, r5
 8005f54:	b003      	add	sp, #12
 8005f56:	ecbd 8b04 	vpop	{d8-d9}
 8005f5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f5e:	4baf      	ldr	r3, [pc, #700]	; (800621c <__ieee754_asin+0x344>)
 8005f60:	4598      	cmp	r8, r3
 8005f62:	dc11      	bgt.n	8005f88 <__ieee754_asin+0xb0>
 8005f64:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8005f68:	f280 80ae 	bge.w	80060c8 <__ieee754_asin+0x1f0>
 8005f6c:	a394      	add	r3, pc, #592	; (adr r3, 80061c0 <__ieee754_asin+0x2e8>)
 8005f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f72:	ee10 0a10 	vmov	r0, s0
 8005f76:	4629      	mov	r1, r5
 8005f78:	f7fa f92c 	bl	80001d4 <__adddf3>
 8005f7c:	4ba8      	ldr	r3, [pc, #672]	; (8006220 <__ieee754_asin+0x348>)
 8005f7e:	2200      	movs	r2, #0
 8005f80:	f7fa fd6e 	bl	8000a60 <__aeabi_dcmpgt>
 8005f84:	2800      	cmp	r0, #0
 8005f86:	d1e3      	bne.n	8005f50 <__ieee754_asin+0x78>
 8005f88:	ec45 4b10 	vmov	d0, r4, r5
 8005f8c:	f001 f93e 	bl	800720c <fabs>
 8005f90:	49a3      	ldr	r1, [pc, #652]	; (8006220 <__ieee754_asin+0x348>)
 8005f92:	ec53 2b10 	vmov	r2, r3, d0
 8005f96:	2000      	movs	r0, #0
 8005f98:	f7fa f91a 	bl	80001d0 <__aeabi_dsub>
 8005f9c:	4ba1      	ldr	r3, [pc, #644]	; (8006224 <__ieee754_asin+0x34c>)
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	f7fa face 	bl	8000540 <__aeabi_dmul>
 8005fa4:	a388      	add	r3, pc, #544	; (adr r3, 80061c8 <__ieee754_asin+0x2f0>)
 8005fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005faa:	4604      	mov	r4, r0
 8005fac:	460d      	mov	r5, r1
 8005fae:	f7fa fac7 	bl	8000540 <__aeabi_dmul>
 8005fb2:	a387      	add	r3, pc, #540	; (adr r3, 80061d0 <__ieee754_asin+0x2f8>)
 8005fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fb8:	f7fa f90c 	bl	80001d4 <__adddf3>
 8005fbc:	4622      	mov	r2, r4
 8005fbe:	462b      	mov	r3, r5
 8005fc0:	f7fa fabe 	bl	8000540 <__aeabi_dmul>
 8005fc4:	a384      	add	r3, pc, #528	; (adr r3, 80061d8 <__ieee754_asin+0x300>)
 8005fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fca:	f7fa f901 	bl	80001d0 <__aeabi_dsub>
 8005fce:	4622      	mov	r2, r4
 8005fd0:	462b      	mov	r3, r5
 8005fd2:	f7fa fab5 	bl	8000540 <__aeabi_dmul>
 8005fd6:	a382      	add	r3, pc, #520	; (adr r3, 80061e0 <__ieee754_asin+0x308>)
 8005fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fdc:	f7fa f8fa 	bl	80001d4 <__adddf3>
 8005fe0:	4622      	mov	r2, r4
 8005fe2:	462b      	mov	r3, r5
 8005fe4:	f7fa faac 	bl	8000540 <__aeabi_dmul>
 8005fe8:	a37f      	add	r3, pc, #508	; (adr r3, 80061e8 <__ieee754_asin+0x310>)
 8005fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fee:	f7fa f8ef 	bl	80001d0 <__aeabi_dsub>
 8005ff2:	4622      	mov	r2, r4
 8005ff4:	462b      	mov	r3, r5
 8005ff6:	f7fa faa3 	bl	8000540 <__aeabi_dmul>
 8005ffa:	a37d      	add	r3, pc, #500	; (adr r3, 80061f0 <__ieee754_asin+0x318>)
 8005ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006000:	f7fa f8e8 	bl	80001d4 <__adddf3>
 8006004:	4622      	mov	r2, r4
 8006006:	462b      	mov	r3, r5
 8006008:	f7fa fa9a 	bl	8000540 <__aeabi_dmul>
 800600c:	a37a      	add	r3, pc, #488	; (adr r3, 80061f8 <__ieee754_asin+0x320>)
 800600e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006012:	ec41 0b18 	vmov	d8, r0, r1
 8006016:	4620      	mov	r0, r4
 8006018:	4629      	mov	r1, r5
 800601a:	f7fa fa91 	bl	8000540 <__aeabi_dmul>
 800601e:	a378      	add	r3, pc, #480	; (adr r3, 8006200 <__ieee754_asin+0x328>)
 8006020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006024:	f7fa f8d4 	bl	80001d0 <__aeabi_dsub>
 8006028:	4622      	mov	r2, r4
 800602a:	462b      	mov	r3, r5
 800602c:	f7fa fa88 	bl	8000540 <__aeabi_dmul>
 8006030:	a375      	add	r3, pc, #468	; (adr r3, 8006208 <__ieee754_asin+0x330>)
 8006032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006036:	f7fa f8cd 	bl	80001d4 <__adddf3>
 800603a:	4622      	mov	r2, r4
 800603c:	462b      	mov	r3, r5
 800603e:	f7fa fa7f 	bl	8000540 <__aeabi_dmul>
 8006042:	a373      	add	r3, pc, #460	; (adr r3, 8006210 <__ieee754_asin+0x338>)
 8006044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006048:	f7fa f8c2 	bl	80001d0 <__aeabi_dsub>
 800604c:	4622      	mov	r2, r4
 800604e:	462b      	mov	r3, r5
 8006050:	f7fa fa76 	bl	8000540 <__aeabi_dmul>
 8006054:	4b72      	ldr	r3, [pc, #456]	; (8006220 <__ieee754_asin+0x348>)
 8006056:	2200      	movs	r2, #0
 8006058:	f7fa f8bc 	bl	80001d4 <__adddf3>
 800605c:	ec45 4b10 	vmov	d0, r4, r5
 8006060:	4606      	mov	r6, r0
 8006062:	460f      	mov	r7, r1
 8006064:	f000 fb56 	bl	8006714 <__ieee754_sqrt>
 8006068:	4b6f      	ldr	r3, [pc, #444]	; (8006228 <__ieee754_asin+0x350>)
 800606a:	4598      	cmp	r8, r3
 800606c:	ec5b ab10 	vmov	sl, fp, d0
 8006070:	f340 80dc 	ble.w	800622c <__ieee754_asin+0x354>
 8006074:	4632      	mov	r2, r6
 8006076:	463b      	mov	r3, r7
 8006078:	ec51 0b18 	vmov	r0, r1, d8
 800607c:	f7fa fb8a 	bl	8000794 <__aeabi_ddiv>
 8006080:	4652      	mov	r2, sl
 8006082:	465b      	mov	r3, fp
 8006084:	f7fa fa5c 	bl	8000540 <__aeabi_dmul>
 8006088:	4652      	mov	r2, sl
 800608a:	465b      	mov	r3, fp
 800608c:	f7fa f8a2 	bl	80001d4 <__adddf3>
 8006090:	4602      	mov	r2, r0
 8006092:	460b      	mov	r3, r1
 8006094:	f7fa f89e 	bl	80001d4 <__adddf3>
 8006098:	a347      	add	r3, pc, #284	; (adr r3, 80061b8 <__ieee754_asin+0x2e0>)
 800609a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800609e:	f7fa f897 	bl	80001d0 <__aeabi_dsub>
 80060a2:	4602      	mov	r2, r0
 80060a4:	460b      	mov	r3, r1
 80060a6:	a142      	add	r1, pc, #264	; (adr r1, 80061b0 <__ieee754_asin+0x2d8>)
 80060a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80060ac:	f7fa f890 	bl	80001d0 <__aeabi_dsub>
 80060b0:	9b01      	ldr	r3, [sp, #4]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	bfdc      	itt	le
 80060b6:	4602      	movle	r2, r0
 80060b8:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 80060bc:	4604      	mov	r4, r0
 80060be:	460d      	mov	r5, r1
 80060c0:	bfdc      	itt	le
 80060c2:	4614      	movle	r4, r2
 80060c4:	461d      	movle	r5, r3
 80060c6:	e743      	b.n	8005f50 <__ieee754_asin+0x78>
 80060c8:	ee10 2a10 	vmov	r2, s0
 80060cc:	ee10 0a10 	vmov	r0, s0
 80060d0:	462b      	mov	r3, r5
 80060d2:	4629      	mov	r1, r5
 80060d4:	f7fa fa34 	bl	8000540 <__aeabi_dmul>
 80060d8:	a33b      	add	r3, pc, #236	; (adr r3, 80061c8 <__ieee754_asin+0x2f0>)
 80060da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060de:	4606      	mov	r6, r0
 80060e0:	460f      	mov	r7, r1
 80060e2:	f7fa fa2d 	bl	8000540 <__aeabi_dmul>
 80060e6:	a33a      	add	r3, pc, #232	; (adr r3, 80061d0 <__ieee754_asin+0x2f8>)
 80060e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ec:	f7fa f872 	bl	80001d4 <__adddf3>
 80060f0:	4632      	mov	r2, r6
 80060f2:	463b      	mov	r3, r7
 80060f4:	f7fa fa24 	bl	8000540 <__aeabi_dmul>
 80060f8:	a337      	add	r3, pc, #220	; (adr r3, 80061d8 <__ieee754_asin+0x300>)
 80060fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060fe:	f7fa f867 	bl	80001d0 <__aeabi_dsub>
 8006102:	4632      	mov	r2, r6
 8006104:	463b      	mov	r3, r7
 8006106:	f7fa fa1b 	bl	8000540 <__aeabi_dmul>
 800610a:	a335      	add	r3, pc, #212	; (adr r3, 80061e0 <__ieee754_asin+0x308>)
 800610c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006110:	f7fa f860 	bl	80001d4 <__adddf3>
 8006114:	4632      	mov	r2, r6
 8006116:	463b      	mov	r3, r7
 8006118:	f7fa fa12 	bl	8000540 <__aeabi_dmul>
 800611c:	a332      	add	r3, pc, #200	; (adr r3, 80061e8 <__ieee754_asin+0x310>)
 800611e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006122:	f7fa f855 	bl	80001d0 <__aeabi_dsub>
 8006126:	4632      	mov	r2, r6
 8006128:	463b      	mov	r3, r7
 800612a:	f7fa fa09 	bl	8000540 <__aeabi_dmul>
 800612e:	a330      	add	r3, pc, #192	; (adr r3, 80061f0 <__ieee754_asin+0x318>)
 8006130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006134:	f7fa f84e 	bl	80001d4 <__adddf3>
 8006138:	4632      	mov	r2, r6
 800613a:	463b      	mov	r3, r7
 800613c:	f7fa fa00 	bl	8000540 <__aeabi_dmul>
 8006140:	a32d      	add	r3, pc, #180	; (adr r3, 80061f8 <__ieee754_asin+0x320>)
 8006142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006146:	4680      	mov	r8, r0
 8006148:	4689      	mov	r9, r1
 800614a:	4630      	mov	r0, r6
 800614c:	4639      	mov	r1, r7
 800614e:	f7fa f9f7 	bl	8000540 <__aeabi_dmul>
 8006152:	a32b      	add	r3, pc, #172	; (adr r3, 8006200 <__ieee754_asin+0x328>)
 8006154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006158:	f7fa f83a 	bl	80001d0 <__aeabi_dsub>
 800615c:	4632      	mov	r2, r6
 800615e:	463b      	mov	r3, r7
 8006160:	f7fa f9ee 	bl	8000540 <__aeabi_dmul>
 8006164:	a328      	add	r3, pc, #160	; (adr r3, 8006208 <__ieee754_asin+0x330>)
 8006166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800616a:	f7fa f833 	bl	80001d4 <__adddf3>
 800616e:	4632      	mov	r2, r6
 8006170:	463b      	mov	r3, r7
 8006172:	f7fa f9e5 	bl	8000540 <__aeabi_dmul>
 8006176:	a326      	add	r3, pc, #152	; (adr r3, 8006210 <__ieee754_asin+0x338>)
 8006178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800617c:	f7fa f828 	bl	80001d0 <__aeabi_dsub>
 8006180:	4632      	mov	r2, r6
 8006182:	463b      	mov	r3, r7
 8006184:	f7fa f9dc 	bl	8000540 <__aeabi_dmul>
 8006188:	4b25      	ldr	r3, [pc, #148]	; (8006220 <__ieee754_asin+0x348>)
 800618a:	2200      	movs	r2, #0
 800618c:	f7fa f822 	bl	80001d4 <__adddf3>
 8006190:	4602      	mov	r2, r0
 8006192:	460b      	mov	r3, r1
 8006194:	4640      	mov	r0, r8
 8006196:	4649      	mov	r1, r9
 8006198:	f7fa fafc 	bl	8000794 <__aeabi_ddiv>
 800619c:	4622      	mov	r2, r4
 800619e:	462b      	mov	r3, r5
 80061a0:	f7fa f9ce 	bl	8000540 <__aeabi_dmul>
 80061a4:	4602      	mov	r2, r0
 80061a6:	460b      	mov	r3, r1
 80061a8:	4620      	mov	r0, r4
 80061aa:	4629      	mov	r1, r5
 80061ac:	e6bf      	b.n	8005f2e <__ieee754_asin+0x56>
 80061ae:	bf00      	nop
 80061b0:	54442d18 	.word	0x54442d18
 80061b4:	3ff921fb 	.word	0x3ff921fb
 80061b8:	33145c07 	.word	0x33145c07
 80061bc:	3c91a626 	.word	0x3c91a626
 80061c0:	8800759c 	.word	0x8800759c
 80061c4:	7e37e43c 	.word	0x7e37e43c
 80061c8:	0dfdf709 	.word	0x0dfdf709
 80061cc:	3f023de1 	.word	0x3f023de1
 80061d0:	7501b288 	.word	0x7501b288
 80061d4:	3f49efe0 	.word	0x3f49efe0
 80061d8:	b5688f3b 	.word	0xb5688f3b
 80061dc:	3fa48228 	.word	0x3fa48228
 80061e0:	0e884455 	.word	0x0e884455
 80061e4:	3fc9c155 	.word	0x3fc9c155
 80061e8:	03eb6f7d 	.word	0x03eb6f7d
 80061ec:	3fd4d612 	.word	0x3fd4d612
 80061f0:	55555555 	.word	0x55555555
 80061f4:	3fc55555 	.word	0x3fc55555
 80061f8:	b12e9282 	.word	0xb12e9282
 80061fc:	3fb3b8c5 	.word	0x3fb3b8c5
 8006200:	1b8d0159 	.word	0x1b8d0159
 8006204:	3fe6066c 	.word	0x3fe6066c
 8006208:	9c598ac8 	.word	0x9c598ac8
 800620c:	40002ae5 	.word	0x40002ae5
 8006210:	1c8a2d4b 	.word	0x1c8a2d4b
 8006214:	40033a27 	.word	0x40033a27
 8006218:	3fefffff 	.word	0x3fefffff
 800621c:	3fdfffff 	.word	0x3fdfffff
 8006220:	3ff00000 	.word	0x3ff00000
 8006224:	3fe00000 	.word	0x3fe00000
 8006228:	3fef3332 	.word	0x3fef3332
 800622c:	ee10 2a10 	vmov	r2, s0
 8006230:	ee10 0a10 	vmov	r0, s0
 8006234:	465b      	mov	r3, fp
 8006236:	4659      	mov	r1, fp
 8006238:	f7f9 ffcc 	bl	80001d4 <__adddf3>
 800623c:	4632      	mov	r2, r6
 800623e:	463b      	mov	r3, r7
 8006240:	ec41 0b19 	vmov	d9, r0, r1
 8006244:	ec51 0b18 	vmov	r0, r1, d8
 8006248:	f7fa faa4 	bl	8000794 <__aeabi_ddiv>
 800624c:	4602      	mov	r2, r0
 800624e:	460b      	mov	r3, r1
 8006250:	ec51 0b19 	vmov	r0, r1, d9
 8006254:	f7fa f974 	bl	8000540 <__aeabi_dmul>
 8006258:	f04f 0800 	mov.w	r8, #0
 800625c:	4606      	mov	r6, r0
 800625e:	460f      	mov	r7, r1
 8006260:	4642      	mov	r2, r8
 8006262:	465b      	mov	r3, fp
 8006264:	4640      	mov	r0, r8
 8006266:	4659      	mov	r1, fp
 8006268:	f7fa f96a 	bl	8000540 <__aeabi_dmul>
 800626c:	4602      	mov	r2, r0
 800626e:	460b      	mov	r3, r1
 8006270:	4620      	mov	r0, r4
 8006272:	4629      	mov	r1, r5
 8006274:	f7f9 ffac 	bl	80001d0 <__aeabi_dsub>
 8006278:	4642      	mov	r2, r8
 800627a:	4604      	mov	r4, r0
 800627c:	460d      	mov	r5, r1
 800627e:	465b      	mov	r3, fp
 8006280:	4650      	mov	r0, sl
 8006282:	4659      	mov	r1, fp
 8006284:	f7f9 ffa6 	bl	80001d4 <__adddf3>
 8006288:	4602      	mov	r2, r0
 800628a:	460b      	mov	r3, r1
 800628c:	4620      	mov	r0, r4
 800628e:	4629      	mov	r1, r5
 8006290:	f7fa fa80 	bl	8000794 <__aeabi_ddiv>
 8006294:	4602      	mov	r2, r0
 8006296:	460b      	mov	r3, r1
 8006298:	f7f9 ff9c 	bl	80001d4 <__adddf3>
 800629c:	4602      	mov	r2, r0
 800629e:	460b      	mov	r3, r1
 80062a0:	a113      	add	r1, pc, #76	; (adr r1, 80062f0 <__ieee754_asin+0x418>)
 80062a2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80062a6:	f7f9 ff93 	bl	80001d0 <__aeabi_dsub>
 80062aa:	4602      	mov	r2, r0
 80062ac:	460b      	mov	r3, r1
 80062ae:	4630      	mov	r0, r6
 80062b0:	4639      	mov	r1, r7
 80062b2:	f7f9 ff8d 	bl	80001d0 <__aeabi_dsub>
 80062b6:	4642      	mov	r2, r8
 80062b8:	4604      	mov	r4, r0
 80062ba:	460d      	mov	r5, r1
 80062bc:	465b      	mov	r3, fp
 80062be:	4640      	mov	r0, r8
 80062c0:	4659      	mov	r1, fp
 80062c2:	f7f9 ff87 	bl	80001d4 <__adddf3>
 80062c6:	4602      	mov	r2, r0
 80062c8:	460b      	mov	r3, r1
 80062ca:	a10b      	add	r1, pc, #44	; (adr r1, 80062f8 <__ieee754_asin+0x420>)
 80062cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80062d0:	f7f9 ff7e 	bl	80001d0 <__aeabi_dsub>
 80062d4:	4602      	mov	r2, r0
 80062d6:	460b      	mov	r3, r1
 80062d8:	4620      	mov	r0, r4
 80062da:	4629      	mov	r1, r5
 80062dc:	f7f9 ff78 	bl	80001d0 <__aeabi_dsub>
 80062e0:	4602      	mov	r2, r0
 80062e2:	460b      	mov	r3, r1
 80062e4:	a104      	add	r1, pc, #16	; (adr r1, 80062f8 <__ieee754_asin+0x420>)
 80062e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80062ea:	e6df      	b.n	80060ac <__ieee754_asin+0x1d4>
 80062ec:	f3af 8000 	nop.w
 80062f0:	33145c07 	.word	0x33145c07
 80062f4:	3c91a626 	.word	0x3c91a626
 80062f8:	54442d18 	.word	0x54442d18
 80062fc:	3fe921fb 	.word	0x3fe921fb

08006300 <__ieee754_rem_pio2>:
 8006300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006304:	ed2d 8b02 	vpush	{d8}
 8006308:	ec55 4b10 	vmov	r4, r5, d0
 800630c:	4bca      	ldr	r3, [pc, #808]	; (8006638 <__ieee754_rem_pio2+0x338>)
 800630e:	b08b      	sub	sp, #44	; 0x2c
 8006310:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8006314:	4598      	cmp	r8, r3
 8006316:	4682      	mov	sl, r0
 8006318:	9502      	str	r5, [sp, #8]
 800631a:	dc08      	bgt.n	800632e <__ieee754_rem_pio2+0x2e>
 800631c:	2200      	movs	r2, #0
 800631e:	2300      	movs	r3, #0
 8006320:	ed80 0b00 	vstr	d0, [r0]
 8006324:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8006328:	f04f 0b00 	mov.w	fp, #0
 800632c:	e028      	b.n	8006380 <__ieee754_rem_pio2+0x80>
 800632e:	4bc3      	ldr	r3, [pc, #780]	; (800663c <__ieee754_rem_pio2+0x33c>)
 8006330:	4598      	cmp	r8, r3
 8006332:	dc78      	bgt.n	8006426 <__ieee754_rem_pio2+0x126>
 8006334:	9b02      	ldr	r3, [sp, #8]
 8006336:	4ec2      	ldr	r6, [pc, #776]	; (8006640 <__ieee754_rem_pio2+0x340>)
 8006338:	2b00      	cmp	r3, #0
 800633a:	ee10 0a10 	vmov	r0, s0
 800633e:	a3b0      	add	r3, pc, #704	; (adr r3, 8006600 <__ieee754_rem_pio2+0x300>)
 8006340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006344:	4629      	mov	r1, r5
 8006346:	dd39      	ble.n	80063bc <__ieee754_rem_pio2+0xbc>
 8006348:	f7f9 ff42 	bl	80001d0 <__aeabi_dsub>
 800634c:	45b0      	cmp	r8, r6
 800634e:	4604      	mov	r4, r0
 8006350:	460d      	mov	r5, r1
 8006352:	d01b      	beq.n	800638c <__ieee754_rem_pio2+0x8c>
 8006354:	a3ac      	add	r3, pc, #688	; (adr r3, 8006608 <__ieee754_rem_pio2+0x308>)
 8006356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800635a:	f7f9 ff39 	bl	80001d0 <__aeabi_dsub>
 800635e:	4602      	mov	r2, r0
 8006360:	460b      	mov	r3, r1
 8006362:	e9ca 2300 	strd	r2, r3, [sl]
 8006366:	4620      	mov	r0, r4
 8006368:	4629      	mov	r1, r5
 800636a:	f7f9 ff31 	bl	80001d0 <__aeabi_dsub>
 800636e:	a3a6      	add	r3, pc, #664	; (adr r3, 8006608 <__ieee754_rem_pio2+0x308>)
 8006370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006374:	f7f9 ff2c 	bl	80001d0 <__aeabi_dsub>
 8006378:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800637c:	f04f 0b01 	mov.w	fp, #1
 8006380:	4658      	mov	r0, fp
 8006382:	b00b      	add	sp, #44	; 0x2c
 8006384:	ecbd 8b02 	vpop	{d8}
 8006388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800638c:	a3a0      	add	r3, pc, #640	; (adr r3, 8006610 <__ieee754_rem_pio2+0x310>)
 800638e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006392:	f7f9 ff1d 	bl	80001d0 <__aeabi_dsub>
 8006396:	a3a0      	add	r3, pc, #640	; (adr r3, 8006618 <__ieee754_rem_pio2+0x318>)
 8006398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800639c:	4604      	mov	r4, r0
 800639e:	460d      	mov	r5, r1
 80063a0:	f7f9 ff16 	bl	80001d0 <__aeabi_dsub>
 80063a4:	4602      	mov	r2, r0
 80063a6:	460b      	mov	r3, r1
 80063a8:	e9ca 2300 	strd	r2, r3, [sl]
 80063ac:	4620      	mov	r0, r4
 80063ae:	4629      	mov	r1, r5
 80063b0:	f7f9 ff0e 	bl	80001d0 <__aeabi_dsub>
 80063b4:	a398      	add	r3, pc, #608	; (adr r3, 8006618 <__ieee754_rem_pio2+0x318>)
 80063b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063ba:	e7db      	b.n	8006374 <__ieee754_rem_pio2+0x74>
 80063bc:	f7f9 ff0a 	bl	80001d4 <__adddf3>
 80063c0:	45b0      	cmp	r8, r6
 80063c2:	4604      	mov	r4, r0
 80063c4:	460d      	mov	r5, r1
 80063c6:	d016      	beq.n	80063f6 <__ieee754_rem_pio2+0xf6>
 80063c8:	a38f      	add	r3, pc, #572	; (adr r3, 8006608 <__ieee754_rem_pio2+0x308>)
 80063ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063ce:	f7f9 ff01 	bl	80001d4 <__adddf3>
 80063d2:	4602      	mov	r2, r0
 80063d4:	460b      	mov	r3, r1
 80063d6:	e9ca 2300 	strd	r2, r3, [sl]
 80063da:	4620      	mov	r0, r4
 80063dc:	4629      	mov	r1, r5
 80063de:	f7f9 fef7 	bl	80001d0 <__aeabi_dsub>
 80063e2:	a389      	add	r3, pc, #548	; (adr r3, 8006608 <__ieee754_rem_pio2+0x308>)
 80063e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063e8:	f7f9 fef4 	bl	80001d4 <__adddf3>
 80063ec:	f04f 3bff 	mov.w	fp, #4294967295
 80063f0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80063f4:	e7c4      	b.n	8006380 <__ieee754_rem_pio2+0x80>
 80063f6:	a386      	add	r3, pc, #536	; (adr r3, 8006610 <__ieee754_rem_pio2+0x310>)
 80063f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063fc:	f7f9 feea 	bl	80001d4 <__adddf3>
 8006400:	a385      	add	r3, pc, #532	; (adr r3, 8006618 <__ieee754_rem_pio2+0x318>)
 8006402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006406:	4604      	mov	r4, r0
 8006408:	460d      	mov	r5, r1
 800640a:	f7f9 fee3 	bl	80001d4 <__adddf3>
 800640e:	4602      	mov	r2, r0
 8006410:	460b      	mov	r3, r1
 8006412:	e9ca 2300 	strd	r2, r3, [sl]
 8006416:	4620      	mov	r0, r4
 8006418:	4629      	mov	r1, r5
 800641a:	f7f9 fed9 	bl	80001d0 <__aeabi_dsub>
 800641e:	a37e      	add	r3, pc, #504	; (adr r3, 8006618 <__ieee754_rem_pio2+0x318>)
 8006420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006424:	e7e0      	b.n	80063e8 <__ieee754_rem_pio2+0xe8>
 8006426:	4b87      	ldr	r3, [pc, #540]	; (8006644 <__ieee754_rem_pio2+0x344>)
 8006428:	4598      	cmp	r8, r3
 800642a:	f300 80d9 	bgt.w	80065e0 <__ieee754_rem_pio2+0x2e0>
 800642e:	f000 feed 	bl	800720c <fabs>
 8006432:	ec55 4b10 	vmov	r4, r5, d0
 8006436:	ee10 0a10 	vmov	r0, s0
 800643a:	a379      	add	r3, pc, #484	; (adr r3, 8006620 <__ieee754_rem_pio2+0x320>)
 800643c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006440:	4629      	mov	r1, r5
 8006442:	f7fa f87d 	bl	8000540 <__aeabi_dmul>
 8006446:	4b80      	ldr	r3, [pc, #512]	; (8006648 <__ieee754_rem_pio2+0x348>)
 8006448:	2200      	movs	r2, #0
 800644a:	f7f9 fec3 	bl	80001d4 <__adddf3>
 800644e:	f7fa fb27 	bl	8000aa0 <__aeabi_d2iz>
 8006452:	4683      	mov	fp, r0
 8006454:	f7fa f80a 	bl	800046c <__aeabi_i2d>
 8006458:	4602      	mov	r2, r0
 800645a:	460b      	mov	r3, r1
 800645c:	ec43 2b18 	vmov	d8, r2, r3
 8006460:	a367      	add	r3, pc, #412	; (adr r3, 8006600 <__ieee754_rem_pio2+0x300>)
 8006462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006466:	f7fa f86b 	bl	8000540 <__aeabi_dmul>
 800646a:	4602      	mov	r2, r0
 800646c:	460b      	mov	r3, r1
 800646e:	4620      	mov	r0, r4
 8006470:	4629      	mov	r1, r5
 8006472:	f7f9 fead 	bl	80001d0 <__aeabi_dsub>
 8006476:	a364      	add	r3, pc, #400	; (adr r3, 8006608 <__ieee754_rem_pio2+0x308>)
 8006478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800647c:	4606      	mov	r6, r0
 800647e:	460f      	mov	r7, r1
 8006480:	ec51 0b18 	vmov	r0, r1, d8
 8006484:	f7fa f85c 	bl	8000540 <__aeabi_dmul>
 8006488:	f1bb 0f1f 	cmp.w	fp, #31
 800648c:	4604      	mov	r4, r0
 800648e:	460d      	mov	r5, r1
 8006490:	dc0d      	bgt.n	80064ae <__ieee754_rem_pio2+0x1ae>
 8006492:	4b6e      	ldr	r3, [pc, #440]	; (800664c <__ieee754_rem_pio2+0x34c>)
 8006494:	f10b 32ff 	add.w	r2, fp, #4294967295
 8006498:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800649c:	4543      	cmp	r3, r8
 800649e:	d006      	beq.n	80064ae <__ieee754_rem_pio2+0x1ae>
 80064a0:	4622      	mov	r2, r4
 80064a2:	462b      	mov	r3, r5
 80064a4:	4630      	mov	r0, r6
 80064a6:	4639      	mov	r1, r7
 80064a8:	f7f9 fe92 	bl	80001d0 <__aeabi_dsub>
 80064ac:	e00f      	b.n	80064ce <__ieee754_rem_pio2+0x1ce>
 80064ae:	462b      	mov	r3, r5
 80064b0:	4622      	mov	r2, r4
 80064b2:	4630      	mov	r0, r6
 80064b4:	4639      	mov	r1, r7
 80064b6:	f7f9 fe8b 	bl	80001d0 <__aeabi_dsub>
 80064ba:	ea4f 5328 	mov.w	r3, r8, asr #20
 80064be:	9303      	str	r3, [sp, #12]
 80064c0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80064c4:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 80064c8:	f1b8 0f10 	cmp.w	r8, #16
 80064cc:	dc02      	bgt.n	80064d4 <__ieee754_rem_pio2+0x1d4>
 80064ce:	e9ca 0100 	strd	r0, r1, [sl]
 80064d2:	e039      	b.n	8006548 <__ieee754_rem_pio2+0x248>
 80064d4:	a34e      	add	r3, pc, #312	; (adr r3, 8006610 <__ieee754_rem_pio2+0x310>)
 80064d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064da:	ec51 0b18 	vmov	r0, r1, d8
 80064de:	f7fa f82f 	bl	8000540 <__aeabi_dmul>
 80064e2:	4604      	mov	r4, r0
 80064e4:	460d      	mov	r5, r1
 80064e6:	4602      	mov	r2, r0
 80064e8:	460b      	mov	r3, r1
 80064ea:	4630      	mov	r0, r6
 80064ec:	4639      	mov	r1, r7
 80064ee:	f7f9 fe6f 	bl	80001d0 <__aeabi_dsub>
 80064f2:	4602      	mov	r2, r0
 80064f4:	460b      	mov	r3, r1
 80064f6:	4680      	mov	r8, r0
 80064f8:	4689      	mov	r9, r1
 80064fa:	4630      	mov	r0, r6
 80064fc:	4639      	mov	r1, r7
 80064fe:	f7f9 fe67 	bl	80001d0 <__aeabi_dsub>
 8006502:	4622      	mov	r2, r4
 8006504:	462b      	mov	r3, r5
 8006506:	f7f9 fe63 	bl	80001d0 <__aeabi_dsub>
 800650a:	a343      	add	r3, pc, #268	; (adr r3, 8006618 <__ieee754_rem_pio2+0x318>)
 800650c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006510:	4604      	mov	r4, r0
 8006512:	460d      	mov	r5, r1
 8006514:	ec51 0b18 	vmov	r0, r1, d8
 8006518:	f7fa f812 	bl	8000540 <__aeabi_dmul>
 800651c:	4622      	mov	r2, r4
 800651e:	462b      	mov	r3, r5
 8006520:	f7f9 fe56 	bl	80001d0 <__aeabi_dsub>
 8006524:	4602      	mov	r2, r0
 8006526:	460b      	mov	r3, r1
 8006528:	4604      	mov	r4, r0
 800652a:	460d      	mov	r5, r1
 800652c:	4640      	mov	r0, r8
 800652e:	4649      	mov	r1, r9
 8006530:	f7f9 fe4e 	bl	80001d0 <__aeabi_dsub>
 8006534:	9a03      	ldr	r2, [sp, #12]
 8006536:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800653a:	1ad3      	subs	r3, r2, r3
 800653c:	2b31      	cmp	r3, #49	; 0x31
 800653e:	dc24      	bgt.n	800658a <__ieee754_rem_pio2+0x28a>
 8006540:	e9ca 0100 	strd	r0, r1, [sl]
 8006544:	4646      	mov	r6, r8
 8006546:	464f      	mov	r7, r9
 8006548:	e9da 8900 	ldrd	r8, r9, [sl]
 800654c:	4630      	mov	r0, r6
 800654e:	4642      	mov	r2, r8
 8006550:	464b      	mov	r3, r9
 8006552:	4639      	mov	r1, r7
 8006554:	f7f9 fe3c 	bl	80001d0 <__aeabi_dsub>
 8006558:	462b      	mov	r3, r5
 800655a:	4622      	mov	r2, r4
 800655c:	f7f9 fe38 	bl	80001d0 <__aeabi_dsub>
 8006560:	9b02      	ldr	r3, [sp, #8]
 8006562:	2b00      	cmp	r3, #0
 8006564:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006568:	f6bf af0a 	bge.w	8006380 <__ieee754_rem_pio2+0x80>
 800656c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006570:	f8ca 3004 	str.w	r3, [sl, #4]
 8006574:	f8ca 8000 	str.w	r8, [sl]
 8006578:	f8ca 0008 	str.w	r0, [sl, #8]
 800657c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006580:	f8ca 300c 	str.w	r3, [sl, #12]
 8006584:	f1cb 0b00 	rsb	fp, fp, #0
 8006588:	e6fa      	b.n	8006380 <__ieee754_rem_pio2+0x80>
 800658a:	a327      	add	r3, pc, #156	; (adr r3, 8006628 <__ieee754_rem_pio2+0x328>)
 800658c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006590:	ec51 0b18 	vmov	r0, r1, d8
 8006594:	f7f9 ffd4 	bl	8000540 <__aeabi_dmul>
 8006598:	4604      	mov	r4, r0
 800659a:	460d      	mov	r5, r1
 800659c:	4602      	mov	r2, r0
 800659e:	460b      	mov	r3, r1
 80065a0:	4640      	mov	r0, r8
 80065a2:	4649      	mov	r1, r9
 80065a4:	f7f9 fe14 	bl	80001d0 <__aeabi_dsub>
 80065a8:	4602      	mov	r2, r0
 80065aa:	460b      	mov	r3, r1
 80065ac:	4606      	mov	r6, r0
 80065ae:	460f      	mov	r7, r1
 80065b0:	4640      	mov	r0, r8
 80065b2:	4649      	mov	r1, r9
 80065b4:	f7f9 fe0c 	bl	80001d0 <__aeabi_dsub>
 80065b8:	4622      	mov	r2, r4
 80065ba:	462b      	mov	r3, r5
 80065bc:	f7f9 fe08 	bl	80001d0 <__aeabi_dsub>
 80065c0:	a31b      	add	r3, pc, #108	; (adr r3, 8006630 <__ieee754_rem_pio2+0x330>)
 80065c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065c6:	4604      	mov	r4, r0
 80065c8:	460d      	mov	r5, r1
 80065ca:	ec51 0b18 	vmov	r0, r1, d8
 80065ce:	f7f9 ffb7 	bl	8000540 <__aeabi_dmul>
 80065d2:	4622      	mov	r2, r4
 80065d4:	462b      	mov	r3, r5
 80065d6:	f7f9 fdfb 	bl	80001d0 <__aeabi_dsub>
 80065da:	4604      	mov	r4, r0
 80065dc:	460d      	mov	r5, r1
 80065de:	e75f      	b.n	80064a0 <__ieee754_rem_pio2+0x1a0>
 80065e0:	4b1b      	ldr	r3, [pc, #108]	; (8006650 <__ieee754_rem_pio2+0x350>)
 80065e2:	4598      	cmp	r8, r3
 80065e4:	dd36      	ble.n	8006654 <__ieee754_rem_pio2+0x354>
 80065e6:	ee10 2a10 	vmov	r2, s0
 80065ea:	462b      	mov	r3, r5
 80065ec:	4620      	mov	r0, r4
 80065ee:	4629      	mov	r1, r5
 80065f0:	f7f9 fdee 	bl	80001d0 <__aeabi_dsub>
 80065f4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80065f8:	e9ca 0100 	strd	r0, r1, [sl]
 80065fc:	e694      	b.n	8006328 <__ieee754_rem_pio2+0x28>
 80065fe:	bf00      	nop
 8006600:	54400000 	.word	0x54400000
 8006604:	3ff921fb 	.word	0x3ff921fb
 8006608:	1a626331 	.word	0x1a626331
 800660c:	3dd0b461 	.word	0x3dd0b461
 8006610:	1a600000 	.word	0x1a600000
 8006614:	3dd0b461 	.word	0x3dd0b461
 8006618:	2e037073 	.word	0x2e037073
 800661c:	3ba3198a 	.word	0x3ba3198a
 8006620:	6dc9c883 	.word	0x6dc9c883
 8006624:	3fe45f30 	.word	0x3fe45f30
 8006628:	2e000000 	.word	0x2e000000
 800662c:	3ba3198a 	.word	0x3ba3198a
 8006630:	252049c1 	.word	0x252049c1
 8006634:	397b839a 	.word	0x397b839a
 8006638:	3fe921fb 	.word	0x3fe921fb
 800663c:	4002d97b 	.word	0x4002d97b
 8006640:	3ff921fb 	.word	0x3ff921fb
 8006644:	413921fb 	.word	0x413921fb
 8006648:	3fe00000 	.word	0x3fe00000
 800664c:	08007574 	.word	0x08007574
 8006650:	7fefffff 	.word	0x7fefffff
 8006654:	ea4f 5428 	mov.w	r4, r8, asr #20
 8006658:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800665c:	ee10 0a10 	vmov	r0, s0
 8006660:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8006664:	ee10 6a10 	vmov	r6, s0
 8006668:	460f      	mov	r7, r1
 800666a:	f7fa fa19 	bl	8000aa0 <__aeabi_d2iz>
 800666e:	f7f9 fefd 	bl	800046c <__aeabi_i2d>
 8006672:	4602      	mov	r2, r0
 8006674:	460b      	mov	r3, r1
 8006676:	4630      	mov	r0, r6
 8006678:	4639      	mov	r1, r7
 800667a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800667e:	f7f9 fda7 	bl	80001d0 <__aeabi_dsub>
 8006682:	4b22      	ldr	r3, [pc, #136]	; (800670c <__ieee754_rem_pio2+0x40c>)
 8006684:	2200      	movs	r2, #0
 8006686:	f7f9 ff5b 	bl	8000540 <__aeabi_dmul>
 800668a:	460f      	mov	r7, r1
 800668c:	4606      	mov	r6, r0
 800668e:	f7fa fa07 	bl	8000aa0 <__aeabi_d2iz>
 8006692:	f7f9 feeb 	bl	800046c <__aeabi_i2d>
 8006696:	4602      	mov	r2, r0
 8006698:	460b      	mov	r3, r1
 800669a:	4630      	mov	r0, r6
 800669c:	4639      	mov	r1, r7
 800669e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80066a2:	f7f9 fd95 	bl	80001d0 <__aeabi_dsub>
 80066a6:	4b19      	ldr	r3, [pc, #100]	; (800670c <__ieee754_rem_pio2+0x40c>)
 80066a8:	2200      	movs	r2, #0
 80066aa:	f7f9 ff49 	bl	8000540 <__aeabi_dmul>
 80066ae:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80066b2:	ad04      	add	r5, sp, #16
 80066b4:	f04f 0803 	mov.w	r8, #3
 80066b8:	46a9      	mov	r9, r5
 80066ba:	2600      	movs	r6, #0
 80066bc:	2700      	movs	r7, #0
 80066be:	4632      	mov	r2, r6
 80066c0:	463b      	mov	r3, r7
 80066c2:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80066c6:	46c3      	mov	fp, r8
 80066c8:	3d08      	subs	r5, #8
 80066ca:	f108 38ff 	add.w	r8, r8, #4294967295
 80066ce:	f7fa f99f 	bl	8000a10 <__aeabi_dcmpeq>
 80066d2:	2800      	cmp	r0, #0
 80066d4:	d1f3      	bne.n	80066be <__ieee754_rem_pio2+0x3be>
 80066d6:	4b0e      	ldr	r3, [pc, #56]	; (8006710 <__ieee754_rem_pio2+0x410>)
 80066d8:	9301      	str	r3, [sp, #4]
 80066da:	2302      	movs	r3, #2
 80066dc:	9300      	str	r3, [sp, #0]
 80066de:	4622      	mov	r2, r4
 80066e0:	465b      	mov	r3, fp
 80066e2:	4651      	mov	r1, sl
 80066e4:	4648      	mov	r0, r9
 80066e6:	f000 f993 	bl	8006a10 <__kernel_rem_pio2>
 80066ea:	9b02      	ldr	r3, [sp, #8]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	4683      	mov	fp, r0
 80066f0:	f6bf ae46 	bge.w	8006380 <__ieee754_rem_pio2+0x80>
 80066f4:	f8da 3004 	ldr.w	r3, [sl, #4]
 80066f8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80066fc:	f8ca 3004 	str.w	r3, [sl, #4]
 8006700:	f8da 300c 	ldr.w	r3, [sl, #12]
 8006704:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006708:	e73a      	b.n	8006580 <__ieee754_rem_pio2+0x280>
 800670a:	bf00      	nop
 800670c:	41700000 	.word	0x41700000
 8006710:	080075f4 	.word	0x080075f4

08006714 <__ieee754_sqrt>:
 8006714:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006718:	ec55 4b10 	vmov	r4, r5, d0
 800671c:	4e56      	ldr	r6, [pc, #344]	; (8006878 <__ieee754_sqrt+0x164>)
 800671e:	43ae      	bics	r6, r5
 8006720:	ee10 0a10 	vmov	r0, s0
 8006724:	ee10 3a10 	vmov	r3, s0
 8006728:	4629      	mov	r1, r5
 800672a:	462a      	mov	r2, r5
 800672c:	d110      	bne.n	8006750 <__ieee754_sqrt+0x3c>
 800672e:	ee10 2a10 	vmov	r2, s0
 8006732:	462b      	mov	r3, r5
 8006734:	f7f9 ff04 	bl	8000540 <__aeabi_dmul>
 8006738:	4602      	mov	r2, r0
 800673a:	460b      	mov	r3, r1
 800673c:	4620      	mov	r0, r4
 800673e:	4629      	mov	r1, r5
 8006740:	f7f9 fd48 	bl	80001d4 <__adddf3>
 8006744:	4604      	mov	r4, r0
 8006746:	460d      	mov	r5, r1
 8006748:	ec45 4b10 	vmov	d0, r4, r5
 800674c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006750:	2d00      	cmp	r5, #0
 8006752:	dc10      	bgt.n	8006776 <__ieee754_sqrt+0x62>
 8006754:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8006758:	4330      	orrs	r0, r6
 800675a:	d0f5      	beq.n	8006748 <__ieee754_sqrt+0x34>
 800675c:	b15d      	cbz	r5, 8006776 <__ieee754_sqrt+0x62>
 800675e:	ee10 2a10 	vmov	r2, s0
 8006762:	462b      	mov	r3, r5
 8006764:	ee10 0a10 	vmov	r0, s0
 8006768:	f7f9 fd32 	bl	80001d0 <__aeabi_dsub>
 800676c:	4602      	mov	r2, r0
 800676e:	460b      	mov	r3, r1
 8006770:	f7fa f810 	bl	8000794 <__aeabi_ddiv>
 8006774:	e7e6      	b.n	8006744 <__ieee754_sqrt+0x30>
 8006776:	1509      	asrs	r1, r1, #20
 8006778:	d076      	beq.n	8006868 <__ieee754_sqrt+0x154>
 800677a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800677e:	07ce      	lsls	r6, r1, #31
 8006780:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8006784:	bf5e      	ittt	pl
 8006786:	0fda      	lsrpl	r2, r3, #31
 8006788:	005b      	lslpl	r3, r3, #1
 800678a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800678e:	0fda      	lsrs	r2, r3, #31
 8006790:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8006794:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8006798:	2000      	movs	r0, #0
 800679a:	106d      	asrs	r5, r5, #1
 800679c:	005b      	lsls	r3, r3, #1
 800679e:	f04f 0e16 	mov.w	lr, #22
 80067a2:	4684      	mov	ip, r0
 80067a4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80067a8:	eb0c 0401 	add.w	r4, ip, r1
 80067ac:	4294      	cmp	r4, r2
 80067ae:	bfde      	ittt	le
 80067b0:	1b12      	suble	r2, r2, r4
 80067b2:	eb04 0c01 	addle.w	ip, r4, r1
 80067b6:	1840      	addle	r0, r0, r1
 80067b8:	0052      	lsls	r2, r2, #1
 80067ba:	f1be 0e01 	subs.w	lr, lr, #1
 80067be:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80067c2:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80067c6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80067ca:	d1ed      	bne.n	80067a8 <__ieee754_sqrt+0x94>
 80067cc:	4671      	mov	r1, lr
 80067ce:	2720      	movs	r7, #32
 80067d0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80067d4:	4562      	cmp	r2, ip
 80067d6:	eb04 060e 	add.w	r6, r4, lr
 80067da:	dc02      	bgt.n	80067e2 <__ieee754_sqrt+0xce>
 80067dc:	d113      	bne.n	8006806 <__ieee754_sqrt+0xf2>
 80067de:	429e      	cmp	r6, r3
 80067e0:	d811      	bhi.n	8006806 <__ieee754_sqrt+0xf2>
 80067e2:	2e00      	cmp	r6, #0
 80067e4:	eb06 0e04 	add.w	lr, r6, r4
 80067e8:	da43      	bge.n	8006872 <__ieee754_sqrt+0x15e>
 80067ea:	f1be 0f00 	cmp.w	lr, #0
 80067ee:	db40      	blt.n	8006872 <__ieee754_sqrt+0x15e>
 80067f0:	f10c 0801 	add.w	r8, ip, #1
 80067f4:	eba2 020c 	sub.w	r2, r2, ip
 80067f8:	429e      	cmp	r6, r3
 80067fa:	bf88      	it	hi
 80067fc:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8006800:	1b9b      	subs	r3, r3, r6
 8006802:	4421      	add	r1, r4
 8006804:	46c4      	mov	ip, r8
 8006806:	0052      	lsls	r2, r2, #1
 8006808:	3f01      	subs	r7, #1
 800680a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800680e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8006812:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006816:	d1dd      	bne.n	80067d4 <__ieee754_sqrt+0xc0>
 8006818:	4313      	orrs	r3, r2
 800681a:	d006      	beq.n	800682a <__ieee754_sqrt+0x116>
 800681c:	1c4c      	adds	r4, r1, #1
 800681e:	bf13      	iteet	ne
 8006820:	3101      	addne	r1, #1
 8006822:	3001      	addeq	r0, #1
 8006824:	4639      	moveq	r1, r7
 8006826:	f021 0101 	bicne.w	r1, r1, #1
 800682a:	1043      	asrs	r3, r0, #1
 800682c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8006830:	0849      	lsrs	r1, r1, #1
 8006832:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8006836:	07c2      	lsls	r2, r0, #31
 8006838:	bf48      	it	mi
 800683a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800683e:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8006842:	460c      	mov	r4, r1
 8006844:	463d      	mov	r5, r7
 8006846:	e77f      	b.n	8006748 <__ieee754_sqrt+0x34>
 8006848:	0ada      	lsrs	r2, r3, #11
 800684a:	3815      	subs	r0, #21
 800684c:	055b      	lsls	r3, r3, #21
 800684e:	2a00      	cmp	r2, #0
 8006850:	d0fa      	beq.n	8006848 <__ieee754_sqrt+0x134>
 8006852:	02d7      	lsls	r7, r2, #11
 8006854:	d50a      	bpl.n	800686c <__ieee754_sqrt+0x158>
 8006856:	f1c1 0420 	rsb	r4, r1, #32
 800685a:	fa23 f404 	lsr.w	r4, r3, r4
 800685e:	1e4d      	subs	r5, r1, #1
 8006860:	408b      	lsls	r3, r1
 8006862:	4322      	orrs	r2, r4
 8006864:	1b41      	subs	r1, r0, r5
 8006866:	e788      	b.n	800677a <__ieee754_sqrt+0x66>
 8006868:	4608      	mov	r0, r1
 800686a:	e7f0      	b.n	800684e <__ieee754_sqrt+0x13a>
 800686c:	0052      	lsls	r2, r2, #1
 800686e:	3101      	adds	r1, #1
 8006870:	e7ef      	b.n	8006852 <__ieee754_sqrt+0x13e>
 8006872:	46e0      	mov	r8, ip
 8006874:	e7be      	b.n	80067f4 <__ieee754_sqrt+0xe0>
 8006876:	bf00      	nop
 8006878:	7ff00000 	.word	0x7ff00000
 800687c:	00000000 	.word	0x00000000

08006880 <__kernel_cos>:
 8006880:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006884:	ec57 6b10 	vmov	r6, r7, d0
 8006888:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800688c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8006890:	ed8d 1b00 	vstr	d1, [sp]
 8006894:	da07      	bge.n	80068a6 <__kernel_cos+0x26>
 8006896:	ee10 0a10 	vmov	r0, s0
 800689a:	4639      	mov	r1, r7
 800689c:	f7fa f900 	bl	8000aa0 <__aeabi_d2iz>
 80068a0:	2800      	cmp	r0, #0
 80068a2:	f000 8088 	beq.w	80069b6 <__kernel_cos+0x136>
 80068a6:	4632      	mov	r2, r6
 80068a8:	463b      	mov	r3, r7
 80068aa:	4630      	mov	r0, r6
 80068ac:	4639      	mov	r1, r7
 80068ae:	f7f9 fe47 	bl	8000540 <__aeabi_dmul>
 80068b2:	4b51      	ldr	r3, [pc, #324]	; (80069f8 <__kernel_cos+0x178>)
 80068b4:	2200      	movs	r2, #0
 80068b6:	4604      	mov	r4, r0
 80068b8:	460d      	mov	r5, r1
 80068ba:	f7f9 fe41 	bl	8000540 <__aeabi_dmul>
 80068be:	a340      	add	r3, pc, #256	; (adr r3, 80069c0 <__kernel_cos+0x140>)
 80068c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068c4:	4682      	mov	sl, r0
 80068c6:	468b      	mov	fp, r1
 80068c8:	4620      	mov	r0, r4
 80068ca:	4629      	mov	r1, r5
 80068cc:	f7f9 fe38 	bl	8000540 <__aeabi_dmul>
 80068d0:	a33d      	add	r3, pc, #244	; (adr r3, 80069c8 <__kernel_cos+0x148>)
 80068d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068d6:	f7f9 fc7d 	bl	80001d4 <__adddf3>
 80068da:	4622      	mov	r2, r4
 80068dc:	462b      	mov	r3, r5
 80068de:	f7f9 fe2f 	bl	8000540 <__aeabi_dmul>
 80068e2:	a33b      	add	r3, pc, #236	; (adr r3, 80069d0 <__kernel_cos+0x150>)
 80068e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068e8:	f7f9 fc72 	bl	80001d0 <__aeabi_dsub>
 80068ec:	4622      	mov	r2, r4
 80068ee:	462b      	mov	r3, r5
 80068f0:	f7f9 fe26 	bl	8000540 <__aeabi_dmul>
 80068f4:	a338      	add	r3, pc, #224	; (adr r3, 80069d8 <__kernel_cos+0x158>)
 80068f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068fa:	f7f9 fc6b 	bl	80001d4 <__adddf3>
 80068fe:	4622      	mov	r2, r4
 8006900:	462b      	mov	r3, r5
 8006902:	f7f9 fe1d 	bl	8000540 <__aeabi_dmul>
 8006906:	a336      	add	r3, pc, #216	; (adr r3, 80069e0 <__kernel_cos+0x160>)
 8006908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800690c:	f7f9 fc60 	bl	80001d0 <__aeabi_dsub>
 8006910:	4622      	mov	r2, r4
 8006912:	462b      	mov	r3, r5
 8006914:	f7f9 fe14 	bl	8000540 <__aeabi_dmul>
 8006918:	a333      	add	r3, pc, #204	; (adr r3, 80069e8 <__kernel_cos+0x168>)
 800691a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800691e:	f7f9 fc59 	bl	80001d4 <__adddf3>
 8006922:	4622      	mov	r2, r4
 8006924:	462b      	mov	r3, r5
 8006926:	f7f9 fe0b 	bl	8000540 <__aeabi_dmul>
 800692a:	4622      	mov	r2, r4
 800692c:	462b      	mov	r3, r5
 800692e:	f7f9 fe07 	bl	8000540 <__aeabi_dmul>
 8006932:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006936:	4604      	mov	r4, r0
 8006938:	460d      	mov	r5, r1
 800693a:	4630      	mov	r0, r6
 800693c:	4639      	mov	r1, r7
 800693e:	f7f9 fdff 	bl	8000540 <__aeabi_dmul>
 8006942:	460b      	mov	r3, r1
 8006944:	4602      	mov	r2, r0
 8006946:	4629      	mov	r1, r5
 8006948:	4620      	mov	r0, r4
 800694a:	f7f9 fc41 	bl	80001d0 <__aeabi_dsub>
 800694e:	4b2b      	ldr	r3, [pc, #172]	; (80069fc <__kernel_cos+0x17c>)
 8006950:	4598      	cmp	r8, r3
 8006952:	4606      	mov	r6, r0
 8006954:	460f      	mov	r7, r1
 8006956:	dc10      	bgt.n	800697a <__kernel_cos+0xfa>
 8006958:	4602      	mov	r2, r0
 800695a:	460b      	mov	r3, r1
 800695c:	4650      	mov	r0, sl
 800695e:	4659      	mov	r1, fp
 8006960:	f7f9 fc36 	bl	80001d0 <__aeabi_dsub>
 8006964:	460b      	mov	r3, r1
 8006966:	4926      	ldr	r1, [pc, #152]	; (8006a00 <__kernel_cos+0x180>)
 8006968:	4602      	mov	r2, r0
 800696a:	2000      	movs	r0, #0
 800696c:	f7f9 fc30 	bl	80001d0 <__aeabi_dsub>
 8006970:	ec41 0b10 	vmov	d0, r0, r1
 8006974:	b003      	add	sp, #12
 8006976:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800697a:	4b22      	ldr	r3, [pc, #136]	; (8006a04 <__kernel_cos+0x184>)
 800697c:	4920      	ldr	r1, [pc, #128]	; (8006a00 <__kernel_cos+0x180>)
 800697e:	4598      	cmp	r8, r3
 8006980:	bfcc      	ite	gt
 8006982:	4d21      	ldrgt	r5, [pc, #132]	; (8006a08 <__kernel_cos+0x188>)
 8006984:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8006988:	2400      	movs	r4, #0
 800698a:	4622      	mov	r2, r4
 800698c:	462b      	mov	r3, r5
 800698e:	2000      	movs	r0, #0
 8006990:	f7f9 fc1e 	bl	80001d0 <__aeabi_dsub>
 8006994:	4622      	mov	r2, r4
 8006996:	4680      	mov	r8, r0
 8006998:	4689      	mov	r9, r1
 800699a:	462b      	mov	r3, r5
 800699c:	4650      	mov	r0, sl
 800699e:	4659      	mov	r1, fp
 80069a0:	f7f9 fc16 	bl	80001d0 <__aeabi_dsub>
 80069a4:	4632      	mov	r2, r6
 80069a6:	463b      	mov	r3, r7
 80069a8:	f7f9 fc12 	bl	80001d0 <__aeabi_dsub>
 80069ac:	4602      	mov	r2, r0
 80069ae:	460b      	mov	r3, r1
 80069b0:	4640      	mov	r0, r8
 80069b2:	4649      	mov	r1, r9
 80069b4:	e7da      	b.n	800696c <__kernel_cos+0xec>
 80069b6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 80069f0 <__kernel_cos+0x170>
 80069ba:	e7db      	b.n	8006974 <__kernel_cos+0xf4>
 80069bc:	f3af 8000 	nop.w
 80069c0:	be8838d4 	.word	0xbe8838d4
 80069c4:	bda8fae9 	.word	0xbda8fae9
 80069c8:	bdb4b1c4 	.word	0xbdb4b1c4
 80069cc:	3e21ee9e 	.word	0x3e21ee9e
 80069d0:	809c52ad 	.word	0x809c52ad
 80069d4:	3e927e4f 	.word	0x3e927e4f
 80069d8:	19cb1590 	.word	0x19cb1590
 80069dc:	3efa01a0 	.word	0x3efa01a0
 80069e0:	16c15177 	.word	0x16c15177
 80069e4:	3f56c16c 	.word	0x3f56c16c
 80069e8:	5555554c 	.word	0x5555554c
 80069ec:	3fa55555 	.word	0x3fa55555
 80069f0:	00000000 	.word	0x00000000
 80069f4:	3ff00000 	.word	0x3ff00000
 80069f8:	3fe00000 	.word	0x3fe00000
 80069fc:	3fd33332 	.word	0x3fd33332
 8006a00:	3ff00000 	.word	0x3ff00000
 8006a04:	3fe90000 	.word	0x3fe90000
 8006a08:	3fd20000 	.word	0x3fd20000
 8006a0c:	00000000 	.word	0x00000000

08006a10 <__kernel_rem_pio2>:
 8006a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a14:	ed2d 8b02 	vpush	{d8}
 8006a18:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8006a1c:	f112 0f14 	cmn.w	r2, #20
 8006a20:	9308      	str	r3, [sp, #32]
 8006a22:	9101      	str	r1, [sp, #4]
 8006a24:	4bc6      	ldr	r3, [pc, #792]	; (8006d40 <__kernel_rem_pio2+0x330>)
 8006a26:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8006a28:	9009      	str	r0, [sp, #36]	; 0x24
 8006a2a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006a2e:	9304      	str	r3, [sp, #16]
 8006a30:	9b08      	ldr	r3, [sp, #32]
 8006a32:	f103 33ff 	add.w	r3, r3, #4294967295
 8006a36:	bfa8      	it	ge
 8006a38:	1ed4      	subge	r4, r2, #3
 8006a3a:	9306      	str	r3, [sp, #24]
 8006a3c:	bfb2      	itee	lt
 8006a3e:	2400      	movlt	r4, #0
 8006a40:	2318      	movge	r3, #24
 8006a42:	fb94 f4f3 	sdivge	r4, r4, r3
 8006a46:	f06f 0317 	mvn.w	r3, #23
 8006a4a:	fb04 3303 	mla	r3, r4, r3, r3
 8006a4e:	eb03 0a02 	add.w	sl, r3, r2
 8006a52:	9b04      	ldr	r3, [sp, #16]
 8006a54:	9a06      	ldr	r2, [sp, #24]
 8006a56:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8006d30 <__kernel_rem_pio2+0x320>
 8006a5a:	eb03 0802 	add.w	r8, r3, r2
 8006a5e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8006a60:	1aa7      	subs	r7, r4, r2
 8006a62:	ae20      	add	r6, sp, #128	; 0x80
 8006a64:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8006a68:	2500      	movs	r5, #0
 8006a6a:	4545      	cmp	r5, r8
 8006a6c:	dd18      	ble.n	8006aa0 <__kernel_rem_pio2+0x90>
 8006a6e:	9b08      	ldr	r3, [sp, #32]
 8006a70:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8006a74:	aa20      	add	r2, sp, #128	; 0x80
 8006a76:	ed9f 8bae 	vldr	d8, [pc, #696]	; 8006d30 <__kernel_rem_pio2+0x320>
 8006a7a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8006a7e:	f1c3 0301 	rsb	r3, r3, #1
 8006a82:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8006a86:	9307      	str	r3, [sp, #28]
 8006a88:	9b07      	ldr	r3, [sp, #28]
 8006a8a:	9a04      	ldr	r2, [sp, #16]
 8006a8c:	4443      	add	r3, r8
 8006a8e:	429a      	cmp	r2, r3
 8006a90:	db2f      	blt.n	8006af2 <__kernel_rem_pio2+0xe2>
 8006a92:	ed8d 8b02 	vstr	d8, [sp, #8]
 8006a96:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8006a9a:	462f      	mov	r7, r5
 8006a9c:	2600      	movs	r6, #0
 8006a9e:	e01b      	b.n	8006ad8 <__kernel_rem_pio2+0xc8>
 8006aa0:	42ef      	cmn	r7, r5
 8006aa2:	d407      	bmi.n	8006ab4 <__kernel_rem_pio2+0xa4>
 8006aa4:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8006aa8:	f7f9 fce0 	bl	800046c <__aeabi_i2d>
 8006aac:	e8e6 0102 	strd	r0, r1, [r6], #8
 8006ab0:	3501      	adds	r5, #1
 8006ab2:	e7da      	b.n	8006a6a <__kernel_rem_pio2+0x5a>
 8006ab4:	ec51 0b18 	vmov	r0, r1, d8
 8006ab8:	e7f8      	b.n	8006aac <__kernel_rem_pio2+0x9c>
 8006aba:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006abe:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8006ac2:	f7f9 fd3d 	bl	8000540 <__aeabi_dmul>
 8006ac6:	4602      	mov	r2, r0
 8006ac8:	460b      	mov	r3, r1
 8006aca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ace:	f7f9 fb81 	bl	80001d4 <__adddf3>
 8006ad2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006ad6:	3601      	adds	r6, #1
 8006ad8:	9b06      	ldr	r3, [sp, #24]
 8006ada:	429e      	cmp	r6, r3
 8006adc:	f1a7 0708 	sub.w	r7, r7, #8
 8006ae0:	ddeb      	ble.n	8006aba <__kernel_rem_pio2+0xaa>
 8006ae2:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006ae6:	3508      	adds	r5, #8
 8006ae8:	ecab 7b02 	vstmia	fp!, {d7}
 8006aec:	f108 0801 	add.w	r8, r8, #1
 8006af0:	e7ca      	b.n	8006a88 <__kernel_rem_pio2+0x78>
 8006af2:	9b04      	ldr	r3, [sp, #16]
 8006af4:	aa0c      	add	r2, sp, #48	; 0x30
 8006af6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006afa:	930b      	str	r3, [sp, #44]	; 0x2c
 8006afc:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8006afe:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8006b02:	9c04      	ldr	r4, [sp, #16]
 8006b04:	930a      	str	r3, [sp, #40]	; 0x28
 8006b06:	ab98      	add	r3, sp, #608	; 0x260
 8006b08:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006b0c:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8006b10:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 8006b14:	f8cd b008 	str.w	fp, [sp, #8]
 8006b18:	4625      	mov	r5, r4
 8006b1a:	2d00      	cmp	r5, #0
 8006b1c:	dc78      	bgt.n	8006c10 <__kernel_rem_pio2+0x200>
 8006b1e:	ec47 6b10 	vmov	d0, r6, r7
 8006b22:	4650      	mov	r0, sl
 8006b24:	f000 fc04 	bl	8007330 <scalbn>
 8006b28:	ec57 6b10 	vmov	r6, r7, d0
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8006b32:	ee10 0a10 	vmov	r0, s0
 8006b36:	4639      	mov	r1, r7
 8006b38:	f7f9 fd02 	bl	8000540 <__aeabi_dmul>
 8006b3c:	ec41 0b10 	vmov	d0, r0, r1
 8006b40:	f000 fb6e 	bl	8007220 <floor>
 8006b44:	4b7f      	ldr	r3, [pc, #508]	; (8006d44 <__kernel_rem_pio2+0x334>)
 8006b46:	ec51 0b10 	vmov	r0, r1, d0
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	f7f9 fcf8 	bl	8000540 <__aeabi_dmul>
 8006b50:	4602      	mov	r2, r0
 8006b52:	460b      	mov	r3, r1
 8006b54:	4630      	mov	r0, r6
 8006b56:	4639      	mov	r1, r7
 8006b58:	f7f9 fb3a 	bl	80001d0 <__aeabi_dsub>
 8006b5c:	460f      	mov	r7, r1
 8006b5e:	4606      	mov	r6, r0
 8006b60:	f7f9 ff9e 	bl	8000aa0 <__aeabi_d2iz>
 8006b64:	9007      	str	r0, [sp, #28]
 8006b66:	f7f9 fc81 	bl	800046c <__aeabi_i2d>
 8006b6a:	4602      	mov	r2, r0
 8006b6c:	460b      	mov	r3, r1
 8006b6e:	4630      	mov	r0, r6
 8006b70:	4639      	mov	r1, r7
 8006b72:	f7f9 fb2d 	bl	80001d0 <__aeabi_dsub>
 8006b76:	f1ba 0f00 	cmp.w	sl, #0
 8006b7a:	4606      	mov	r6, r0
 8006b7c:	460f      	mov	r7, r1
 8006b7e:	dd70      	ble.n	8006c62 <__kernel_rem_pio2+0x252>
 8006b80:	1e62      	subs	r2, r4, #1
 8006b82:	ab0c      	add	r3, sp, #48	; 0x30
 8006b84:	9d07      	ldr	r5, [sp, #28]
 8006b86:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8006b8a:	f1ca 0118 	rsb	r1, sl, #24
 8006b8e:	fa40 f301 	asr.w	r3, r0, r1
 8006b92:	441d      	add	r5, r3
 8006b94:	408b      	lsls	r3, r1
 8006b96:	1ac0      	subs	r0, r0, r3
 8006b98:	ab0c      	add	r3, sp, #48	; 0x30
 8006b9a:	9507      	str	r5, [sp, #28]
 8006b9c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8006ba0:	f1ca 0317 	rsb	r3, sl, #23
 8006ba4:	fa40 f303 	asr.w	r3, r0, r3
 8006ba8:	9302      	str	r3, [sp, #8]
 8006baa:	9b02      	ldr	r3, [sp, #8]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	dd66      	ble.n	8006c7e <__kernel_rem_pio2+0x26e>
 8006bb0:	9b07      	ldr	r3, [sp, #28]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	3301      	adds	r3, #1
 8006bb6:	9307      	str	r3, [sp, #28]
 8006bb8:	4615      	mov	r5, r2
 8006bba:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8006bbe:	4294      	cmp	r4, r2
 8006bc0:	f300 8099 	bgt.w	8006cf6 <__kernel_rem_pio2+0x2e6>
 8006bc4:	f1ba 0f00 	cmp.w	sl, #0
 8006bc8:	dd07      	ble.n	8006bda <__kernel_rem_pio2+0x1ca>
 8006bca:	f1ba 0f01 	cmp.w	sl, #1
 8006bce:	f000 80a5 	beq.w	8006d1c <__kernel_rem_pio2+0x30c>
 8006bd2:	f1ba 0f02 	cmp.w	sl, #2
 8006bd6:	f000 80c1 	beq.w	8006d5c <__kernel_rem_pio2+0x34c>
 8006bda:	9b02      	ldr	r3, [sp, #8]
 8006bdc:	2b02      	cmp	r3, #2
 8006bde:	d14e      	bne.n	8006c7e <__kernel_rem_pio2+0x26e>
 8006be0:	4632      	mov	r2, r6
 8006be2:	463b      	mov	r3, r7
 8006be4:	4958      	ldr	r1, [pc, #352]	; (8006d48 <__kernel_rem_pio2+0x338>)
 8006be6:	2000      	movs	r0, #0
 8006be8:	f7f9 faf2 	bl	80001d0 <__aeabi_dsub>
 8006bec:	4606      	mov	r6, r0
 8006bee:	460f      	mov	r7, r1
 8006bf0:	2d00      	cmp	r5, #0
 8006bf2:	d044      	beq.n	8006c7e <__kernel_rem_pio2+0x26e>
 8006bf4:	4650      	mov	r0, sl
 8006bf6:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8006d38 <__kernel_rem_pio2+0x328>
 8006bfa:	f000 fb99 	bl	8007330 <scalbn>
 8006bfe:	4630      	mov	r0, r6
 8006c00:	4639      	mov	r1, r7
 8006c02:	ec53 2b10 	vmov	r2, r3, d0
 8006c06:	f7f9 fae3 	bl	80001d0 <__aeabi_dsub>
 8006c0a:	4606      	mov	r6, r0
 8006c0c:	460f      	mov	r7, r1
 8006c0e:	e036      	b.n	8006c7e <__kernel_rem_pio2+0x26e>
 8006c10:	4b4e      	ldr	r3, [pc, #312]	; (8006d4c <__kernel_rem_pio2+0x33c>)
 8006c12:	2200      	movs	r2, #0
 8006c14:	4630      	mov	r0, r6
 8006c16:	4639      	mov	r1, r7
 8006c18:	f7f9 fc92 	bl	8000540 <__aeabi_dmul>
 8006c1c:	f7f9 ff40 	bl	8000aa0 <__aeabi_d2iz>
 8006c20:	f7f9 fc24 	bl	800046c <__aeabi_i2d>
 8006c24:	4b4a      	ldr	r3, [pc, #296]	; (8006d50 <__kernel_rem_pio2+0x340>)
 8006c26:	2200      	movs	r2, #0
 8006c28:	4680      	mov	r8, r0
 8006c2a:	4689      	mov	r9, r1
 8006c2c:	f7f9 fc88 	bl	8000540 <__aeabi_dmul>
 8006c30:	4602      	mov	r2, r0
 8006c32:	460b      	mov	r3, r1
 8006c34:	4630      	mov	r0, r6
 8006c36:	4639      	mov	r1, r7
 8006c38:	f7f9 faca 	bl	80001d0 <__aeabi_dsub>
 8006c3c:	f7f9 ff30 	bl	8000aa0 <__aeabi_d2iz>
 8006c40:	9b02      	ldr	r3, [sp, #8]
 8006c42:	f843 0b04 	str.w	r0, [r3], #4
 8006c46:	3d01      	subs	r5, #1
 8006c48:	9302      	str	r3, [sp, #8]
 8006c4a:	ab70      	add	r3, sp, #448	; 0x1c0
 8006c4c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8006c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c54:	4640      	mov	r0, r8
 8006c56:	4649      	mov	r1, r9
 8006c58:	f7f9 fabc 	bl	80001d4 <__adddf3>
 8006c5c:	4606      	mov	r6, r0
 8006c5e:	460f      	mov	r7, r1
 8006c60:	e75b      	b.n	8006b1a <__kernel_rem_pio2+0x10a>
 8006c62:	d105      	bne.n	8006c70 <__kernel_rem_pio2+0x260>
 8006c64:	1e63      	subs	r3, r4, #1
 8006c66:	aa0c      	add	r2, sp, #48	; 0x30
 8006c68:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8006c6c:	15c3      	asrs	r3, r0, #23
 8006c6e:	e79b      	b.n	8006ba8 <__kernel_rem_pio2+0x198>
 8006c70:	4b38      	ldr	r3, [pc, #224]	; (8006d54 <__kernel_rem_pio2+0x344>)
 8006c72:	2200      	movs	r2, #0
 8006c74:	f7f9 feea 	bl	8000a4c <__aeabi_dcmpge>
 8006c78:	2800      	cmp	r0, #0
 8006c7a:	d139      	bne.n	8006cf0 <__kernel_rem_pio2+0x2e0>
 8006c7c:	9002      	str	r0, [sp, #8]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	2300      	movs	r3, #0
 8006c82:	4630      	mov	r0, r6
 8006c84:	4639      	mov	r1, r7
 8006c86:	f7f9 fec3 	bl	8000a10 <__aeabi_dcmpeq>
 8006c8a:	2800      	cmp	r0, #0
 8006c8c:	f000 80b4 	beq.w	8006df8 <__kernel_rem_pio2+0x3e8>
 8006c90:	f104 3bff 	add.w	fp, r4, #4294967295
 8006c94:	465b      	mov	r3, fp
 8006c96:	2200      	movs	r2, #0
 8006c98:	9904      	ldr	r1, [sp, #16]
 8006c9a:	428b      	cmp	r3, r1
 8006c9c:	da65      	bge.n	8006d6a <__kernel_rem_pio2+0x35a>
 8006c9e:	2a00      	cmp	r2, #0
 8006ca0:	d07b      	beq.n	8006d9a <__kernel_rem_pio2+0x38a>
 8006ca2:	ab0c      	add	r3, sp, #48	; 0x30
 8006ca4:	f1aa 0a18 	sub.w	sl, sl, #24
 8006ca8:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	f000 80a0 	beq.w	8006df2 <__kernel_rem_pio2+0x3e2>
 8006cb2:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8006d38 <__kernel_rem_pio2+0x328>
 8006cb6:	4650      	mov	r0, sl
 8006cb8:	f000 fb3a 	bl	8007330 <scalbn>
 8006cbc:	4f23      	ldr	r7, [pc, #140]	; (8006d4c <__kernel_rem_pio2+0x33c>)
 8006cbe:	ec55 4b10 	vmov	r4, r5, d0
 8006cc2:	46d8      	mov	r8, fp
 8006cc4:	2600      	movs	r6, #0
 8006cc6:	f1b8 0f00 	cmp.w	r8, #0
 8006cca:	f280 80cf 	bge.w	8006e6c <__kernel_rem_pio2+0x45c>
 8006cce:	ed9f 8b18 	vldr	d8, [pc, #96]	; 8006d30 <__kernel_rem_pio2+0x320>
 8006cd2:	465f      	mov	r7, fp
 8006cd4:	f04f 0800 	mov.w	r8, #0
 8006cd8:	2f00      	cmp	r7, #0
 8006cda:	f2c0 80fd 	blt.w	8006ed8 <__kernel_rem_pio2+0x4c8>
 8006cde:	ab70      	add	r3, sp, #448	; 0x1c0
 8006ce0:	f8df a074 	ldr.w	sl, [pc, #116]	; 8006d58 <__kernel_rem_pio2+0x348>
 8006ce4:	ec55 4b18 	vmov	r4, r5, d8
 8006ce8:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 8006cec:	2600      	movs	r6, #0
 8006cee:	e0e5      	b.n	8006ebc <__kernel_rem_pio2+0x4ac>
 8006cf0:	2302      	movs	r3, #2
 8006cf2:	9302      	str	r3, [sp, #8]
 8006cf4:	e75c      	b.n	8006bb0 <__kernel_rem_pio2+0x1a0>
 8006cf6:	f8db 3000 	ldr.w	r3, [fp]
 8006cfa:	b955      	cbnz	r5, 8006d12 <__kernel_rem_pio2+0x302>
 8006cfc:	b123      	cbz	r3, 8006d08 <__kernel_rem_pio2+0x2f8>
 8006cfe:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8006d02:	f8cb 3000 	str.w	r3, [fp]
 8006d06:	2301      	movs	r3, #1
 8006d08:	3201      	adds	r2, #1
 8006d0a:	f10b 0b04 	add.w	fp, fp, #4
 8006d0e:	461d      	mov	r5, r3
 8006d10:	e755      	b.n	8006bbe <__kernel_rem_pio2+0x1ae>
 8006d12:	1acb      	subs	r3, r1, r3
 8006d14:	f8cb 3000 	str.w	r3, [fp]
 8006d18:	462b      	mov	r3, r5
 8006d1a:	e7f5      	b.n	8006d08 <__kernel_rem_pio2+0x2f8>
 8006d1c:	1e62      	subs	r2, r4, #1
 8006d1e:	ab0c      	add	r3, sp, #48	; 0x30
 8006d20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d24:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8006d28:	a90c      	add	r1, sp, #48	; 0x30
 8006d2a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8006d2e:	e754      	b.n	8006bda <__kernel_rem_pio2+0x1ca>
	...
 8006d3c:	3ff00000 	.word	0x3ff00000
 8006d40:	08007740 	.word	0x08007740
 8006d44:	40200000 	.word	0x40200000
 8006d48:	3ff00000 	.word	0x3ff00000
 8006d4c:	3e700000 	.word	0x3e700000
 8006d50:	41700000 	.word	0x41700000
 8006d54:	3fe00000 	.word	0x3fe00000
 8006d58:	08007700 	.word	0x08007700
 8006d5c:	1e62      	subs	r2, r4, #1
 8006d5e:	ab0c      	add	r3, sp, #48	; 0x30
 8006d60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d64:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8006d68:	e7de      	b.n	8006d28 <__kernel_rem_pio2+0x318>
 8006d6a:	a90c      	add	r1, sp, #48	; 0x30
 8006d6c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8006d70:	3b01      	subs	r3, #1
 8006d72:	430a      	orrs	r2, r1
 8006d74:	e790      	b.n	8006c98 <__kernel_rem_pio2+0x288>
 8006d76:	3301      	adds	r3, #1
 8006d78:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8006d7c:	2900      	cmp	r1, #0
 8006d7e:	d0fa      	beq.n	8006d76 <__kernel_rem_pio2+0x366>
 8006d80:	9a08      	ldr	r2, [sp, #32]
 8006d82:	18e3      	adds	r3, r4, r3
 8006d84:	18a6      	adds	r6, r4, r2
 8006d86:	aa20      	add	r2, sp, #128	; 0x80
 8006d88:	1c65      	adds	r5, r4, #1
 8006d8a:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8006d8e:	9302      	str	r3, [sp, #8]
 8006d90:	9b02      	ldr	r3, [sp, #8]
 8006d92:	42ab      	cmp	r3, r5
 8006d94:	da04      	bge.n	8006da0 <__kernel_rem_pio2+0x390>
 8006d96:	461c      	mov	r4, r3
 8006d98:	e6b5      	b.n	8006b06 <__kernel_rem_pio2+0xf6>
 8006d9a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	e7eb      	b.n	8006d78 <__kernel_rem_pio2+0x368>
 8006da0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006da2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006da6:	f7f9 fb61 	bl	800046c <__aeabi_i2d>
 8006daa:	e8e6 0102 	strd	r0, r1, [r6], #8
 8006dae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006db0:	46b3      	mov	fp, r6
 8006db2:	461c      	mov	r4, r3
 8006db4:	2700      	movs	r7, #0
 8006db6:	f04f 0800 	mov.w	r8, #0
 8006dba:	f04f 0900 	mov.w	r9, #0
 8006dbe:	9b06      	ldr	r3, [sp, #24]
 8006dc0:	429f      	cmp	r7, r3
 8006dc2:	dd06      	ble.n	8006dd2 <__kernel_rem_pio2+0x3c2>
 8006dc4:	ab70      	add	r3, sp, #448	; 0x1c0
 8006dc6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8006dca:	e9c3 8900 	strd	r8, r9, [r3]
 8006dce:	3501      	adds	r5, #1
 8006dd0:	e7de      	b.n	8006d90 <__kernel_rem_pio2+0x380>
 8006dd2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8006dd6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8006dda:	f7f9 fbb1 	bl	8000540 <__aeabi_dmul>
 8006dde:	4602      	mov	r2, r0
 8006de0:	460b      	mov	r3, r1
 8006de2:	4640      	mov	r0, r8
 8006de4:	4649      	mov	r1, r9
 8006de6:	f7f9 f9f5 	bl	80001d4 <__adddf3>
 8006dea:	3701      	adds	r7, #1
 8006dec:	4680      	mov	r8, r0
 8006dee:	4689      	mov	r9, r1
 8006df0:	e7e5      	b.n	8006dbe <__kernel_rem_pio2+0x3ae>
 8006df2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006df6:	e754      	b.n	8006ca2 <__kernel_rem_pio2+0x292>
 8006df8:	ec47 6b10 	vmov	d0, r6, r7
 8006dfc:	f1ca 0000 	rsb	r0, sl, #0
 8006e00:	f000 fa96 	bl	8007330 <scalbn>
 8006e04:	ec57 6b10 	vmov	r6, r7, d0
 8006e08:	4b9f      	ldr	r3, [pc, #636]	; (8007088 <__kernel_rem_pio2+0x678>)
 8006e0a:	ee10 0a10 	vmov	r0, s0
 8006e0e:	2200      	movs	r2, #0
 8006e10:	4639      	mov	r1, r7
 8006e12:	f7f9 fe1b 	bl	8000a4c <__aeabi_dcmpge>
 8006e16:	b300      	cbz	r0, 8006e5a <__kernel_rem_pio2+0x44a>
 8006e18:	4b9c      	ldr	r3, [pc, #624]	; (800708c <__kernel_rem_pio2+0x67c>)
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	4630      	mov	r0, r6
 8006e1e:	4639      	mov	r1, r7
 8006e20:	f7f9 fb8e 	bl	8000540 <__aeabi_dmul>
 8006e24:	f7f9 fe3c 	bl	8000aa0 <__aeabi_d2iz>
 8006e28:	4605      	mov	r5, r0
 8006e2a:	f7f9 fb1f 	bl	800046c <__aeabi_i2d>
 8006e2e:	4b96      	ldr	r3, [pc, #600]	; (8007088 <__kernel_rem_pio2+0x678>)
 8006e30:	2200      	movs	r2, #0
 8006e32:	f7f9 fb85 	bl	8000540 <__aeabi_dmul>
 8006e36:	460b      	mov	r3, r1
 8006e38:	4602      	mov	r2, r0
 8006e3a:	4639      	mov	r1, r7
 8006e3c:	4630      	mov	r0, r6
 8006e3e:	f7f9 f9c7 	bl	80001d0 <__aeabi_dsub>
 8006e42:	f7f9 fe2d 	bl	8000aa0 <__aeabi_d2iz>
 8006e46:	f104 0b01 	add.w	fp, r4, #1
 8006e4a:	ab0c      	add	r3, sp, #48	; 0x30
 8006e4c:	f10a 0a18 	add.w	sl, sl, #24
 8006e50:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8006e54:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 8006e58:	e72b      	b.n	8006cb2 <__kernel_rem_pio2+0x2a2>
 8006e5a:	4630      	mov	r0, r6
 8006e5c:	4639      	mov	r1, r7
 8006e5e:	f7f9 fe1f 	bl	8000aa0 <__aeabi_d2iz>
 8006e62:	ab0c      	add	r3, sp, #48	; 0x30
 8006e64:	46a3      	mov	fp, r4
 8006e66:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8006e6a:	e722      	b.n	8006cb2 <__kernel_rem_pio2+0x2a2>
 8006e6c:	ab70      	add	r3, sp, #448	; 0x1c0
 8006e6e:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 8006e72:	ab0c      	add	r3, sp, #48	; 0x30
 8006e74:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8006e78:	f7f9 faf8 	bl	800046c <__aeabi_i2d>
 8006e7c:	4622      	mov	r2, r4
 8006e7e:	462b      	mov	r3, r5
 8006e80:	f7f9 fb5e 	bl	8000540 <__aeabi_dmul>
 8006e84:	4632      	mov	r2, r6
 8006e86:	e9c9 0100 	strd	r0, r1, [r9]
 8006e8a:	463b      	mov	r3, r7
 8006e8c:	4620      	mov	r0, r4
 8006e8e:	4629      	mov	r1, r5
 8006e90:	f7f9 fb56 	bl	8000540 <__aeabi_dmul>
 8006e94:	f108 38ff 	add.w	r8, r8, #4294967295
 8006e98:	4604      	mov	r4, r0
 8006e9a:	460d      	mov	r5, r1
 8006e9c:	e713      	b.n	8006cc6 <__kernel_rem_pio2+0x2b6>
 8006e9e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8006ea2:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8006ea6:	f7f9 fb4b 	bl	8000540 <__aeabi_dmul>
 8006eaa:	4602      	mov	r2, r0
 8006eac:	460b      	mov	r3, r1
 8006eae:	4620      	mov	r0, r4
 8006eb0:	4629      	mov	r1, r5
 8006eb2:	f7f9 f98f 	bl	80001d4 <__adddf3>
 8006eb6:	3601      	adds	r6, #1
 8006eb8:	4604      	mov	r4, r0
 8006eba:	460d      	mov	r5, r1
 8006ebc:	9b04      	ldr	r3, [sp, #16]
 8006ebe:	429e      	cmp	r6, r3
 8006ec0:	dc01      	bgt.n	8006ec6 <__kernel_rem_pio2+0x4b6>
 8006ec2:	45b0      	cmp	r8, r6
 8006ec4:	daeb      	bge.n	8006e9e <__kernel_rem_pio2+0x48e>
 8006ec6:	ab48      	add	r3, sp, #288	; 0x120
 8006ec8:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8006ecc:	e9c3 4500 	strd	r4, r5, [r3]
 8006ed0:	3f01      	subs	r7, #1
 8006ed2:	f108 0801 	add.w	r8, r8, #1
 8006ed6:	e6ff      	b.n	8006cd8 <__kernel_rem_pio2+0x2c8>
 8006ed8:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8006eda:	2b02      	cmp	r3, #2
 8006edc:	dc0b      	bgt.n	8006ef6 <__kernel_rem_pio2+0x4e6>
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	dc6e      	bgt.n	8006fc0 <__kernel_rem_pio2+0x5b0>
 8006ee2:	d045      	beq.n	8006f70 <__kernel_rem_pio2+0x560>
 8006ee4:	9b07      	ldr	r3, [sp, #28]
 8006ee6:	f003 0007 	and.w	r0, r3, #7
 8006eea:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8006eee:	ecbd 8b02 	vpop	{d8}
 8006ef2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ef6:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8006ef8:	2b03      	cmp	r3, #3
 8006efa:	d1f3      	bne.n	8006ee4 <__kernel_rem_pio2+0x4d4>
 8006efc:	ab48      	add	r3, sp, #288	; 0x120
 8006efe:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 8006f02:	46d0      	mov	r8, sl
 8006f04:	46d9      	mov	r9, fp
 8006f06:	f1b9 0f00 	cmp.w	r9, #0
 8006f0a:	f1a8 0808 	sub.w	r8, r8, #8
 8006f0e:	dc64      	bgt.n	8006fda <__kernel_rem_pio2+0x5ca>
 8006f10:	465c      	mov	r4, fp
 8006f12:	2c01      	cmp	r4, #1
 8006f14:	f1aa 0a08 	sub.w	sl, sl, #8
 8006f18:	dc7e      	bgt.n	8007018 <__kernel_rem_pio2+0x608>
 8006f1a:	2000      	movs	r0, #0
 8006f1c:	2100      	movs	r1, #0
 8006f1e:	f1bb 0f01 	cmp.w	fp, #1
 8006f22:	f300 8097 	bgt.w	8007054 <__kernel_rem_pio2+0x644>
 8006f26:	9b02      	ldr	r3, [sp, #8]
 8006f28:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 8006f2c:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	f040 8099 	bne.w	8007068 <__kernel_rem_pio2+0x658>
 8006f36:	9b01      	ldr	r3, [sp, #4]
 8006f38:	e9c3 5600 	strd	r5, r6, [r3]
 8006f3c:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8006f40:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8006f44:	e7ce      	b.n	8006ee4 <__kernel_rem_pio2+0x4d4>
 8006f46:	ab48      	add	r3, sp, #288	; 0x120
 8006f48:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f50:	f7f9 f940 	bl	80001d4 <__adddf3>
 8006f54:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006f58:	f1bb 0f00 	cmp.w	fp, #0
 8006f5c:	daf3      	bge.n	8006f46 <__kernel_rem_pio2+0x536>
 8006f5e:	9b02      	ldr	r3, [sp, #8]
 8006f60:	b113      	cbz	r3, 8006f68 <__kernel_rem_pio2+0x558>
 8006f62:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006f66:	4619      	mov	r1, r3
 8006f68:	9b01      	ldr	r3, [sp, #4]
 8006f6a:	e9c3 0100 	strd	r0, r1, [r3]
 8006f6e:	e7b9      	b.n	8006ee4 <__kernel_rem_pio2+0x4d4>
 8006f70:	2000      	movs	r0, #0
 8006f72:	2100      	movs	r1, #0
 8006f74:	e7f0      	b.n	8006f58 <__kernel_rem_pio2+0x548>
 8006f76:	ab48      	add	r3, sp, #288	; 0x120
 8006f78:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f80:	f7f9 f928 	bl	80001d4 <__adddf3>
 8006f84:	3c01      	subs	r4, #1
 8006f86:	2c00      	cmp	r4, #0
 8006f88:	daf5      	bge.n	8006f76 <__kernel_rem_pio2+0x566>
 8006f8a:	9b02      	ldr	r3, [sp, #8]
 8006f8c:	b1e3      	cbz	r3, 8006fc8 <__kernel_rem_pio2+0x5b8>
 8006f8e:	4602      	mov	r2, r0
 8006f90:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006f94:	9c01      	ldr	r4, [sp, #4]
 8006f96:	e9c4 2300 	strd	r2, r3, [r4]
 8006f9a:	4602      	mov	r2, r0
 8006f9c:	460b      	mov	r3, r1
 8006f9e:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8006fa2:	f7f9 f915 	bl	80001d0 <__aeabi_dsub>
 8006fa6:	ad4a      	add	r5, sp, #296	; 0x128
 8006fa8:	2401      	movs	r4, #1
 8006faa:	45a3      	cmp	fp, r4
 8006fac:	da0f      	bge.n	8006fce <__kernel_rem_pio2+0x5be>
 8006fae:	9b02      	ldr	r3, [sp, #8]
 8006fb0:	b113      	cbz	r3, 8006fb8 <__kernel_rem_pio2+0x5a8>
 8006fb2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006fb6:	4619      	mov	r1, r3
 8006fb8:	9b01      	ldr	r3, [sp, #4]
 8006fba:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8006fbe:	e791      	b.n	8006ee4 <__kernel_rem_pio2+0x4d4>
 8006fc0:	465c      	mov	r4, fp
 8006fc2:	2000      	movs	r0, #0
 8006fc4:	2100      	movs	r1, #0
 8006fc6:	e7de      	b.n	8006f86 <__kernel_rem_pio2+0x576>
 8006fc8:	4602      	mov	r2, r0
 8006fca:	460b      	mov	r3, r1
 8006fcc:	e7e2      	b.n	8006f94 <__kernel_rem_pio2+0x584>
 8006fce:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8006fd2:	f7f9 f8ff 	bl	80001d4 <__adddf3>
 8006fd6:	3401      	adds	r4, #1
 8006fd8:	e7e7      	b.n	8006faa <__kernel_rem_pio2+0x59a>
 8006fda:	e9d8 4500 	ldrd	r4, r5, [r8]
 8006fde:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 8006fe2:	4620      	mov	r0, r4
 8006fe4:	4632      	mov	r2, r6
 8006fe6:	463b      	mov	r3, r7
 8006fe8:	4629      	mov	r1, r5
 8006fea:	f7f9 f8f3 	bl	80001d4 <__adddf3>
 8006fee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006ff2:	4602      	mov	r2, r0
 8006ff4:	460b      	mov	r3, r1
 8006ff6:	4620      	mov	r0, r4
 8006ff8:	4629      	mov	r1, r5
 8006ffa:	f7f9 f8e9 	bl	80001d0 <__aeabi_dsub>
 8006ffe:	4632      	mov	r2, r6
 8007000:	463b      	mov	r3, r7
 8007002:	f7f9 f8e7 	bl	80001d4 <__adddf3>
 8007006:	ed9d 7b04 	vldr	d7, [sp, #16]
 800700a:	e9c8 0102 	strd	r0, r1, [r8, #8]
 800700e:	ed88 7b00 	vstr	d7, [r8]
 8007012:	f109 39ff 	add.w	r9, r9, #4294967295
 8007016:	e776      	b.n	8006f06 <__kernel_rem_pio2+0x4f6>
 8007018:	e9da 8900 	ldrd	r8, r9, [sl]
 800701c:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8007020:	4640      	mov	r0, r8
 8007022:	4632      	mov	r2, r6
 8007024:	463b      	mov	r3, r7
 8007026:	4649      	mov	r1, r9
 8007028:	f7f9 f8d4 	bl	80001d4 <__adddf3>
 800702c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007030:	4602      	mov	r2, r0
 8007032:	460b      	mov	r3, r1
 8007034:	4640      	mov	r0, r8
 8007036:	4649      	mov	r1, r9
 8007038:	f7f9 f8ca 	bl	80001d0 <__aeabi_dsub>
 800703c:	4632      	mov	r2, r6
 800703e:	463b      	mov	r3, r7
 8007040:	f7f9 f8c8 	bl	80001d4 <__adddf3>
 8007044:	ed9d 7b04 	vldr	d7, [sp, #16]
 8007048:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800704c:	ed8a 7b00 	vstr	d7, [sl]
 8007050:	3c01      	subs	r4, #1
 8007052:	e75e      	b.n	8006f12 <__kernel_rem_pio2+0x502>
 8007054:	ab48      	add	r3, sp, #288	; 0x120
 8007056:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800705a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800705e:	f7f9 f8b9 	bl	80001d4 <__adddf3>
 8007062:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007066:	e75a      	b.n	8006f1e <__kernel_rem_pio2+0x50e>
 8007068:	9b01      	ldr	r3, [sp, #4]
 800706a:	9a01      	ldr	r2, [sp, #4]
 800706c:	601d      	str	r5, [r3, #0]
 800706e:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8007072:	605c      	str	r4, [r3, #4]
 8007074:	609f      	str	r7, [r3, #8]
 8007076:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800707a:	60d3      	str	r3, [r2, #12]
 800707c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007080:	6110      	str	r0, [r2, #16]
 8007082:	6153      	str	r3, [r2, #20]
 8007084:	e72e      	b.n	8006ee4 <__kernel_rem_pio2+0x4d4>
 8007086:	bf00      	nop
 8007088:	41700000 	.word	0x41700000
 800708c:	3e700000 	.word	0x3e700000

08007090 <__kernel_sin>:
 8007090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007094:	ed2d 8b04 	vpush	{d8-d9}
 8007098:	eeb0 8a41 	vmov.f32	s16, s2
 800709c:	eef0 8a61 	vmov.f32	s17, s3
 80070a0:	ec55 4b10 	vmov	r4, r5, d0
 80070a4:	b083      	sub	sp, #12
 80070a6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80070aa:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80070ae:	9001      	str	r0, [sp, #4]
 80070b0:	da06      	bge.n	80070c0 <__kernel_sin+0x30>
 80070b2:	ee10 0a10 	vmov	r0, s0
 80070b6:	4629      	mov	r1, r5
 80070b8:	f7f9 fcf2 	bl	8000aa0 <__aeabi_d2iz>
 80070bc:	2800      	cmp	r0, #0
 80070be:	d051      	beq.n	8007164 <__kernel_sin+0xd4>
 80070c0:	4622      	mov	r2, r4
 80070c2:	462b      	mov	r3, r5
 80070c4:	4620      	mov	r0, r4
 80070c6:	4629      	mov	r1, r5
 80070c8:	f7f9 fa3a 	bl	8000540 <__aeabi_dmul>
 80070cc:	4682      	mov	sl, r0
 80070ce:	468b      	mov	fp, r1
 80070d0:	4602      	mov	r2, r0
 80070d2:	460b      	mov	r3, r1
 80070d4:	4620      	mov	r0, r4
 80070d6:	4629      	mov	r1, r5
 80070d8:	f7f9 fa32 	bl	8000540 <__aeabi_dmul>
 80070dc:	a341      	add	r3, pc, #260	; (adr r3, 80071e4 <__kernel_sin+0x154>)
 80070de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070e2:	4680      	mov	r8, r0
 80070e4:	4689      	mov	r9, r1
 80070e6:	4650      	mov	r0, sl
 80070e8:	4659      	mov	r1, fp
 80070ea:	f7f9 fa29 	bl	8000540 <__aeabi_dmul>
 80070ee:	a33f      	add	r3, pc, #252	; (adr r3, 80071ec <__kernel_sin+0x15c>)
 80070f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070f4:	f7f9 f86c 	bl	80001d0 <__aeabi_dsub>
 80070f8:	4652      	mov	r2, sl
 80070fa:	465b      	mov	r3, fp
 80070fc:	f7f9 fa20 	bl	8000540 <__aeabi_dmul>
 8007100:	a33c      	add	r3, pc, #240	; (adr r3, 80071f4 <__kernel_sin+0x164>)
 8007102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007106:	f7f9 f865 	bl	80001d4 <__adddf3>
 800710a:	4652      	mov	r2, sl
 800710c:	465b      	mov	r3, fp
 800710e:	f7f9 fa17 	bl	8000540 <__aeabi_dmul>
 8007112:	a33a      	add	r3, pc, #232	; (adr r3, 80071fc <__kernel_sin+0x16c>)
 8007114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007118:	f7f9 f85a 	bl	80001d0 <__aeabi_dsub>
 800711c:	4652      	mov	r2, sl
 800711e:	465b      	mov	r3, fp
 8007120:	f7f9 fa0e 	bl	8000540 <__aeabi_dmul>
 8007124:	a337      	add	r3, pc, #220	; (adr r3, 8007204 <__kernel_sin+0x174>)
 8007126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800712a:	f7f9 f853 	bl	80001d4 <__adddf3>
 800712e:	9b01      	ldr	r3, [sp, #4]
 8007130:	4606      	mov	r6, r0
 8007132:	460f      	mov	r7, r1
 8007134:	b9eb      	cbnz	r3, 8007172 <__kernel_sin+0xe2>
 8007136:	4602      	mov	r2, r0
 8007138:	460b      	mov	r3, r1
 800713a:	4650      	mov	r0, sl
 800713c:	4659      	mov	r1, fp
 800713e:	f7f9 f9ff 	bl	8000540 <__aeabi_dmul>
 8007142:	a325      	add	r3, pc, #148	; (adr r3, 80071d8 <__kernel_sin+0x148>)
 8007144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007148:	f7f9 f842 	bl	80001d0 <__aeabi_dsub>
 800714c:	4642      	mov	r2, r8
 800714e:	464b      	mov	r3, r9
 8007150:	f7f9 f9f6 	bl	8000540 <__aeabi_dmul>
 8007154:	4602      	mov	r2, r0
 8007156:	460b      	mov	r3, r1
 8007158:	4620      	mov	r0, r4
 800715a:	4629      	mov	r1, r5
 800715c:	f7f9 f83a 	bl	80001d4 <__adddf3>
 8007160:	4604      	mov	r4, r0
 8007162:	460d      	mov	r5, r1
 8007164:	ec45 4b10 	vmov	d0, r4, r5
 8007168:	b003      	add	sp, #12
 800716a:	ecbd 8b04 	vpop	{d8-d9}
 800716e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007172:	4b1b      	ldr	r3, [pc, #108]	; (80071e0 <__kernel_sin+0x150>)
 8007174:	ec51 0b18 	vmov	r0, r1, d8
 8007178:	2200      	movs	r2, #0
 800717a:	f7f9 f9e1 	bl	8000540 <__aeabi_dmul>
 800717e:	4632      	mov	r2, r6
 8007180:	ec41 0b19 	vmov	d9, r0, r1
 8007184:	463b      	mov	r3, r7
 8007186:	4640      	mov	r0, r8
 8007188:	4649      	mov	r1, r9
 800718a:	f7f9 f9d9 	bl	8000540 <__aeabi_dmul>
 800718e:	4602      	mov	r2, r0
 8007190:	460b      	mov	r3, r1
 8007192:	ec51 0b19 	vmov	r0, r1, d9
 8007196:	f7f9 f81b 	bl	80001d0 <__aeabi_dsub>
 800719a:	4652      	mov	r2, sl
 800719c:	465b      	mov	r3, fp
 800719e:	f7f9 f9cf 	bl	8000540 <__aeabi_dmul>
 80071a2:	ec53 2b18 	vmov	r2, r3, d8
 80071a6:	f7f9 f813 	bl	80001d0 <__aeabi_dsub>
 80071aa:	a30b      	add	r3, pc, #44	; (adr r3, 80071d8 <__kernel_sin+0x148>)
 80071ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071b0:	4606      	mov	r6, r0
 80071b2:	460f      	mov	r7, r1
 80071b4:	4640      	mov	r0, r8
 80071b6:	4649      	mov	r1, r9
 80071b8:	f7f9 f9c2 	bl	8000540 <__aeabi_dmul>
 80071bc:	4602      	mov	r2, r0
 80071be:	460b      	mov	r3, r1
 80071c0:	4630      	mov	r0, r6
 80071c2:	4639      	mov	r1, r7
 80071c4:	f7f9 f806 	bl	80001d4 <__adddf3>
 80071c8:	4602      	mov	r2, r0
 80071ca:	460b      	mov	r3, r1
 80071cc:	4620      	mov	r0, r4
 80071ce:	4629      	mov	r1, r5
 80071d0:	f7f8 fffe 	bl	80001d0 <__aeabi_dsub>
 80071d4:	e7c4      	b.n	8007160 <__kernel_sin+0xd0>
 80071d6:	bf00      	nop
 80071d8:	55555549 	.word	0x55555549
 80071dc:	3fc55555 	.word	0x3fc55555
 80071e0:	3fe00000 	.word	0x3fe00000
 80071e4:	5acfd57c 	.word	0x5acfd57c
 80071e8:	3de5d93a 	.word	0x3de5d93a
 80071ec:	8a2b9ceb 	.word	0x8a2b9ceb
 80071f0:	3e5ae5e6 	.word	0x3e5ae5e6
 80071f4:	57b1fe7d 	.word	0x57b1fe7d
 80071f8:	3ec71de3 	.word	0x3ec71de3
 80071fc:	19c161d5 	.word	0x19c161d5
 8007200:	3f2a01a0 	.word	0x3f2a01a0
 8007204:	1110f8a6 	.word	0x1110f8a6
 8007208:	3f811111 	.word	0x3f811111

0800720c <fabs>:
 800720c:	ec51 0b10 	vmov	r0, r1, d0
 8007210:	ee10 2a10 	vmov	r2, s0
 8007214:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007218:	ec43 2b10 	vmov	d0, r2, r3
 800721c:	4770      	bx	lr
	...

08007220 <floor>:
 8007220:	ec51 0b10 	vmov	r0, r1, d0
 8007224:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007228:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800722c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8007230:	2e13      	cmp	r6, #19
 8007232:	ee10 5a10 	vmov	r5, s0
 8007236:	ee10 8a10 	vmov	r8, s0
 800723a:	460c      	mov	r4, r1
 800723c:	dc32      	bgt.n	80072a4 <floor+0x84>
 800723e:	2e00      	cmp	r6, #0
 8007240:	da14      	bge.n	800726c <floor+0x4c>
 8007242:	a333      	add	r3, pc, #204	; (adr r3, 8007310 <floor+0xf0>)
 8007244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007248:	f7f8 ffc4 	bl	80001d4 <__adddf3>
 800724c:	2200      	movs	r2, #0
 800724e:	2300      	movs	r3, #0
 8007250:	f7f9 fc06 	bl	8000a60 <__aeabi_dcmpgt>
 8007254:	b138      	cbz	r0, 8007266 <floor+0x46>
 8007256:	2c00      	cmp	r4, #0
 8007258:	da57      	bge.n	800730a <floor+0xea>
 800725a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800725e:	431d      	orrs	r5, r3
 8007260:	d001      	beq.n	8007266 <floor+0x46>
 8007262:	4c2d      	ldr	r4, [pc, #180]	; (8007318 <floor+0xf8>)
 8007264:	2500      	movs	r5, #0
 8007266:	4621      	mov	r1, r4
 8007268:	4628      	mov	r0, r5
 800726a:	e025      	b.n	80072b8 <floor+0x98>
 800726c:	4f2b      	ldr	r7, [pc, #172]	; (800731c <floor+0xfc>)
 800726e:	4137      	asrs	r7, r6
 8007270:	ea01 0307 	and.w	r3, r1, r7
 8007274:	4303      	orrs	r3, r0
 8007276:	d01f      	beq.n	80072b8 <floor+0x98>
 8007278:	a325      	add	r3, pc, #148	; (adr r3, 8007310 <floor+0xf0>)
 800727a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800727e:	f7f8 ffa9 	bl	80001d4 <__adddf3>
 8007282:	2200      	movs	r2, #0
 8007284:	2300      	movs	r3, #0
 8007286:	f7f9 fbeb 	bl	8000a60 <__aeabi_dcmpgt>
 800728a:	2800      	cmp	r0, #0
 800728c:	d0eb      	beq.n	8007266 <floor+0x46>
 800728e:	2c00      	cmp	r4, #0
 8007290:	bfbe      	ittt	lt
 8007292:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8007296:	fa43 f606 	asrlt.w	r6, r3, r6
 800729a:	19a4      	addlt	r4, r4, r6
 800729c:	ea24 0407 	bic.w	r4, r4, r7
 80072a0:	2500      	movs	r5, #0
 80072a2:	e7e0      	b.n	8007266 <floor+0x46>
 80072a4:	2e33      	cmp	r6, #51	; 0x33
 80072a6:	dd0b      	ble.n	80072c0 <floor+0xa0>
 80072a8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80072ac:	d104      	bne.n	80072b8 <floor+0x98>
 80072ae:	ee10 2a10 	vmov	r2, s0
 80072b2:	460b      	mov	r3, r1
 80072b4:	f7f8 ff8e 	bl	80001d4 <__adddf3>
 80072b8:	ec41 0b10 	vmov	d0, r0, r1
 80072bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072c0:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80072c4:	f04f 33ff 	mov.w	r3, #4294967295
 80072c8:	fa23 f707 	lsr.w	r7, r3, r7
 80072cc:	4207      	tst	r7, r0
 80072ce:	d0f3      	beq.n	80072b8 <floor+0x98>
 80072d0:	a30f      	add	r3, pc, #60	; (adr r3, 8007310 <floor+0xf0>)
 80072d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072d6:	f7f8 ff7d 	bl	80001d4 <__adddf3>
 80072da:	2200      	movs	r2, #0
 80072dc:	2300      	movs	r3, #0
 80072de:	f7f9 fbbf 	bl	8000a60 <__aeabi_dcmpgt>
 80072e2:	2800      	cmp	r0, #0
 80072e4:	d0bf      	beq.n	8007266 <floor+0x46>
 80072e6:	2c00      	cmp	r4, #0
 80072e8:	da02      	bge.n	80072f0 <floor+0xd0>
 80072ea:	2e14      	cmp	r6, #20
 80072ec:	d103      	bne.n	80072f6 <floor+0xd6>
 80072ee:	3401      	adds	r4, #1
 80072f0:	ea25 0507 	bic.w	r5, r5, r7
 80072f4:	e7b7      	b.n	8007266 <floor+0x46>
 80072f6:	2301      	movs	r3, #1
 80072f8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80072fc:	fa03 f606 	lsl.w	r6, r3, r6
 8007300:	4435      	add	r5, r6
 8007302:	4545      	cmp	r5, r8
 8007304:	bf38      	it	cc
 8007306:	18e4      	addcc	r4, r4, r3
 8007308:	e7f2      	b.n	80072f0 <floor+0xd0>
 800730a:	2500      	movs	r5, #0
 800730c:	462c      	mov	r4, r5
 800730e:	e7aa      	b.n	8007266 <floor+0x46>
 8007310:	8800759c 	.word	0x8800759c
 8007314:	7e37e43c 	.word	0x7e37e43c
 8007318:	bff00000 	.word	0xbff00000
 800731c:	000fffff 	.word	0x000fffff

08007320 <nan>:
 8007320:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8007328 <nan+0x8>
 8007324:	4770      	bx	lr
 8007326:	bf00      	nop
 8007328:	00000000 	.word	0x00000000
 800732c:	7ff80000 	.word	0x7ff80000

08007330 <scalbn>:
 8007330:	b570      	push	{r4, r5, r6, lr}
 8007332:	ec55 4b10 	vmov	r4, r5, d0
 8007336:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800733a:	4606      	mov	r6, r0
 800733c:	462b      	mov	r3, r5
 800733e:	b99a      	cbnz	r2, 8007368 <scalbn+0x38>
 8007340:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007344:	4323      	orrs	r3, r4
 8007346:	d036      	beq.n	80073b6 <scalbn+0x86>
 8007348:	4b39      	ldr	r3, [pc, #228]	; (8007430 <scalbn+0x100>)
 800734a:	4629      	mov	r1, r5
 800734c:	ee10 0a10 	vmov	r0, s0
 8007350:	2200      	movs	r2, #0
 8007352:	f7f9 f8f5 	bl	8000540 <__aeabi_dmul>
 8007356:	4b37      	ldr	r3, [pc, #220]	; (8007434 <scalbn+0x104>)
 8007358:	429e      	cmp	r6, r3
 800735a:	4604      	mov	r4, r0
 800735c:	460d      	mov	r5, r1
 800735e:	da10      	bge.n	8007382 <scalbn+0x52>
 8007360:	a32b      	add	r3, pc, #172	; (adr r3, 8007410 <scalbn+0xe0>)
 8007362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007366:	e03a      	b.n	80073de <scalbn+0xae>
 8007368:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800736c:	428a      	cmp	r2, r1
 800736e:	d10c      	bne.n	800738a <scalbn+0x5a>
 8007370:	ee10 2a10 	vmov	r2, s0
 8007374:	4620      	mov	r0, r4
 8007376:	4629      	mov	r1, r5
 8007378:	f7f8 ff2c 	bl	80001d4 <__adddf3>
 800737c:	4604      	mov	r4, r0
 800737e:	460d      	mov	r5, r1
 8007380:	e019      	b.n	80073b6 <scalbn+0x86>
 8007382:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007386:	460b      	mov	r3, r1
 8007388:	3a36      	subs	r2, #54	; 0x36
 800738a:	4432      	add	r2, r6
 800738c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8007390:	428a      	cmp	r2, r1
 8007392:	dd08      	ble.n	80073a6 <scalbn+0x76>
 8007394:	2d00      	cmp	r5, #0
 8007396:	a120      	add	r1, pc, #128	; (adr r1, 8007418 <scalbn+0xe8>)
 8007398:	e9d1 0100 	ldrd	r0, r1, [r1]
 800739c:	da1c      	bge.n	80073d8 <scalbn+0xa8>
 800739e:	a120      	add	r1, pc, #128	; (adr r1, 8007420 <scalbn+0xf0>)
 80073a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80073a4:	e018      	b.n	80073d8 <scalbn+0xa8>
 80073a6:	2a00      	cmp	r2, #0
 80073a8:	dd08      	ble.n	80073bc <scalbn+0x8c>
 80073aa:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80073ae:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80073b2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80073b6:	ec45 4b10 	vmov	d0, r4, r5
 80073ba:	bd70      	pop	{r4, r5, r6, pc}
 80073bc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80073c0:	da19      	bge.n	80073f6 <scalbn+0xc6>
 80073c2:	f24c 3350 	movw	r3, #50000	; 0xc350
 80073c6:	429e      	cmp	r6, r3
 80073c8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80073cc:	dd0a      	ble.n	80073e4 <scalbn+0xb4>
 80073ce:	a112      	add	r1, pc, #72	; (adr r1, 8007418 <scalbn+0xe8>)
 80073d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d1e2      	bne.n	800739e <scalbn+0x6e>
 80073d8:	a30f      	add	r3, pc, #60	; (adr r3, 8007418 <scalbn+0xe8>)
 80073da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073de:	f7f9 f8af 	bl	8000540 <__aeabi_dmul>
 80073e2:	e7cb      	b.n	800737c <scalbn+0x4c>
 80073e4:	a10a      	add	r1, pc, #40	; (adr r1, 8007410 <scalbn+0xe0>)
 80073e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d0b8      	beq.n	8007360 <scalbn+0x30>
 80073ee:	a10e      	add	r1, pc, #56	; (adr r1, 8007428 <scalbn+0xf8>)
 80073f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80073f4:	e7b4      	b.n	8007360 <scalbn+0x30>
 80073f6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80073fa:	3236      	adds	r2, #54	; 0x36
 80073fc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007400:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8007404:	4620      	mov	r0, r4
 8007406:	4b0c      	ldr	r3, [pc, #48]	; (8007438 <scalbn+0x108>)
 8007408:	2200      	movs	r2, #0
 800740a:	e7e8      	b.n	80073de <scalbn+0xae>
 800740c:	f3af 8000 	nop.w
 8007410:	c2f8f359 	.word	0xc2f8f359
 8007414:	01a56e1f 	.word	0x01a56e1f
 8007418:	8800759c 	.word	0x8800759c
 800741c:	7e37e43c 	.word	0x7e37e43c
 8007420:	8800759c 	.word	0x8800759c
 8007424:	fe37e43c 	.word	0xfe37e43c
 8007428:	c2f8f359 	.word	0xc2f8f359
 800742c:	81a56e1f 	.word	0x81a56e1f
 8007430:	43500000 	.word	0x43500000
 8007434:	ffff3cb0 	.word	0xffff3cb0
 8007438:	3c900000 	.word	0x3c900000

0800743c <_init>:
 800743c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800743e:	bf00      	nop
 8007440:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007442:	bc08      	pop	{r3}
 8007444:	469e      	mov	lr, r3
 8007446:	4770      	bx	lr

08007448 <_fini>:
 8007448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800744a:	bf00      	nop
 800744c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800744e:	bc08      	pop	{r3}
 8007450:	469e      	mov	lr, r3
 8007452:	4770      	bx	lr
