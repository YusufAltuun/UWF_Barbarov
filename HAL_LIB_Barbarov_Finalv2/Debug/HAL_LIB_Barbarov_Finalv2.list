
HAL_LIB_Barbarov_Finalv2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003920  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  08003aa8  08003aa8  00013aa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003bc4  08003bc4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003bc4  08003bc4  00013bc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003bcc  08003bcc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003bcc  08003bcc  00013bcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003bd0  08003bd0  00013bd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003bd4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000148  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001b8  200001b8  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000dfc5  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b31  00000000  00000000  0002e065  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c48  00000000  00000000  0002fb98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000bb0  00000000  00000000  000307e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002098d  00000000  00000000  00031390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000dbb0  00000000  00000000  00051d1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ca039  00000000  00000000  0005f8cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00129906  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003478  00000000  00000000  0012995c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003a90 	.word	0x08003a90

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	08003a90 	.word	0x08003a90

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <dur>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void dur(){
 80004c0:	b480      	push	{r7}
 80004c2:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 1500);
 80004c4:	4b11      	ldr	r3, [pc, #68]	; (800050c <dur+0x4c>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80004cc:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 1500);
 80004ce:	4b0f      	ldr	r3, [pc, #60]	; (800050c <dur+0x4c>)
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80004d6:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 1500);
 80004d8:	4b0c      	ldr	r3, [pc, #48]	; (800050c <dur+0x4c>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80004e0:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 1500);
 80004e2:	4b0a      	ldr	r3, [pc, #40]	; (800050c <dur+0x4c>)
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80004ea:	641a      	str	r2, [r3, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 1500);
 80004ec:	4b08      	ldr	r3, [pc, #32]	; (8000510 <dur+0x50>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80004f4:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 1500);
 80004f6:	4b06      	ldr	r3, [pc, #24]	; (8000510 <dur+0x50>)
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80004fe:	639a      	str	r2, [r3, #56]	; 0x38
	}
 8000500:	bf00      	nop
 8000502:	46bd      	mov	sp, r7
 8000504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop
 800050c:	200000d4 	.word	0x200000d4
 8000510:	2000008c 	.word	0x2000008c

08000514 <ilr>:
void ilr(){
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
	donusum = atoi(gelen);
 8000518:	481b      	ldr	r0, [pc, #108]	; (8000588 <ilr+0x74>)
 800051a:	f003 f9f5 	bl	8003908 <atoi>
 800051e:	4603      	mov	r3, r0
 8000520:	4a1a      	ldr	r2, [pc, #104]	; (800058c <ilr+0x78>)
 8000522:	6013      	str	r3, [r2, #0]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 1500-abs(1500-donusum));
 8000524:	4b19      	ldr	r3, [pc, #100]	; (800058c <ilr+0x78>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	f5c3 63bb 	rsb	r3, r3, #1496	; 0x5d8
 800052c:	3304      	adds	r3, #4
 800052e:	2b00      	cmp	r3, #0
 8000530:	bfb8      	it	lt
 8000532:	425b      	neglt	r3, r3
 8000534:	f5c3 63bb 	rsb	r3, r3, #1496	; 0x5d8
 8000538:	3304      	adds	r3, #4
 800053a:	4a15      	ldr	r2, [pc, #84]	; (8000590 <ilr+0x7c>)
 800053c:	6812      	ldr	r2, [r2, #0]
 800053e:	6353      	str	r3, [r2, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, donusum);
 8000540:	4b12      	ldr	r3, [pc, #72]	; (800058c <ilr+0x78>)
 8000542:	681a      	ldr	r2, [r3, #0]
 8000544:	4b12      	ldr	r3, [pc, #72]	; (8000590 <ilr+0x7c>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 1500-abs(1500-donusum));
 800054a:	4b10      	ldr	r3, [pc, #64]	; (800058c <ilr+0x78>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	f5c3 63bb 	rsb	r3, r3, #1496	; 0x5d8
 8000552:	3304      	adds	r3, #4
 8000554:	2b00      	cmp	r3, #0
 8000556:	bfb8      	it	lt
 8000558:	425b      	neglt	r3, r3
 800055a:	f5c3 63bb 	rsb	r3, r3, #1496	; 0x5d8
 800055e:	3304      	adds	r3, #4
 8000560:	4a0b      	ldr	r2, [pc, #44]	; (8000590 <ilr+0x7c>)
 8000562:	6812      	ldr	r2, [r2, #0]
 8000564:	63d3      	str	r3, [r2, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, donusum);
 8000566:	4b09      	ldr	r3, [pc, #36]	; (800058c <ilr+0x78>)
 8000568:	681a      	ldr	r2, [r3, #0]
 800056a:	4b09      	ldr	r3, [pc, #36]	; (8000590 <ilr+0x7c>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	641a      	str	r2, [r3, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 1550);
 8000570:	4b08      	ldr	r3, [pc, #32]	; (8000594 <ilr+0x80>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	f240 620e 	movw	r2, #1550	; 0x60e
 8000578:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 1550);
 800057a:	4b06      	ldr	r3, [pc, #24]	; (8000594 <ilr+0x80>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	f240 620e 	movw	r2, #1550	; 0x60e
 8000582:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000584:	bf00      	nop
 8000586:	bd80      	pop	{r7, pc}
 8000588:	2000011c 	.word	0x2000011c
 800058c:	200001b0 	.word	0x200001b0
 8000590:	200000d4 	.word	0x200000d4
 8000594:	2000008c 	.word	0x2000008c

08000598 <ger>:
void ger(){
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
	donusum = atoi(gelen);
 800059c:	481b      	ldr	r0, [pc, #108]	; (800060c <ger+0x74>)
 800059e:	f003 f9b3 	bl	8003908 <atoi>
 80005a2:	4603      	mov	r3, r0
 80005a4:	4a1a      	ldr	r2, [pc, #104]	; (8000610 <ger+0x78>)
 80005a6:	6013      	str	r3, [r2, #0]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, donusum);
 80005a8:	4b19      	ldr	r3, [pc, #100]	; (8000610 <ger+0x78>)
 80005aa:	681a      	ldr	r2, [r3, #0]
 80005ac:	4b19      	ldr	r3, [pc, #100]	; (8000614 <ger+0x7c>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 1500-abs(1500-donusum));
 80005b2:	4b17      	ldr	r3, [pc, #92]	; (8000610 <ger+0x78>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	f5c3 63bb 	rsb	r3, r3, #1496	; 0x5d8
 80005ba:	3304      	adds	r3, #4
 80005bc:	2b00      	cmp	r3, #0
 80005be:	bfb8      	it	lt
 80005c0:	425b      	neglt	r3, r3
 80005c2:	f5c3 63bb 	rsb	r3, r3, #1496	; 0x5d8
 80005c6:	3304      	adds	r3, #4
 80005c8:	4a12      	ldr	r2, [pc, #72]	; (8000614 <ger+0x7c>)
 80005ca:	6812      	ldr	r2, [r2, #0]
 80005cc:	6393      	str	r3, [r2, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, donusum);
 80005ce:	4b10      	ldr	r3, [pc, #64]	; (8000610 <ger+0x78>)
 80005d0:	681a      	ldr	r2, [r3, #0]
 80005d2:	4b10      	ldr	r3, [pc, #64]	; (8000614 <ger+0x7c>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 1500-abs(1500-donusum));
 80005d8:	4b0d      	ldr	r3, [pc, #52]	; (8000610 <ger+0x78>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	f5c3 63bb 	rsb	r3, r3, #1496	; 0x5d8
 80005e0:	3304      	adds	r3, #4
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	bfb8      	it	lt
 80005e6:	425b      	neglt	r3, r3
 80005e8:	f5c3 63bb 	rsb	r3, r3, #1496	; 0x5d8
 80005ec:	3304      	adds	r3, #4
 80005ee:	4a09      	ldr	r2, [pc, #36]	; (8000614 <ger+0x7c>)
 80005f0:	6812      	ldr	r2, [r2, #0]
 80005f2:	6413      	str	r3, [r2, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 1550);
 80005f4:	4b08      	ldr	r3, [pc, #32]	; (8000618 <ger+0x80>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f240 620e 	movw	r2, #1550	; 0x60e
 80005fc:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 1550);
 80005fe:	4b06      	ldr	r3, [pc, #24]	; (8000618 <ger+0x80>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	f240 620e 	movw	r2, #1550	; 0x60e
 8000606:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000608:	bf00      	nop
 800060a:	bd80      	pop	{r7, pc}
 800060c:	2000011c 	.word	0x2000011c
 8000610:	200001b0 	.word	0x200001b0
 8000614:	200000d4 	.word	0x200000d4
 8000618:	2000008c 	.word	0x2000008c

0800061c <ykr>:
void ykr(){
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
	donusum = atoi(gelen);
 8000620:	481b      	ldr	r0, [pc, #108]	; (8000690 <ykr+0x74>)
 8000622:	f003 f971 	bl	8003908 <atoi>
 8000626:	4603      	mov	r3, r0
 8000628:	4a1a      	ldr	r2, [pc, #104]	; (8000694 <ykr+0x78>)
 800062a:	6013      	str	r3, [r2, #0]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 1500);
 800062c:	4b1a      	ldr	r3, [pc, #104]	; (8000698 <ykr+0x7c>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000634:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 1500);
 8000636:	4b18      	ldr	r3, [pc, #96]	; (8000698 <ykr+0x7c>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800063e:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 1500);
 8000640:	4b15      	ldr	r3, [pc, #84]	; (8000698 <ykr+0x7c>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000648:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 1500);
 800064a:	4b13      	ldr	r3, [pc, #76]	; (8000698 <ykr+0x7c>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000652:	641a      	str	r2, [r3, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 1500-abs(1500-donusum));
 8000654:	4b0f      	ldr	r3, [pc, #60]	; (8000694 <ykr+0x78>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	f5c3 63bb 	rsb	r3, r3, #1496	; 0x5d8
 800065c:	3304      	adds	r3, #4
 800065e:	2b00      	cmp	r3, #0
 8000660:	bfb8      	it	lt
 8000662:	425b      	neglt	r3, r3
 8000664:	f5c3 63bb 	rsb	r3, r3, #1496	; 0x5d8
 8000668:	3304      	adds	r3, #4
 800066a:	4a0c      	ldr	r2, [pc, #48]	; (800069c <ykr+0x80>)
 800066c:	6812      	ldr	r2, [r2, #0]
 800066e:	6353      	str	r3, [r2, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 1500-abs(1500-donusum));
 8000670:	4b08      	ldr	r3, [pc, #32]	; (8000694 <ykr+0x78>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	f5c3 63bb 	rsb	r3, r3, #1496	; 0x5d8
 8000678:	3304      	adds	r3, #4
 800067a:	2b00      	cmp	r3, #0
 800067c:	bfb8      	it	lt
 800067e:	425b      	neglt	r3, r3
 8000680:	f5c3 63bb 	rsb	r3, r3, #1496	; 0x5d8
 8000684:	3304      	adds	r3, #4
 8000686:	4a05      	ldr	r2, [pc, #20]	; (800069c <ykr+0x80>)
 8000688:	6812      	ldr	r2, [r2, #0]
 800068a:	6393      	str	r3, [r2, #56]	; 0x38
}
 800068c:	bf00      	nop
 800068e:	bd80      	pop	{r7, pc}
 8000690:	2000011c 	.word	0x2000011c
 8000694:	200001b0 	.word	0x200001b0
 8000698:	200000d4 	.word	0x200000d4
 800069c:	2000008c 	.word	0x2000008c

080006a0 <asg>:
void asg(){
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
	donusum = atoi(gelen);
 80006a4:	4812      	ldr	r0, [pc, #72]	; (80006f0 <asg+0x50>)
 80006a6:	f003 f92f 	bl	8003908 <atoi>
 80006aa:	4603      	mov	r3, r0
 80006ac:	4a11      	ldr	r2, [pc, #68]	; (80006f4 <asg+0x54>)
 80006ae:	6013      	str	r3, [r2, #0]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 1500);
 80006b0:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <asg+0x58>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80006b8:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 1500);
 80006ba:	4b0f      	ldr	r3, [pc, #60]	; (80006f8 <asg+0x58>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80006c2:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 1500);
 80006c4:	4b0c      	ldr	r3, [pc, #48]	; (80006f8 <asg+0x58>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80006cc:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 1500);
 80006ce:	4b0a      	ldr	r3, [pc, #40]	; (80006f8 <asg+0x58>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80006d6:	641a      	str	r2, [r3, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, donusum);
 80006d8:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <asg+0x54>)
 80006da:	681a      	ldr	r2, [r3, #0]
 80006dc:	4b07      	ldr	r3, [pc, #28]	; (80006fc <asg+0x5c>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, donusum);
 80006e2:	4b04      	ldr	r3, [pc, #16]	; (80006f4 <asg+0x54>)
 80006e4:	681a      	ldr	r2, [r3, #0]
 80006e6:	4b05      	ldr	r3, [pc, #20]	; (80006fc <asg+0x5c>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	639a      	str	r2, [r3, #56]	; 0x38
}
 80006ec:	bf00      	nop
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	2000011c 	.word	0x2000011c
 80006f4:	200001b0 	.word	0x200001b0
 80006f8:	200000d4 	.word	0x200000d4
 80006fc:	2000008c 	.word	0x2000008c

08000700 <sag>:
void sag(){
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
	donusum = atoi(gelen);
 8000704:	481b      	ldr	r0, [pc, #108]	; (8000774 <sag+0x74>)
 8000706:	f003 f8ff 	bl	8003908 <atoi>
 800070a:	4603      	mov	r3, r0
 800070c:	4a1a      	ldr	r2, [pc, #104]	; (8000778 <sag+0x78>)
 800070e:	6013      	str	r3, [r2, #0]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, donusum);
 8000710:	4b19      	ldr	r3, [pc, #100]	; (8000778 <sag+0x78>)
 8000712:	681a      	ldr	r2, [r3, #0]
 8000714:	4b19      	ldr	r3, [pc, #100]	; (800077c <sag+0x7c>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, donusum);
 800071a:	4b17      	ldr	r3, [pc, #92]	; (8000778 <sag+0x78>)
 800071c:	681a      	ldr	r2, [r3, #0]
 800071e:	4b17      	ldr	r3, [pc, #92]	; (800077c <sag+0x7c>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 1500-abs(1500-donusum));
 8000724:	4b14      	ldr	r3, [pc, #80]	; (8000778 <sag+0x78>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	f5c3 63bb 	rsb	r3, r3, #1496	; 0x5d8
 800072c:	3304      	adds	r3, #4
 800072e:	2b00      	cmp	r3, #0
 8000730:	bfb8      	it	lt
 8000732:	425b      	neglt	r3, r3
 8000734:	f5c3 63bb 	rsb	r3, r3, #1496	; 0x5d8
 8000738:	3304      	adds	r3, #4
 800073a:	4a10      	ldr	r2, [pc, #64]	; (800077c <sag+0x7c>)
 800073c:	6812      	ldr	r2, [r2, #0]
 800073e:	63d3      	str	r3, [r2, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 1500-abs(1500-donusum));
 8000740:	4b0d      	ldr	r3, [pc, #52]	; (8000778 <sag+0x78>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	f5c3 63bb 	rsb	r3, r3, #1496	; 0x5d8
 8000748:	3304      	adds	r3, #4
 800074a:	2b00      	cmp	r3, #0
 800074c:	bfb8      	it	lt
 800074e:	425b      	neglt	r3, r3
 8000750:	f5c3 63bb 	rsb	r3, r3, #1496	; 0x5d8
 8000754:	3304      	adds	r3, #4
 8000756:	4a09      	ldr	r2, [pc, #36]	; (800077c <sag+0x7c>)
 8000758:	6812      	ldr	r2, [r2, #0]
 800075a:	6413      	str	r3, [r2, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 1550);
 800075c:	4b08      	ldr	r3, [pc, #32]	; (8000780 <sag+0x80>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	f240 620e 	movw	r2, #1550	; 0x60e
 8000764:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 1550);
 8000766:	4b06      	ldr	r3, [pc, #24]	; (8000780 <sag+0x80>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	f240 620e 	movw	r2, #1550	; 0x60e
 800076e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000770:	bf00      	nop
 8000772:	bd80      	pop	{r7, pc}
 8000774:	2000011c 	.word	0x2000011c
 8000778:	200001b0 	.word	0x200001b0
 800077c:	200000d4 	.word	0x200000d4
 8000780:	2000008c 	.word	0x2000008c

08000784 <sol>:
void sol(){
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
	donusum = atoi(gelen);
 8000788:	481b      	ldr	r0, [pc, #108]	; (80007f8 <sol+0x74>)
 800078a:	f003 f8bd 	bl	8003908 <atoi>
 800078e:	4603      	mov	r3, r0
 8000790:	4a1a      	ldr	r2, [pc, #104]	; (80007fc <sol+0x78>)
 8000792:	6013      	str	r3, [r2, #0]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 1500-abs(1500-donusum));
 8000794:	4b19      	ldr	r3, [pc, #100]	; (80007fc <sol+0x78>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	f5c3 63bb 	rsb	r3, r3, #1496	; 0x5d8
 800079c:	3304      	adds	r3, #4
 800079e:	2b00      	cmp	r3, #0
 80007a0:	bfb8      	it	lt
 80007a2:	425b      	neglt	r3, r3
 80007a4:	f5c3 63bb 	rsb	r3, r3, #1496	; 0x5d8
 80007a8:	3304      	adds	r3, #4
 80007aa:	4a15      	ldr	r2, [pc, #84]	; (8000800 <sol+0x7c>)
 80007ac:	6812      	ldr	r2, [r2, #0]
 80007ae:	6353      	str	r3, [r2, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 1500-abs(1500-donusum));
 80007b0:	4b12      	ldr	r3, [pc, #72]	; (80007fc <sol+0x78>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	f5c3 63bb 	rsb	r3, r3, #1496	; 0x5d8
 80007b8:	3304      	adds	r3, #4
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	bfb8      	it	lt
 80007be:	425b      	neglt	r3, r3
 80007c0:	f5c3 63bb 	rsb	r3, r3, #1496	; 0x5d8
 80007c4:	3304      	adds	r3, #4
 80007c6:	4a0e      	ldr	r2, [pc, #56]	; (8000800 <sol+0x7c>)
 80007c8:	6812      	ldr	r2, [r2, #0]
 80007ca:	6393      	str	r3, [r2, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, donusum);
 80007cc:	4b0b      	ldr	r3, [pc, #44]	; (80007fc <sol+0x78>)
 80007ce:	681a      	ldr	r2, [r3, #0]
 80007d0:	4b0b      	ldr	r3, [pc, #44]	; (8000800 <sol+0x7c>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, donusum);
 80007d6:	4b09      	ldr	r3, [pc, #36]	; (80007fc <sol+0x78>)
 80007d8:	681a      	ldr	r2, [r3, #0]
 80007da:	4b09      	ldr	r3, [pc, #36]	; (8000800 <sol+0x7c>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	641a      	str	r2, [r3, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 1550);
 80007e0:	4b08      	ldr	r3, [pc, #32]	; (8000804 <sol+0x80>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	f240 620e 	movw	r2, #1550	; 0x60e
 80007e8:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 1550);
 80007ea:	4b06      	ldr	r3, [pc, #24]	; (8000804 <sol+0x80>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	f240 620e 	movw	r2, #1550	; 0x60e
 80007f2:	639a      	str	r2, [r3, #56]	; 0x38
}
 80007f4:	bf00      	nop
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	2000011c 	.word	0x2000011c
 80007fc:	200001b0 	.word	0x200001b0
 8000800:	200000d4 	.word	0x200000d4
 8000804:	2000008c 	.word	0x2000008c

08000808 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800080c:	f000 fca6 	bl	800115c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000810:	f000 f8ba 	bl	8000988 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000814:	f000 fa54 	bl	8000cc0 <MX_GPIO_Init>
  MX_TIM3_Init();
 8000818:	f000 f920 	bl	8000a5c <MX_TIM3_Init>
  MX_TIM4_Init();
 800081c:	f000 f998 	bl	8000b50 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8000820:	f000 fa24 	bl	8000c6c <MX_USART1_UART_Init>
  MX_UART4_Init();
 8000824:	f000 f9f8 	bl	8000c18 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000828:	2100      	movs	r1, #0
 800082a:	4853      	ldr	r0, [pc, #332]	; (8000978 <main+0x170>)
 800082c:	f001 fd1e 	bl	800226c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000830:	2104      	movs	r1, #4
 8000832:	4851      	ldr	r0, [pc, #324]	; (8000978 <main+0x170>)
 8000834:	f001 fd1a 	bl	800226c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000838:	2108      	movs	r1, #8
 800083a:	484f      	ldr	r0, [pc, #316]	; (8000978 <main+0x170>)
 800083c:	f001 fd16 	bl	800226c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8000840:	210c      	movs	r1, #12
 8000842:	484d      	ldr	r0, [pc, #308]	; (8000978 <main+0x170>)
 8000844:	f001 fd12 	bl	800226c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000848:	2100      	movs	r1, #0
 800084a:	484c      	ldr	r0, [pc, #304]	; (800097c <main+0x174>)
 800084c:	f001 fd0e 	bl	800226c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000850:	2104      	movs	r1, #4
 8000852:	484a      	ldr	r0, [pc, #296]	; (800097c <main+0x174>)
 8000854:	f001 fd0a 	bl	800226c <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 1500);
 8000858:	4b47      	ldr	r3, [pc, #284]	; (8000978 <main+0x170>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000860:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 1500);
 8000862:	4b45      	ldr	r3, [pc, #276]	; (8000978 <main+0x170>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800086a:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 1500);
 800086c:	4b42      	ldr	r3, [pc, #264]	; (8000978 <main+0x170>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000874:	63da      	str	r2, [r3, #60]	; 0x3c
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 1500);
 8000876:	4b40      	ldr	r3, [pc, #256]	; (8000978 <main+0x170>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800087e:	641a      	str	r2, [r3, #64]	; 0x40
  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 1500);
 8000880:	4b3e      	ldr	r3, [pc, #248]	; (800097c <main+0x174>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000888:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 1500);
 800088a:	4b3c      	ldr	r3, [pc, #240]	; (800097c <main+0x174>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000892:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_Delay(7000);
 8000894:	f641 3058 	movw	r0, #7000	; 0x1b58
 8000898:	f000 fcd2 	bl	8001240 <HAL_Delay>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_UART_Receive_IT(&huart1, (uint8_t*) gelen, 8);
 800089c:	2208      	movs	r2, #8
 800089e:	4938      	ldr	r1, [pc, #224]	; (8000980 <main+0x178>)
 80008a0:	4838      	ldr	r0, [pc, #224]	; (8000984 <main+0x17c>)
 80008a2:	f002 f9ac 	bl	8002bfe <HAL_UART_Receive_IT>
	  //HAL_UART_Transmit_IT(&huart4, (uint8_t*) gelen, 8);

	  if(gelen[5] == 'd' && gelen[6] == 'u' && gelen[7] == 'r'){
 80008a6:	4b36      	ldr	r3, [pc, #216]	; (8000980 <main+0x178>)
 80008a8:	795b      	ldrb	r3, [r3, #5]
 80008aa:	2b64      	cmp	r3, #100	; 0x64
 80008ac:	d10a      	bne.n	80008c4 <main+0xbc>
 80008ae:	4b34      	ldr	r3, [pc, #208]	; (8000980 <main+0x178>)
 80008b0:	799b      	ldrb	r3, [r3, #6]
 80008b2:	2b75      	cmp	r3, #117	; 0x75
 80008b4:	d106      	bne.n	80008c4 <main+0xbc>
 80008b6:	4b32      	ldr	r3, [pc, #200]	; (8000980 <main+0x178>)
 80008b8:	79db      	ldrb	r3, [r3, #7]
 80008ba:	2b72      	cmp	r3, #114	; 0x72
 80008bc:	d102      	bne.n	80008c4 <main+0xbc>
		  dur();
 80008be:	f7ff fdff 	bl	80004c0 <dur>
 80008c2:	e058      	b.n	8000976 <main+0x16e>
	  }
	  else if(gelen[5] == 'i' && gelen[6] == 'l' && gelen[7] == 'r') {
 80008c4:	4b2e      	ldr	r3, [pc, #184]	; (8000980 <main+0x178>)
 80008c6:	795b      	ldrb	r3, [r3, #5]
 80008c8:	2b69      	cmp	r3, #105	; 0x69
 80008ca:	d10a      	bne.n	80008e2 <main+0xda>
 80008cc:	4b2c      	ldr	r3, [pc, #176]	; (8000980 <main+0x178>)
 80008ce:	799b      	ldrb	r3, [r3, #6]
 80008d0:	2b6c      	cmp	r3, #108	; 0x6c
 80008d2:	d106      	bne.n	80008e2 <main+0xda>
 80008d4:	4b2a      	ldr	r3, [pc, #168]	; (8000980 <main+0x178>)
 80008d6:	79db      	ldrb	r3, [r3, #7]
 80008d8:	2b72      	cmp	r3, #114	; 0x72
 80008da:	d102      	bne.n	80008e2 <main+0xda>
		  ilr();
 80008dc:	f7ff fe1a 	bl	8000514 <ilr>
 80008e0:	e049      	b.n	8000976 <main+0x16e>
	  }
	  else if(gelen[5] == 'g' && gelen[6] == 'e' && gelen[7] == 'r') {
 80008e2:	4b27      	ldr	r3, [pc, #156]	; (8000980 <main+0x178>)
 80008e4:	795b      	ldrb	r3, [r3, #5]
 80008e6:	2b67      	cmp	r3, #103	; 0x67
 80008e8:	d10a      	bne.n	8000900 <main+0xf8>
 80008ea:	4b25      	ldr	r3, [pc, #148]	; (8000980 <main+0x178>)
 80008ec:	799b      	ldrb	r3, [r3, #6]
 80008ee:	2b65      	cmp	r3, #101	; 0x65
 80008f0:	d106      	bne.n	8000900 <main+0xf8>
 80008f2:	4b23      	ldr	r3, [pc, #140]	; (8000980 <main+0x178>)
 80008f4:	79db      	ldrb	r3, [r3, #7]
 80008f6:	2b72      	cmp	r3, #114	; 0x72
 80008f8:	d102      	bne.n	8000900 <main+0xf8>
		  ger();
 80008fa:	f7ff fe4d 	bl	8000598 <ger>
 80008fe:	e03a      	b.n	8000976 <main+0x16e>
	  }
	  else if(gelen[5] == 'y' && gelen[6] == 'k' && gelen[7] == 'r') {
 8000900:	4b1f      	ldr	r3, [pc, #124]	; (8000980 <main+0x178>)
 8000902:	795b      	ldrb	r3, [r3, #5]
 8000904:	2b79      	cmp	r3, #121	; 0x79
 8000906:	d10a      	bne.n	800091e <main+0x116>
 8000908:	4b1d      	ldr	r3, [pc, #116]	; (8000980 <main+0x178>)
 800090a:	799b      	ldrb	r3, [r3, #6]
 800090c:	2b6b      	cmp	r3, #107	; 0x6b
 800090e:	d106      	bne.n	800091e <main+0x116>
 8000910:	4b1b      	ldr	r3, [pc, #108]	; (8000980 <main+0x178>)
 8000912:	79db      	ldrb	r3, [r3, #7]
 8000914:	2b72      	cmp	r3, #114	; 0x72
 8000916:	d102      	bne.n	800091e <main+0x116>
		  ykr();
 8000918:	f7ff fe80 	bl	800061c <ykr>
 800091c:	e02b      	b.n	8000976 <main+0x16e>
	  }
	  else if(gelen[5] == 'a' && gelen[6] == 's' && gelen[7] == 'g') {
 800091e:	4b18      	ldr	r3, [pc, #96]	; (8000980 <main+0x178>)
 8000920:	795b      	ldrb	r3, [r3, #5]
 8000922:	2b61      	cmp	r3, #97	; 0x61
 8000924:	d10a      	bne.n	800093c <main+0x134>
 8000926:	4b16      	ldr	r3, [pc, #88]	; (8000980 <main+0x178>)
 8000928:	799b      	ldrb	r3, [r3, #6]
 800092a:	2b73      	cmp	r3, #115	; 0x73
 800092c:	d106      	bne.n	800093c <main+0x134>
 800092e:	4b14      	ldr	r3, [pc, #80]	; (8000980 <main+0x178>)
 8000930:	79db      	ldrb	r3, [r3, #7]
 8000932:	2b67      	cmp	r3, #103	; 0x67
 8000934:	d102      	bne.n	800093c <main+0x134>
		  asg();
 8000936:	f7ff feb3 	bl	80006a0 <asg>
 800093a:	e01c      	b.n	8000976 <main+0x16e>
	  }
	  else if(gelen[5] == 's' && gelen[6] == 'a' && gelen[7] == 'g') {
 800093c:	4b10      	ldr	r3, [pc, #64]	; (8000980 <main+0x178>)
 800093e:	795b      	ldrb	r3, [r3, #5]
 8000940:	2b73      	cmp	r3, #115	; 0x73
 8000942:	d10a      	bne.n	800095a <main+0x152>
 8000944:	4b0e      	ldr	r3, [pc, #56]	; (8000980 <main+0x178>)
 8000946:	799b      	ldrb	r3, [r3, #6]
 8000948:	2b61      	cmp	r3, #97	; 0x61
 800094a:	d106      	bne.n	800095a <main+0x152>
 800094c:	4b0c      	ldr	r3, [pc, #48]	; (8000980 <main+0x178>)
 800094e:	79db      	ldrb	r3, [r3, #7]
 8000950:	2b67      	cmp	r3, #103	; 0x67
 8000952:	d102      	bne.n	800095a <main+0x152>
		  sag();
 8000954:	f7ff fed4 	bl	8000700 <sag>
 8000958:	e00d      	b.n	8000976 <main+0x16e>
	  }
	  else if(gelen[5] == 's' && gelen[6] == 'o' && gelen[7] == 'l') {
 800095a:	4b09      	ldr	r3, [pc, #36]	; (8000980 <main+0x178>)
 800095c:	795b      	ldrb	r3, [r3, #5]
 800095e:	2b73      	cmp	r3, #115	; 0x73
 8000960:	d19c      	bne.n	800089c <main+0x94>
 8000962:	4b07      	ldr	r3, [pc, #28]	; (8000980 <main+0x178>)
 8000964:	799b      	ldrb	r3, [r3, #6]
 8000966:	2b6f      	cmp	r3, #111	; 0x6f
 8000968:	d198      	bne.n	800089c <main+0x94>
 800096a:	4b05      	ldr	r3, [pc, #20]	; (8000980 <main+0x178>)
 800096c:	79db      	ldrb	r3, [r3, #7]
 800096e:	2b6c      	cmp	r3, #108	; 0x6c
 8000970:	d194      	bne.n	800089c <main+0x94>
		  sol();
 8000972:	f7ff ff07 	bl	8000784 <sol>
	  HAL_UART_Receive_IT(&huart1, (uint8_t*) gelen, 8);
 8000976:	e791      	b.n	800089c <main+0x94>
 8000978:	200000d4 	.word	0x200000d4
 800097c:	2000008c 	.word	0x2000008c
 8000980:	2000011c 	.word	0x2000011c
 8000984:	20000128 	.word	0x20000128

08000988 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b094      	sub	sp, #80	; 0x50
 800098c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800098e:	f107 0320 	add.w	r3, r7, #32
 8000992:	2230      	movs	r2, #48	; 0x30
 8000994:	2100      	movs	r1, #0
 8000996:	4618      	mov	r0, r3
 8000998:	f002 ffe4 	bl	8003964 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800099c:	f107 030c 	add.w	r3, r7, #12
 80009a0:	2200      	movs	r2, #0
 80009a2:	601a      	str	r2, [r3, #0]
 80009a4:	605a      	str	r2, [r3, #4]
 80009a6:	609a      	str	r2, [r3, #8]
 80009a8:	60da      	str	r2, [r3, #12]
 80009aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ac:	2300      	movs	r3, #0
 80009ae:	60bb      	str	r3, [r7, #8]
 80009b0:	4b28      	ldr	r3, [pc, #160]	; (8000a54 <SystemClock_Config+0xcc>)
 80009b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b4:	4a27      	ldr	r2, [pc, #156]	; (8000a54 <SystemClock_Config+0xcc>)
 80009b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009ba:	6413      	str	r3, [r2, #64]	; 0x40
 80009bc:	4b25      	ldr	r3, [pc, #148]	; (8000a54 <SystemClock_Config+0xcc>)
 80009be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009c4:	60bb      	str	r3, [r7, #8]
 80009c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009c8:	2300      	movs	r3, #0
 80009ca:	607b      	str	r3, [r7, #4]
 80009cc:	4b22      	ldr	r3, [pc, #136]	; (8000a58 <SystemClock_Config+0xd0>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	4a21      	ldr	r2, [pc, #132]	; (8000a58 <SystemClock_Config+0xd0>)
 80009d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009d6:	6013      	str	r3, [r2, #0]
 80009d8:	4b1f      	ldr	r3, [pc, #124]	; (8000a58 <SystemClock_Config+0xd0>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009e0:	607b      	str	r3, [r7, #4]
 80009e2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009e4:	2302      	movs	r3, #2
 80009e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009e8:	2301      	movs	r3, #1
 80009ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009ec:	2310      	movs	r3, #16
 80009ee:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009f0:	2302      	movs	r3, #2
 80009f2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009f4:	2300      	movs	r3, #0
 80009f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80009f8:	2308      	movs	r3, #8
 80009fa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80009fc:	23a8      	movs	r3, #168	; 0xa8
 80009fe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a00:	2302      	movs	r3, #2
 8000a02:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a04:	2304      	movs	r3, #4
 8000a06:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a08:	f107 0320 	add.w	r3, r7, #32
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f000 ff95 	bl	800193c <HAL_RCC_OscConfig>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000a18:	f000 f9b2 	bl	8000d80 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a1c:	230f      	movs	r3, #15
 8000a1e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a20:	2302      	movs	r3, #2
 8000a22:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a24:	2300      	movs	r3, #0
 8000a26:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a28:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a2c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a32:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a34:	f107 030c 	add.w	r3, r7, #12
 8000a38:	2105      	movs	r1, #5
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f001 f9f6 	bl	8001e2c <HAL_RCC_ClockConfig>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000a46:	f000 f99b 	bl	8000d80 <Error_Handler>
  }
}
 8000a4a:	bf00      	nop
 8000a4c:	3750      	adds	r7, #80	; 0x50
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	40023800 	.word	0x40023800
 8000a58:	40007000 	.word	0x40007000

08000a5c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b08a      	sub	sp, #40	; 0x28
 8000a60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a62:	f107 0320 	add.w	r3, r7, #32
 8000a66:	2200      	movs	r2, #0
 8000a68:	601a      	str	r2, [r3, #0]
 8000a6a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a6c:	1d3b      	adds	r3, r7, #4
 8000a6e:	2200      	movs	r2, #0
 8000a70:	601a      	str	r2, [r3, #0]
 8000a72:	605a      	str	r2, [r3, #4]
 8000a74:	609a      	str	r2, [r3, #8]
 8000a76:	60da      	str	r2, [r3, #12]
 8000a78:	611a      	str	r2, [r3, #16]
 8000a7a:	615a      	str	r2, [r3, #20]
 8000a7c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a7e:	4b32      	ldr	r3, [pc, #200]	; (8000b48 <MX_TIM3_Init+0xec>)
 8000a80:	4a32      	ldr	r2, [pc, #200]	; (8000b4c <MX_TIM3_Init+0xf0>)
 8000a82:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 8000a84:	4b30      	ldr	r3, [pc, #192]	; (8000b48 <MX_TIM3_Init+0xec>)
 8000a86:	2253      	movs	r2, #83	; 0x53
 8000a88:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a8a:	4b2f      	ldr	r3, [pc, #188]	; (8000b48 <MX_TIM3_Init+0xec>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 8000a90:	4b2d      	ldr	r3, [pc, #180]	; (8000b48 <MX_TIM3_Init+0xec>)
 8000a92:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000a96:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a98:	4b2b      	ldr	r3, [pc, #172]	; (8000b48 <MX_TIM3_Init+0xec>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a9e:	4b2a      	ldr	r3, [pc, #168]	; (8000b48 <MX_TIM3_Init+0xec>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000aa4:	4828      	ldr	r0, [pc, #160]	; (8000b48 <MX_TIM3_Init+0xec>)
 8000aa6:	f001 fb91 	bl	80021cc <HAL_TIM_PWM_Init>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000ab0:	f000 f966 	bl	8000d80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000abc:	f107 0320 	add.w	r3, r7, #32
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4821      	ldr	r0, [pc, #132]	; (8000b48 <MX_TIM3_Init+0xec>)
 8000ac4:	f001 ffd2 	bl	8002a6c <HAL_TIMEx_MasterConfigSynchronization>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000ace:	f000 f957 	bl	8000d80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ad2:	2360      	movs	r3, #96	; 0x60
 8000ad4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ada:	2300      	movs	r3, #0
 8000adc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ae2:	1d3b      	adds	r3, r7, #4
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	4817      	ldr	r0, [pc, #92]	; (8000b48 <MX_TIM3_Init+0xec>)
 8000aea:	f001 fc87 	bl	80023fc <HAL_TIM_PWM_ConfigChannel>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000af4:	f000 f944 	bl	8000d80 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000af8:	1d3b      	adds	r3, r7, #4
 8000afa:	2204      	movs	r2, #4
 8000afc:	4619      	mov	r1, r3
 8000afe:	4812      	ldr	r0, [pc, #72]	; (8000b48 <MX_TIM3_Init+0xec>)
 8000b00:	f001 fc7c 	bl	80023fc <HAL_TIM_PWM_ConfigChannel>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000b0a:	f000 f939 	bl	8000d80 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000b0e:	1d3b      	adds	r3, r7, #4
 8000b10:	2208      	movs	r2, #8
 8000b12:	4619      	mov	r1, r3
 8000b14:	480c      	ldr	r0, [pc, #48]	; (8000b48 <MX_TIM3_Init+0xec>)
 8000b16:	f001 fc71 	bl	80023fc <HAL_TIM_PWM_ConfigChannel>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8000b20:	f000 f92e 	bl	8000d80 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000b24:	1d3b      	adds	r3, r7, #4
 8000b26:	220c      	movs	r2, #12
 8000b28:	4619      	mov	r1, r3
 8000b2a:	4807      	ldr	r0, [pc, #28]	; (8000b48 <MX_TIM3_Init+0xec>)
 8000b2c:	f001 fc66 	bl	80023fc <HAL_TIM_PWM_ConfigChannel>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 8000b36:	f000 f923 	bl	8000d80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000b3a:	4803      	ldr	r0, [pc, #12]	; (8000b48 <MX_TIM3_Init+0xec>)
 8000b3c:	f000 f986 	bl	8000e4c <HAL_TIM_MspPostInit>

}
 8000b40:	bf00      	nop
 8000b42:	3728      	adds	r7, #40	; 0x28
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	200000d4 	.word	0x200000d4
 8000b4c:	40000400 	.word	0x40000400

08000b50 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b08a      	sub	sp, #40	; 0x28
 8000b54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b56:	f107 0320 	add.w	r3, r7, #32
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	601a      	str	r2, [r3, #0]
 8000b5e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b60:	1d3b      	adds	r3, r7, #4
 8000b62:	2200      	movs	r2, #0
 8000b64:	601a      	str	r2, [r3, #0]
 8000b66:	605a      	str	r2, [r3, #4]
 8000b68:	609a      	str	r2, [r3, #8]
 8000b6a:	60da      	str	r2, [r3, #12]
 8000b6c:	611a      	str	r2, [r3, #16]
 8000b6e:	615a      	str	r2, [r3, #20]
 8000b70:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000b72:	4b27      	ldr	r3, [pc, #156]	; (8000c10 <MX_TIM4_Init+0xc0>)
 8000b74:	4a27      	ldr	r2, [pc, #156]	; (8000c14 <MX_TIM4_Init+0xc4>)
 8000b76:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 8000b78:	4b25      	ldr	r3, [pc, #148]	; (8000c10 <MX_TIM4_Init+0xc0>)
 8000b7a:	2253      	movs	r2, #83	; 0x53
 8000b7c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b7e:	4b24      	ldr	r3, [pc, #144]	; (8000c10 <MX_TIM4_Init+0xc0>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 19999;
 8000b84:	4b22      	ldr	r3, [pc, #136]	; (8000c10 <MX_TIM4_Init+0xc0>)
 8000b86:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000b8a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b8c:	4b20      	ldr	r3, [pc, #128]	; (8000c10 <MX_TIM4_Init+0xc0>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b92:	4b1f      	ldr	r3, [pc, #124]	; (8000c10 <MX_TIM4_Init+0xc0>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000b98:	481d      	ldr	r0, [pc, #116]	; (8000c10 <MX_TIM4_Init+0xc0>)
 8000b9a:	f001 fb17 	bl	80021cc <HAL_TIM_PWM_Init>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8000ba4:	f000 f8ec 	bl	8000d80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bac:	2300      	movs	r3, #0
 8000bae:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000bb0:	f107 0320 	add.w	r3, r7, #32
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	4816      	ldr	r0, [pc, #88]	; (8000c10 <MX_TIM4_Init+0xc0>)
 8000bb8:	f001 ff58 	bl	8002a6c <HAL_TIMEx_MasterConfigSynchronization>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8000bc2:	f000 f8dd 	bl	8000d80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bc6:	2360      	movs	r3, #96	; 0x60
 8000bc8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000bd6:	1d3b      	adds	r3, r7, #4
 8000bd8:	2200      	movs	r2, #0
 8000bda:	4619      	mov	r1, r3
 8000bdc:	480c      	ldr	r0, [pc, #48]	; (8000c10 <MX_TIM4_Init+0xc0>)
 8000bde:	f001 fc0d 	bl	80023fc <HAL_TIM_PWM_ConfigChannel>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8000be8:	f000 f8ca 	bl	8000d80 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000bec:	1d3b      	adds	r3, r7, #4
 8000bee:	2204      	movs	r2, #4
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	4807      	ldr	r0, [pc, #28]	; (8000c10 <MX_TIM4_Init+0xc0>)
 8000bf4:	f001 fc02 	bl	80023fc <HAL_TIM_PWM_ConfigChannel>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000bfe:	f000 f8bf 	bl	8000d80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000c02:	4803      	ldr	r0, [pc, #12]	; (8000c10 <MX_TIM4_Init+0xc0>)
 8000c04:	f000 f922 	bl	8000e4c <HAL_TIM_MspPostInit>

}
 8000c08:	bf00      	nop
 8000c0a:	3728      	adds	r7, #40	; 0x28
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	2000008c 	.word	0x2000008c
 8000c14:	40000800 	.word	0x40000800

08000c18 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000c1c:	4b11      	ldr	r3, [pc, #68]	; (8000c64 <MX_UART4_Init+0x4c>)
 8000c1e:	4a12      	ldr	r2, [pc, #72]	; (8000c68 <MX_UART4_Init+0x50>)
 8000c20:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000c22:	4b10      	ldr	r3, [pc, #64]	; (8000c64 <MX_UART4_Init+0x4c>)
 8000c24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c28:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000c2a:	4b0e      	ldr	r3, [pc, #56]	; (8000c64 <MX_UART4_Init+0x4c>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000c30:	4b0c      	ldr	r3, [pc, #48]	; (8000c64 <MX_UART4_Init+0x4c>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000c36:	4b0b      	ldr	r3, [pc, #44]	; (8000c64 <MX_UART4_Init+0x4c>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000c3c:	4b09      	ldr	r3, [pc, #36]	; (8000c64 <MX_UART4_Init+0x4c>)
 8000c3e:	220c      	movs	r2, #12
 8000c40:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c42:	4b08      	ldr	r3, [pc, #32]	; (8000c64 <MX_UART4_Init+0x4c>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c48:	4b06      	ldr	r3, [pc, #24]	; (8000c64 <MX_UART4_Init+0x4c>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000c4e:	4805      	ldr	r0, [pc, #20]	; (8000c64 <MX_UART4_Init+0x4c>)
 8000c50:	f001 ff88 	bl	8002b64 <HAL_UART_Init>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8000c5a:	f000 f891 	bl	8000d80 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000c5e:	bf00      	nop
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	2000016c 	.word	0x2000016c
 8000c68:	40004c00 	.word	0x40004c00

08000c6c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c70:	4b11      	ldr	r3, [pc, #68]	; (8000cb8 <MX_USART1_UART_Init+0x4c>)
 8000c72:	4a12      	ldr	r2, [pc, #72]	; (8000cbc <MX_USART1_UART_Init+0x50>)
 8000c74:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000c76:	4b10      	ldr	r3, [pc, #64]	; (8000cb8 <MX_USART1_UART_Init+0x4c>)
 8000c78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c7c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c7e:	4b0e      	ldr	r3, [pc, #56]	; (8000cb8 <MX_USART1_UART_Init+0x4c>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c84:	4b0c      	ldr	r3, [pc, #48]	; (8000cb8 <MX_USART1_UART_Init+0x4c>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c8a:	4b0b      	ldr	r3, [pc, #44]	; (8000cb8 <MX_USART1_UART_Init+0x4c>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c90:	4b09      	ldr	r3, [pc, #36]	; (8000cb8 <MX_USART1_UART_Init+0x4c>)
 8000c92:	220c      	movs	r2, #12
 8000c94:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c96:	4b08      	ldr	r3, [pc, #32]	; (8000cb8 <MX_USART1_UART_Init+0x4c>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c9c:	4b06      	ldr	r3, [pc, #24]	; (8000cb8 <MX_USART1_UART_Init+0x4c>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ca2:	4805      	ldr	r0, [pc, #20]	; (8000cb8 <MX_USART1_UART_Init+0x4c>)
 8000ca4:	f001 ff5e 	bl	8002b64 <HAL_UART_Init>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000cae:	f000 f867 	bl	8000d80 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000cb2:	bf00      	nop
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	20000128 	.word	0x20000128
 8000cbc:	40011000 	.word	0x40011000

08000cc0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b08a      	sub	sp, #40	; 0x28
 8000cc4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc6:	f107 0314 	add.w	r3, r7, #20
 8000cca:	2200      	movs	r2, #0
 8000ccc:	601a      	str	r2, [r3, #0]
 8000cce:	605a      	str	r2, [r3, #4]
 8000cd0:	609a      	str	r2, [r3, #8]
 8000cd2:	60da      	str	r2, [r3, #12]
 8000cd4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	613b      	str	r3, [r7, #16]
 8000cda:	4b27      	ldr	r3, [pc, #156]	; (8000d78 <MX_GPIO_Init+0xb8>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cde:	4a26      	ldr	r2, [pc, #152]	; (8000d78 <MX_GPIO_Init+0xb8>)
 8000ce0:	f043 0301 	orr.w	r3, r3, #1
 8000ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce6:	4b24      	ldr	r3, [pc, #144]	; (8000d78 <MX_GPIO_Init+0xb8>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cea:	f003 0301 	and.w	r3, r3, #1
 8000cee:	613b      	str	r3, [r7, #16]
 8000cf0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	60fb      	str	r3, [r7, #12]
 8000cf6:	4b20      	ldr	r3, [pc, #128]	; (8000d78 <MX_GPIO_Init+0xb8>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	4a1f      	ldr	r2, [pc, #124]	; (8000d78 <MX_GPIO_Init+0xb8>)
 8000cfc:	f043 0302 	orr.w	r3, r3, #2
 8000d00:	6313      	str	r3, [r2, #48]	; 0x30
 8000d02:	4b1d      	ldr	r3, [pc, #116]	; (8000d78 <MX_GPIO_Init+0xb8>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d06:	f003 0302 	and.w	r3, r3, #2
 8000d0a:	60fb      	str	r3, [r7, #12]
 8000d0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d0e:	2300      	movs	r3, #0
 8000d10:	60bb      	str	r3, [r7, #8]
 8000d12:	4b19      	ldr	r3, [pc, #100]	; (8000d78 <MX_GPIO_Init+0xb8>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	4a18      	ldr	r2, [pc, #96]	; (8000d78 <MX_GPIO_Init+0xb8>)
 8000d18:	f043 0310 	orr.w	r3, r3, #16
 8000d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d1e:	4b16      	ldr	r3, [pc, #88]	; (8000d78 <MX_GPIO_Init+0xb8>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d22:	f003 0310 	and.w	r3, r3, #16
 8000d26:	60bb      	str	r3, [r7, #8]
 8000d28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	607b      	str	r3, [r7, #4]
 8000d2e:	4b12      	ldr	r3, [pc, #72]	; (8000d78 <MX_GPIO_Init+0xb8>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d32:	4a11      	ldr	r2, [pc, #68]	; (8000d78 <MX_GPIO_Init+0xb8>)
 8000d34:	f043 0308 	orr.w	r3, r3, #8
 8000d38:	6313      	str	r3, [r2, #48]	; 0x30
 8000d3a:	4b0f      	ldr	r3, [pc, #60]	; (8000d78 <MX_GPIO_Init+0xb8>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3e:	f003 0308 	and.w	r3, r3, #8
 8000d42:	607b      	str	r3, [r7, #4]
 8000d44:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8000d46:	2200      	movs	r2, #0
 8000d48:	f44f 7160 	mov.w	r1, #896	; 0x380
 8000d4c:	480b      	ldr	r0, [pc, #44]	; (8000d7c <MX_GPIO_Init+0xbc>)
 8000d4e:	f000 fddb 	bl	8001908 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE7 PE8 PE9 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8000d52:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000d56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d58:	2301      	movs	r3, #1
 8000d5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d60:	2300      	movs	r3, #0
 8000d62:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d64:	f107 0314 	add.w	r3, r7, #20
 8000d68:	4619      	mov	r1, r3
 8000d6a:	4804      	ldr	r0, [pc, #16]	; (8000d7c <MX_GPIO_Init+0xbc>)
 8000d6c:	f000 fc30 	bl	80015d0 <HAL_GPIO_Init>

}
 8000d70:	bf00      	nop
 8000d72:	3728      	adds	r7, #40	; 0x28
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	40023800 	.word	0x40023800
 8000d7c:	40021000 	.word	0x40021000

08000d80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d84:	b672      	cpsid	i
}
 8000d86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d88:	e7fe      	b.n	8000d88 <Error_Handler+0x8>
	...

08000d8c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b083      	sub	sp, #12
 8000d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d92:	2300      	movs	r3, #0
 8000d94:	607b      	str	r3, [r7, #4]
 8000d96:	4b10      	ldr	r3, [pc, #64]	; (8000dd8 <HAL_MspInit+0x4c>)
 8000d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d9a:	4a0f      	ldr	r2, [pc, #60]	; (8000dd8 <HAL_MspInit+0x4c>)
 8000d9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000da0:	6453      	str	r3, [r2, #68]	; 0x44
 8000da2:	4b0d      	ldr	r3, [pc, #52]	; (8000dd8 <HAL_MspInit+0x4c>)
 8000da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000da6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000daa:	607b      	str	r3, [r7, #4]
 8000dac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dae:	2300      	movs	r3, #0
 8000db0:	603b      	str	r3, [r7, #0]
 8000db2:	4b09      	ldr	r3, [pc, #36]	; (8000dd8 <HAL_MspInit+0x4c>)
 8000db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db6:	4a08      	ldr	r2, [pc, #32]	; (8000dd8 <HAL_MspInit+0x4c>)
 8000db8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dbc:	6413      	str	r3, [r2, #64]	; 0x40
 8000dbe:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <HAL_MspInit+0x4c>)
 8000dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dc6:	603b      	str	r3, [r7, #0]
 8000dc8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dca:	bf00      	nop
 8000dcc:	370c      	adds	r7, #12
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	40023800 	.word	0x40023800

08000ddc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b085      	sub	sp, #20
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a15      	ldr	r2, [pc, #84]	; (8000e40 <HAL_TIM_PWM_MspInit+0x64>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d10e      	bne.n	8000e0c <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000dee:	2300      	movs	r3, #0
 8000df0:	60fb      	str	r3, [r7, #12]
 8000df2:	4b14      	ldr	r3, [pc, #80]	; (8000e44 <HAL_TIM_PWM_MspInit+0x68>)
 8000df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df6:	4a13      	ldr	r2, [pc, #76]	; (8000e44 <HAL_TIM_PWM_MspInit+0x68>)
 8000df8:	f043 0302 	orr.w	r3, r3, #2
 8000dfc:	6413      	str	r3, [r2, #64]	; 0x40
 8000dfe:	4b11      	ldr	r3, [pc, #68]	; (8000e44 <HAL_TIM_PWM_MspInit+0x68>)
 8000e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e02:	f003 0302 	and.w	r3, r3, #2
 8000e06:	60fb      	str	r3, [r7, #12]
 8000e08:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000e0a:	e012      	b.n	8000e32 <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM4)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a0d      	ldr	r2, [pc, #52]	; (8000e48 <HAL_TIM_PWM_MspInit+0x6c>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d10d      	bne.n	8000e32 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000e16:	2300      	movs	r3, #0
 8000e18:	60bb      	str	r3, [r7, #8]
 8000e1a:	4b0a      	ldr	r3, [pc, #40]	; (8000e44 <HAL_TIM_PWM_MspInit+0x68>)
 8000e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1e:	4a09      	ldr	r2, [pc, #36]	; (8000e44 <HAL_TIM_PWM_MspInit+0x68>)
 8000e20:	f043 0304 	orr.w	r3, r3, #4
 8000e24:	6413      	str	r3, [r2, #64]	; 0x40
 8000e26:	4b07      	ldr	r3, [pc, #28]	; (8000e44 <HAL_TIM_PWM_MspInit+0x68>)
 8000e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2a:	f003 0304 	and.w	r3, r3, #4
 8000e2e:	60bb      	str	r3, [r7, #8]
 8000e30:	68bb      	ldr	r3, [r7, #8]
}
 8000e32:	bf00      	nop
 8000e34:	3714      	adds	r7, #20
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	40000400 	.word	0x40000400
 8000e44:	40023800 	.word	0x40023800
 8000e48:	40000800 	.word	0x40000800

08000e4c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b08a      	sub	sp, #40	; 0x28
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e54:	f107 0314 	add.w	r3, r7, #20
 8000e58:	2200      	movs	r2, #0
 8000e5a:	601a      	str	r2, [r3, #0]
 8000e5c:	605a      	str	r2, [r3, #4]
 8000e5e:	609a      	str	r2, [r3, #8]
 8000e60:	60da      	str	r2, [r3, #12]
 8000e62:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a33      	ldr	r2, [pc, #204]	; (8000f38 <HAL_TIM_MspPostInit+0xec>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d13c      	bne.n	8000ee8 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e6e:	2300      	movs	r3, #0
 8000e70:	613b      	str	r3, [r7, #16]
 8000e72:	4b32      	ldr	r3, [pc, #200]	; (8000f3c <HAL_TIM_MspPostInit+0xf0>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e76:	4a31      	ldr	r2, [pc, #196]	; (8000f3c <HAL_TIM_MspPostInit+0xf0>)
 8000e78:	f043 0301 	orr.w	r3, r3, #1
 8000e7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e7e:	4b2f      	ldr	r3, [pc, #188]	; (8000f3c <HAL_TIM_MspPostInit+0xf0>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e82:	f003 0301 	and.w	r3, r3, #1
 8000e86:	613b      	str	r3, [r7, #16]
 8000e88:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	60fb      	str	r3, [r7, #12]
 8000e8e:	4b2b      	ldr	r3, [pc, #172]	; (8000f3c <HAL_TIM_MspPostInit+0xf0>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e92:	4a2a      	ldr	r2, [pc, #168]	; (8000f3c <HAL_TIM_MspPostInit+0xf0>)
 8000e94:	f043 0302 	orr.w	r3, r3, #2
 8000e98:	6313      	str	r3, [r2, #48]	; 0x30
 8000e9a:	4b28      	ldr	r3, [pc, #160]	; (8000f3c <HAL_TIM_MspPostInit+0xf0>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9e:	f003 0302 	and.w	r3, r3, #2
 8000ea2:	60fb      	str	r3, [r7, #12]
 8000ea4:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ea6:	23c0      	movs	r3, #192	; 0xc0
 8000ea8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eaa:	2302      	movs	r3, #2
 8000eac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000eb6:	2302      	movs	r3, #2
 8000eb8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eba:	f107 0314 	add.w	r3, r7, #20
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	481f      	ldr	r0, [pc, #124]	; (8000f40 <HAL_TIM_MspPostInit+0xf4>)
 8000ec2:	f000 fb85 	bl	80015d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000ec6:	2303      	movs	r3, #3
 8000ec8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eca:	2302      	movs	r3, #2
 8000ecc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000ed6:	2302      	movs	r3, #2
 8000ed8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eda:	f107 0314 	add.w	r3, r7, #20
 8000ede:	4619      	mov	r1, r3
 8000ee0:	4818      	ldr	r0, [pc, #96]	; (8000f44 <HAL_TIM_MspPostInit+0xf8>)
 8000ee2:	f000 fb75 	bl	80015d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000ee6:	e023      	b.n	8000f30 <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM4)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a16      	ldr	r2, [pc, #88]	; (8000f48 <HAL_TIM_MspPostInit+0xfc>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d11e      	bne.n	8000f30 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	60bb      	str	r3, [r7, #8]
 8000ef6:	4b11      	ldr	r3, [pc, #68]	; (8000f3c <HAL_TIM_MspPostInit+0xf0>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efa:	4a10      	ldr	r2, [pc, #64]	; (8000f3c <HAL_TIM_MspPostInit+0xf0>)
 8000efc:	f043 0308 	orr.w	r3, r3, #8
 8000f00:	6313      	str	r3, [r2, #48]	; 0x30
 8000f02:	4b0e      	ldr	r3, [pc, #56]	; (8000f3c <HAL_TIM_MspPostInit+0xf0>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f06:	f003 0308 	and.w	r3, r3, #8
 8000f0a:	60bb      	str	r3, [r7, #8]
 8000f0c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000f0e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000f12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f14:	2302      	movs	r3, #2
 8000f16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000f20:	2302      	movs	r3, #2
 8000f22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f24:	f107 0314 	add.w	r3, r7, #20
 8000f28:	4619      	mov	r1, r3
 8000f2a:	4808      	ldr	r0, [pc, #32]	; (8000f4c <HAL_TIM_MspPostInit+0x100>)
 8000f2c:	f000 fb50 	bl	80015d0 <HAL_GPIO_Init>
}
 8000f30:	bf00      	nop
 8000f32:	3728      	adds	r7, #40	; 0x28
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	40000400 	.word	0x40000400
 8000f3c:	40023800 	.word	0x40023800
 8000f40:	40020000 	.word	0x40020000
 8000f44:	40020400 	.word	0x40020400
 8000f48:	40000800 	.word	0x40000800
 8000f4c:	40020c00 	.word	0x40020c00

08000f50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b08c      	sub	sp, #48	; 0x30
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f58:	f107 031c 	add.w	r3, r7, #28
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	601a      	str	r2, [r3, #0]
 8000f60:	605a      	str	r2, [r3, #4]
 8000f62:	609a      	str	r2, [r3, #8]
 8000f64:	60da      	str	r2, [r3, #12]
 8000f66:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a3a      	ldr	r2, [pc, #232]	; (8001058 <HAL_UART_MspInit+0x108>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d134      	bne.n	8000fdc <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000f72:	2300      	movs	r3, #0
 8000f74:	61bb      	str	r3, [r7, #24]
 8000f76:	4b39      	ldr	r3, [pc, #228]	; (800105c <HAL_UART_MspInit+0x10c>)
 8000f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7a:	4a38      	ldr	r2, [pc, #224]	; (800105c <HAL_UART_MspInit+0x10c>)
 8000f7c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000f80:	6413      	str	r3, [r2, #64]	; 0x40
 8000f82:	4b36      	ldr	r3, [pc, #216]	; (800105c <HAL_UART_MspInit+0x10c>)
 8000f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f86:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000f8a:	61bb      	str	r3, [r7, #24]
 8000f8c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f8e:	2300      	movs	r3, #0
 8000f90:	617b      	str	r3, [r7, #20]
 8000f92:	4b32      	ldr	r3, [pc, #200]	; (800105c <HAL_UART_MspInit+0x10c>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f96:	4a31      	ldr	r2, [pc, #196]	; (800105c <HAL_UART_MspInit+0x10c>)
 8000f98:	f043 0301 	orr.w	r3, r3, #1
 8000f9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f9e:	4b2f      	ldr	r3, [pc, #188]	; (800105c <HAL_UART_MspInit+0x10c>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa2:	f003 0301 	and.w	r3, r3, #1
 8000fa6:	617b      	str	r3, [r7, #20]
 8000fa8:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000faa:	2303      	movs	r3, #3
 8000fac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fae:	2302      	movs	r3, #2
 8000fb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fb6:	2303      	movs	r3, #3
 8000fb8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000fba:	2308      	movs	r3, #8
 8000fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fbe:	f107 031c 	add.w	r3, r7, #28
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	4826      	ldr	r0, [pc, #152]	; (8001060 <HAL_UART_MspInit+0x110>)
 8000fc6:	f000 fb03 	bl	80015d0 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8000fca:	2200      	movs	r2, #0
 8000fcc:	2100      	movs	r1, #0
 8000fce:	2034      	movs	r0, #52	; 0x34
 8000fd0:	f000 fa35 	bl	800143e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000fd4:	2034      	movs	r0, #52	; 0x34
 8000fd6:	f000 fa4e 	bl	8001476 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000fda:	e039      	b.n	8001050 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART1)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a20      	ldr	r2, [pc, #128]	; (8001064 <HAL_UART_MspInit+0x114>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d134      	bne.n	8001050 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	613b      	str	r3, [r7, #16]
 8000fea:	4b1c      	ldr	r3, [pc, #112]	; (800105c <HAL_UART_MspInit+0x10c>)
 8000fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fee:	4a1b      	ldr	r2, [pc, #108]	; (800105c <HAL_UART_MspInit+0x10c>)
 8000ff0:	f043 0310 	orr.w	r3, r3, #16
 8000ff4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ff6:	4b19      	ldr	r3, [pc, #100]	; (800105c <HAL_UART_MspInit+0x10c>)
 8000ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ffa:	f003 0310 	and.w	r3, r3, #16
 8000ffe:	613b      	str	r3, [r7, #16]
 8001000:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001002:	2300      	movs	r3, #0
 8001004:	60fb      	str	r3, [r7, #12]
 8001006:	4b15      	ldr	r3, [pc, #84]	; (800105c <HAL_UART_MspInit+0x10c>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100a:	4a14      	ldr	r2, [pc, #80]	; (800105c <HAL_UART_MspInit+0x10c>)
 800100c:	f043 0301 	orr.w	r3, r3, #1
 8001010:	6313      	str	r3, [r2, #48]	; 0x30
 8001012:	4b12      	ldr	r3, [pc, #72]	; (800105c <HAL_UART_MspInit+0x10c>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001016:	f003 0301 	and.w	r3, r3, #1
 800101a:	60fb      	str	r3, [r7, #12]
 800101c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800101e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001022:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001024:	2302      	movs	r3, #2
 8001026:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001028:	2300      	movs	r3, #0
 800102a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800102c:	2303      	movs	r3, #3
 800102e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001030:	2307      	movs	r3, #7
 8001032:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001034:	f107 031c 	add.w	r3, r7, #28
 8001038:	4619      	mov	r1, r3
 800103a:	4809      	ldr	r0, [pc, #36]	; (8001060 <HAL_UART_MspInit+0x110>)
 800103c:	f000 fac8 	bl	80015d0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001040:	2200      	movs	r2, #0
 8001042:	2100      	movs	r1, #0
 8001044:	2025      	movs	r0, #37	; 0x25
 8001046:	f000 f9fa 	bl	800143e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800104a:	2025      	movs	r0, #37	; 0x25
 800104c:	f000 fa13 	bl	8001476 <HAL_NVIC_EnableIRQ>
}
 8001050:	bf00      	nop
 8001052:	3730      	adds	r7, #48	; 0x30
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	40004c00 	.word	0x40004c00
 800105c:	40023800 	.word	0x40023800
 8001060:	40020000 	.word	0x40020000
 8001064:	40011000 	.word	0x40011000

08001068 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800106c:	e7fe      	b.n	800106c <NMI_Handler+0x4>

0800106e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800106e:	b480      	push	{r7}
 8001070:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001072:	e7fe      	b.n	8001072 <HardFault_Handler+0x4>

08001074 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001078:	e7fe      	b.n	8001078 <MemManage_Handler+0x4>

0800107a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800107a:	b480      	push	{r7}
 800107c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800107e:	e7fe      	b.n	800107e <BusFault_Handler+0x4>

08001080 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001084:	e7fe      	b.n	8001084 <UsageFault_Handler+0x4>

08001086 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001086:	b480      	push	{r7}
 8001088:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800108a:	bf00      	nop
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr

08001094 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001098:	bf00      	nop
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr

080010a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010a2:	b480      	push	{r7}
 80010a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010a6:	bf00      	nop
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr

080010b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010b4:	f000 f8a4 	bl	8001200 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010b8:	bf00      	nop
 80010ba:	bd80      	pop	{r7, pc}

080010bc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80010c0:	4802      	ldr	r0, [pc, #8]	; (80010cc <USART1_IRQHandler+0x10>)
 80010c2:	f001 fdcd 	bl	8002c60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80010c6:	bf00      	nop
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	20000128 	.word	0x20000128

080010d0 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80010d4:	4802      	ldr	r0, [pc, #8]	; (80010e0 <UART4_IRQHandler+0x10>)
 80010d6:	f001 fdc3 	bl	8002c60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80010da:	bf00      	nop
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	2000016c 	.word	0x2000016c

080010e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010e8:	4b06      	ldr	r3, [pc, #24]	; (8001104 <SystemInit+0x20>)
 80010ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010ee:	4a05      	ldr	r2, [pc, #20]	; (8001104 <SystemInit+0x20>)
 80010f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010f8:	bf00      	nop
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	e000ed00 	.word	0xe000ed00

08001108 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001108:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001140 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800110c:	480d      	ldr	r0, [pc, #52]	; (8001144 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800110e:	490e      	ldr	r1, [pc, #56]	; (8001148 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001110:	4a0e      	ldr	r2, [pc, #56]	; (800114c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001112:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001114:	e002      	b.n	800111c <LoopCopyDataInit>

08001116 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001116:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001118:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800111a:	3304      	adds	r3, #4

0800111c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800111c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800111e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001120:	d3f9      	bcc.n	8001116 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001122:	4a0b      	ldr	r2, [pc, #44]	; (8001150 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001124:	4c0b      	ldr	r4, [pc, #44]	; (8001154 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001126:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001128:	e001      	b.n	800112e <LoopFillZerobss>

0800112a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800112a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800112c:	3204      	adds	r2, #4

0800112e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800112e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001130:	d3fb      	bcc.n	800112a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001132:	f7ff ffd7 	bl	80010e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001136:	f002 fbf1 	bl	800391c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800113a:	f7ff fb65 	bl	8000808 <main>
  bx  lr    
 800113e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001140:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001144:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001148:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800114c:	08003bd4 	.word	0x08003bd4
  ldr r2, =_sbss
 8001150:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001154:	200001b8 	.word	0x200001b8

08001158 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001158:	e7fe      	b.n	8001158 <ADC_IRQHandler>
	...

0800115c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001160:	4b0e      	ldr	r3, [pc, #56]	; (800119c <HAL_Init+0x40>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a0d      	ldr	r2, [pc, #52]	; (800119c <HAL_Init+0x40>)
 8001166:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800116a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800116c:	4b0b      	ldr	r3, [pc, #44]	; (800119c <HAL_Init+0x40>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a0a      	ldr	r2, [pc, #40]	; (800119c <HAL_Init+0x40>)
 8001172:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001176:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001178:	4b08      	ldr	r3, [pc, #32]	; (800119c <HAL_Init+0x40>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a07      	ldr	r2, [pc, #28]	; (800119c <HAL_Init+0x40>)
 800117e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001182:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001184:	2003      	movs	r0, #3
 8001186:	f000 f94f 	bl	8001428 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800118a:	200f      	movs	r0, #15
 800118c:	f000 f808 	bl	80011a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001190:	f7ff fdfc 	bl	8000d8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001194:	2300      	movs	r3, #0
}
 8001196:	4618      	mov	r0, r3
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	40023c00 	.word	0x40023c00

080011a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011a8:	4b12      	ldr	r3, [pc, #72]	; (80011f4 <HAL_InitTick+0x54>)
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	4b12      	ldr	r3, [pc, #72]	; (80011f8 <HAL_InitTick+0x58>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	4619      	mov	r1, r3
 80011b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80011ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80011be:	4618      	mov	r0, r3
 80011c0:	f000 f967 	bl	8001492 <HAL_SYSTICK_Config>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011ca:	2301      	movs	r3, #1
 80011cc:	e00e      	b.n	80011ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2b0f      	cmp	r3, #15
 80011d2:	d80a      	bhi.n	80011ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011d4:	2200      	movs	r2, #0
 80011d6:	6879      	ldr	r1, [r7, #4]
 80011d8:	f04f 30ff 	mov.w	r0, #4294967295
 80011dc:	f000 f92f 	bl	800143e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011e0:	4a06      	ldr	r2, [pc, #24]	; (80011fc <HAL_InitTick+0x5c>)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011e6:	2300      	movs	r3, #0
 80011e8:	e000      	b.n	80011ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011ea:	2301      	movs	r3, #1
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	3708      	adds	r7, #8
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	20000000 	.word	0x20000000
 80011f8:	20000008 	.word	0x20000008
 80011fc:	20000004 	.word	0x20000004

08001200 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001204:	4b06      	ldr	r3, [pc, #24]	; (8001220 <HAL_IncTick+0x20>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	461a      	mov	r2, r3
 800120a:	4b06      	ldr	r3, [pc, #24]	; (8001224 <HAL_IncTick+0x24>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4413      	add	r3, r2
 8001210:	4a04      	ldr	r2, [pc, #16]	; (8001224 <HAL_IncTick+0x24>)
 8001212:	6013      	str	r3, [r2, #0]
}
 8001214:	bf00      	nop
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	20000008 	.word	0x20000008
 8001224:	200001b4 	.word	0x200001b4

08001228 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  return uwTick;
 800122c:	4b03      	ldr	r3, [pc, #12]	; (800123c <HAL_GetTick+0x14>)
 800122e:	681b      	ldr	r3, [r3, #0]
}
 8001230:	4618      	mov	r0, r3
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	200001b4 	.word	0x200001b4

08001240 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001248:	f7ff ffee 	bl	8001228 <HAL_GetTick>
 800124c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001258:	d005      	beq.n	8001266 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800125a:	4b0a      	ldr	r3, [pc, #40]	; (8001284 <HAL_Delay+0x44>)
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	461a      	mov	r2, r3
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	4413      	add	r3, r2
 8001264:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001266:	bf00      	nop
 8001268:	f7ff ffde 	bl	8001228 <HAL_GetTick>
 800126c:	4602      	mov	r2, r0
 800126e:	68bb      	ldr	r3, [r7, #8]
 8001270:	1ad3      	subs	r3, r2, r3
 8001272:	68fa      	ldr	r2, [r7, #12]
 8001274:	429a      	cmp	r2, r3
 8001276:	d8f7      	bhi.n	8001268 <HAL_Delay+0x28>
  {
  }
}
 8001278:	bf00      	nop
 800127a:	bf00      	nop
 800127c:	3710      	adds	r7, #16
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	20000008 	.word	0x20000008

08001288 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001288:	b480      	push	{r7}
 800128a:	b085      	sub	sp, #20
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	f003 0307 	and.w	r3, r3, #7
 8001296:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001298:	4b0c      	ldr	r3, [pc, #48]	; (80012cc <__NVIC_SetPriorityGrouping+0x44>)
 800129a:	68db      	ldr	r3, [r3, #12]
 800129c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800129e:	68ba      	ldr	r2, [r7, #8]
 80012a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012a4:	4013      	ands	r3, r2
 80012a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012ba:	4a04      	ldr	r2, [pc, #16]	; (80012cc <__NVIC_SetPriorityGrouping+0x44>)
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	60d3      	str	r3, [r2, #12]
}
 80012c0:	bf00      	nop
 80012c2:	3714      	adds	r7, #20
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr
 80012cc:	e000ed00 	.word	0xe000ed00

080012d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012d4:	4b04      	ldr	r3, [pc, #16]	; (80012e8 <__NVIC_GetPriorityGrouping+0x18>)
 80012d6:	68db      	ldr	r3, [r3, #12]
 80012d8:	0a1b      	lsrs	r3, r3, #8
 80012da:	f003 0307 	and.w	r3, r3, #7
}
 80012de:	4618      	mov	r0, r3
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr
 80012e8:	e000ed00 	.word	0xe000ed00

080012ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	4603      	mov	r3, r0
 80012f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	db0b      	blt.n	8001316 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012fe:	79fb      	ldrb	r3, [r7, #7]
 8001300:	f003 021f 	and.w	r2, r3, #31
 8001304:	4907      	ldr	r1, [pc, #28]	; (8001324 <__NVIC_EnableIRQ+0x38>)
 8001306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130a:	095b      	lsrs	r3, r3, #5
 800130c:	2001      	movs	r0, #1
 800130e:	fa00 f202 	lsl.w	r2, r0, r2
 8001312:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001316:	bf00      	nop
 8001318:	370c      	adds	r7, #12
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	e000e100 	.word	0xe000e100

08001328 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0
 800132e:	4603      	mov	r3, r0
 8001330:	6039      	str	r1, [r7, #0]
 8001332:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001334:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001338:	2b00      	cmp	r3, #0
 800133a:	db0a      	blt.n	8001352 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	b2da      	uxtb	r2, r3
 8001340:	490c      	ldr	r1, [pc, #48]	; (8001374 <__NVIC_SetPriority+0x4c>)
 8001342:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001346:	0112      	lsls	r2, r2, #4
 8001348:	b2d2      	uxtb	r2, r2
 800134a:	440b      	add	r3, r1
 800134c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001350:	e00a      	b.n	8001368 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	b2da      	uxtb	r2, r3
 8001356:	4908      	ldr	r1, [pc, #32]	; (8001378 <__NVIC_SetPriority+0x50>)
 8001358:	79fb      	ldrb	r3, [r7, #7]
 800135a:	f003 030f 	and.w	r3, r3, #15
 800135e:	3b04      	subs	r3, #4
 8001360:	0112      	lsls	r2, r2, #4
 8001362:	b2d2      	uxtb	r2, r2
 8001364:	440b      	add	r3, r1
 8001366:	761a      	strb	r2, [r3, #24]
}
 8001368:	bf00      	nop
 800136a:	370c      	adds	r7, #12
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr
 8001374:	e000e100 	.word	0xe000e100
 8001378:	e000ed00 	.word	0xe000ed00

0800137c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800137c:	b480      	push	{r7}
 800137e:	b089      	sub	sp, #36	; 0x24
 8001380:	af00      	add	r7, sp, #0
 8001382:	60f8      	str	r0, [r7, #12]
 8001384:	60b9      	str	r1, [r7, #8]
 8001386:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	f003 0307 	and.w	r3, r3, #7
 800138e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001390:	69fb      	ldr	r3, [r7, #28]
 8001392:	f1c3 0307 	rsb	r3, r3, #7
 8001396:	2b04      	cmp	r3, #4
 8001398:	bf28      	it	cs
 800139a:	2304      	movcs	r3, #4
 800139c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	3304      	adds	r3, #4
 80013a2:	2b06      	cmp	r3, #6
 80013a4:	d902      	bls.n	80013ac <NVIC_EncodePriority+0x30>
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	3b03      	subs	r3, #3
 80013aa:	e000      	b.n	80013ae <NVIC_EncodePriority+0x32>
 80013ac:	2300      	movs	r3, #0
 80013ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013b0:	f04f 32ff 	mov.w	r2, #4294967295
 80013b4:	69bb      	ldr	r3, [r7, #24]
 80013b6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ba:	43da      	mvns	r2, r3
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	401a      	ands	r2, r3
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013c4:	f04f 31ff 	mov.w	r1, #4294967295
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	fa01 f303 	lsl.w	r3, r1, r3
 80013ce:	43d9      	mvns	r1, r3
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013d4:	4313      	orrs	r3, r2
         );
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3724      	adds	r7, #36	; 0x24
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
	...

080013e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	3b01      	subs	r3, #1
 80013f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013f4:	d301      	bcc.n	80013fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013f6:	2301      	movs	r3, #1
 80013f8:	e00f      	b.n	800141a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013fa:	4a0a      	ldr	r2, [pc, #40]	; (8001424 <SysTick_Config+0x40>)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	3b01      	subs	r3, #1
 8001400:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001402:	210f      	movs	r1, #15
 8001404:	f04f 30ff 	mov.w	r0, #4294967295
 8001408:	f7ff ff8e 	bl	8001328 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800140c:	4b05      	ldr	r3, [pc, #20]	; (8001424 <SysTick_Config+0x40>)
 800140e:	2200      	movs	r2, #0
 8001410:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001412:	4b04      	ldr	r3, [pc, #16]	; (8001424 <SysTick_Config+0x40>)
 8001414:	2207      	movs	r2, #7
 8001416:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001418:	2300      	movs	r3, #0
}
 800141a:	4618      	mov	r0, r3
 800141c:	3708      	adds	r7, #8
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	e000e010 	.word	0xe000e010

08001428 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001430:	6878      	ldr	r0, [r7, #4]
 8001432:	f7ff ff29 	bl	8001288 <__NVIC_SetPriorityGrouping>
}
 8001436:	bf00      	nop
 8001438:	3708      	adds	r7, #8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}

0800143e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800143e:	b580      	push	{r7, lr}
 8001440:	b086      	sub	sp, #24
 8001442:	af00      	add	r7, sp, #0
 8001444:	4603      	mov	r3, r0
 8001446:	60b9      	str	r1, [r7, #8]
 8001448:	607a      	str	r2, [r7, #4]
 800144a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800144c:	2300      	movs	r3, #0
 800144e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001450:	f7ff ff3e 	bl	80012d0 <__NVIC_GetPriorityGrouping>
 8001454:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001456:	687a      	ldr	r2, [r7, #4]
 8001458:	68b9      	ldr	r1, [r7, #8]
 800145a:	6978      	ldr	r0, [r7, #20]
 800145c:	f7ff ff8e 	bl	800137c <NVIC_EncodePriority>
 8001460:	4602      	mov	r2, r0
 8001462:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001466:	4611      	mov	r1, r2
 8001468:	4618      	mov	r0, r3
 800146a:	f7ff ff5d 	bl	8001328 <__NVIC_SetPriority>
}
 800146e:	bf00      	nop
 8001470:	3718      	adds	r7, #24
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}

08001476 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001476:	b580      	push	{r7, lr}
 8001478:	b082      	sub	sp, #8
 800147a:	af00      	add	r7, sp, #0
 800147c:	4603      	mov	r3, r0
 800147e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001480:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001484:	4618      	mov	r0, r3
 8001486:	f7ff ff31 	bl	80012ec <__NVIC_EnableIRQ>
}
 800148a:	bf00      	nop
 800148c:	3708      	adds	r7, #8
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}

08001492 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001492:	b580      	push	{r7, lr}
 8001494:	b082      	sub	sp, #8
 8001496:	af00      	add	r7, sp, #0
 8001498:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800149a:	6878      	ldr	r0, [r7, #4]
 800149c:	f7ff ffa2 	bl	80013e4 <SysTick_Config>
 80014a0:	4603      	mov	r3, r0
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3708      	adds	r7, #8
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}

080014aa <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80014aa:	b580      	push	{r7, lr}
 80014ac:	b084      	sub	sp, #16
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014b6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80014b8:	f7ff feb6 	bl	8001228 <HAL_GetTick>
 80014bc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	2b02      	cmp	r3, #2
 80014c8:	d008      	beq.n	80014dc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2280      	movs	r2, #128	; 0x80
 80014ce:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2200      	movs	r2, #0
 80014d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80014d8:	2301      	movs	r3, #1
 80014da:	e052      	b.n	8001582 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f022 0216 	bic.w	r2, r2, #22
 80014ea:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	695a      	ldr	r2, [r3, #20]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80014fa:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001500:	2b00      	cmp	r3, #0
 8001502:	d103      	bne.n	800150c <HAL_DMA_Abort+0x62>
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001508:	2b00      	cmp	r3, #0
 800150a:	d007      	beq.n	800151c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f022 0208 	bic.w	r2, r2, #8
 800151a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f022 0201 	bic.w	r2, r2, #1
 800152a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800152c:	e013      	b.n	8001556 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800152e:	f7ff fe7b 	bl	8001228 <HAL_GetTick>
 8001532:	4602      	mov	r2, r0
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	1ad3      	subs	r3, r2, r3
 8001538:	2b05      	cmp	r3, #5
 800153a:	d90c      	bls.n	8001556 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2220      	movs	r2, #32
 8001540:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2203      	movs	r2, #3
 8001546:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2200      	movs	r2, #0
 800154e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001552:	2303      	movs	r3, #3
 8001554:	e015      	b.n	8001582 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f003 0301 	and.w	r3, r3, #1
 8001560:	2b00      	cmp	r3, #0
 8001562:	d1e4      	bne.n	800152e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001568:	223f      	movs	r2, #63	; 0x3f
 800156a:	409a      	lsls	r2, r3
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2201      	movs	r2, #1
 8001574:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2200      	movs	r2, #0
 800157c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001580:	2300      	movs	r3, #0
}
 8001582:	4618      	mov	r0, r3
 8001584:	3710      	adds	r7, #16
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}

0800158a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800158a:	b480      	push	{r7}
 800158c:	b083      	sub	sp, #12
 800158e:	af00      	add	r7, sp, #0
 8001590:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001598:	b2db      	uxtb	r3, r3
 800159a:	2b02      	cmp	r3, #2
 800159c:	d004      	beq.n	80015a8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2280      	movs	r2, #128	; 0x80
 80015a2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80015a4:	2301      	movs	r3, #1
 80015a6:	e00c      	b.n	80015c2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2205      	movs	r2, #5
 80015ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f022 0201 	bic.w	r2, r2, #1
 80015be:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80015c0:	2300      	movs	r3, #0
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	370c      	adds	r7, #12
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
	...

080015d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b089      	sub	sp, #36	; 0x24
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
 80015d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80015da:	2300      	movs	r3, #0
 80015dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80015de:	2300      	movs	r3, #0
 80015e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80015e2:	2300      	movs	r3, #0
 80015e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015e6:	2300      	movs	r3, #0
 80015e8:	61fb      	str	r3, [r7, #28]
 80015ea:	e16b      	b.n	80018c4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80015ec:	2201      	movs	r2, #1
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	fa02 f303 	lsl.w	r3, r2, r3
 80015f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	697a      	ldr	r2, [r7, #20]
 80015fc:	4013      	ands	r3, r2
 80015fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001600:	693a      	ldr	r2, [r7, #16]
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	429a      	cmp	r2, r3
 8001606:	f040 815a 	bne.w	80018be <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	f003 0303 	and.w	r3, r3, #3
 8001612:	2b01      	cmp	r3, #1
 8001614:	d005      	beq.n	8001622 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800161e:	2b02      	cmp	r3, #2
 8001620:	d130      	bne.n	8001684 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	689b      	ldr	r3, [r3, #8]
 8001626:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001628:	69fb      	ldr	r3, [r7, #28]
 800162a:	005b      	lsls	r3, r3, #1
 800162c:	2203      	movs	r2, #3
 800162e:	fa02 f303 	lsl.w	r3, r2, r3
 8001632:	43db      	mvns	r3, r3
 8001634:	69ba      	ldr	r2, [r7, #24]
 8001636:	4013      	ands	r3, r2
 8001638:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	68da      	ldr	r2, [r3, #12]
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	005b      	lsls	r3, r3, #1
 8001642:	fa02 f303 	lsl.w	r3, r2, r3
 8001646:	69ba      	ldr	r2, [r7, #24]
 8001648:	4313      	orrs	r3, r2
 800164a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	69ba      	ldr	r2, [r7, #24]
 8001650:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001658:	2201      	movs	r2, #1
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	fa02 f303 	lsl.w	r3, r2, r3
 8001660:	43db      	mvns	r3, r3
 8001662:	69ba      	ldr	r2, [r7, #24]
 8001664:	4013      	ands	r3, r2
 8001666:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	091b      	lsrs	r3, r3, #4
 800166e:	f003 0201 	and.w	r2, r3, #1
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	fa02 f303 	lsl.w	r3, r2, r3
 8001678:	69ba      	ldr	r2, [r7, #24]
 800167a:	4313      	orrs	r3, r2
 800167c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	69ba      	ldr	r2, [r7, #24]
 8001682:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f003 0303 	and.w	r3, r3, #3
 800168c:	2b03      	cmp	r3, #3
 800168e:	d017      	beq.n	80016c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	68db      	ldr	r3, [r3, #12]
 8001694:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001696:	69fb      	ldr	r3, [r7, #28]
 8001698:	005b      	lsls	r3, r3, #1
 800169a:	2203      	movs	r2, #3
 800169c:	fa02 f303 	lsl.w	r3, r2, r3
 80016a0:	43db      	mvns	r3, r3
 80016a2:	69ba      	ldr	r2, [r7, #24]
 80016a4:	4013      	ands	r3, r2
 80016a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	689a      	ldr	r2, [r3, #8]
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	005b      	lsls	r3, r3, #1
 80016b0:	fa02 f303 	lsl.w	r3, r2, r3
 80016b4:	69ba      	ldr	r2, [r7, #24]
 80016b6:	4313      	orrs	r3, r2
 80016b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	69ba      	ldr	r2, [r7, #24]
 80016be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	f003 0303 	and.w	r3, r3, #3
 80016c8:	2b02      	cmp	r3, #2
 80016ca:	d123      	bne.n	8001714 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016cc:	69fb      	ldr	r3, [r7, #28]
 80016ce:	08da      	lsrs	r2, r3, #3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	3208      	adds	r2, #8
 80016d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	f003 0307 	and.w	r3, r3, #7
 80016e0:	009b      	lsls	r3, r3, #2
 80016e2:	220f      	movs	r2, #15
 80016e4:	fa02 f303 	lsl.w	r3, r2, r3
 80016e8:	43db      	mvns	r3, r3
 80016ea:	69ba      	ldr	r2, [r7, #24]
 80016ec:	4013      	ands	r3, r2
 80016ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	691a      	ldr	r2, [r3, #16]
 80016f4:	69fb      	ldr	r3, [r7, #28]
 80016f6:	f003 0307 	and.w	r3, r3, #7
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001700:	69ba      	ldr	r2, [r7, #24]
 8001702:	4313      	orrs	r3, r2
 8001704:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	08da      	lsrs	r2, r3, #3
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	3208      	adds	r2, #8
 800170e:	69b9      	ldr	r1, [r7, #24]
 8001710:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	005b      	lsls	r3, r3, #1
 800171e:	2203      	movs	r2, #3
 8001720:	fa02 f303 	lsl.w	r3, r2, r3
 8001724:	43db      	mvns	r3, r3
 8001726:	69ba      	ldr	r2, [r7, #24]
 8001728:	4013      	ands	r3, r2
 800172a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	f003 0203 	and.w	r2, r3, #3
 8001734:	69fb      	ldr	r3, [r7, #28]
 8001736:	005b      	lsls	r3, r3, #1
 8001738:	fa02 f303 	lsl.w	r3, r2, r3
 800173c:	69ba      	ldr	r2, [r7, #24]
 800173e:	4313      	orrs	r3, r2
 8001740:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	69ba      	ldr	r2, [r7, #24]
 8001746:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001750:	2b00      	cmp	r3, #0
 8001752:	f000 80b4 	beq.w	80018be <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001756:	2300      	movs	r3, #0
 8001758:	60fb      	str	r3, [r7, #12]
 800175a:	4b60      	ldr	r3, [pc, #384]	; (80018dc <HAL_GPIO_Init+0x30c>)
 800175c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800175e:	4a5f      	ldr	r2, [pc, #380]	; (80018dc <HAL_GPIO_Init+0x30c>)
 8001760:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001764:	6453      	str	r3, [r2, #68]	; 0x44
 8001766:	4b5d      	ldr	r3, [pc, #372]	; (80018dc <HAL_GPIO_Init+0x30c>)
 8001768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800176a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800176e:	60fb      	str	r3, [r7, #12]
 8001770:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001772:	4a5b      	ldr	r2, [pc, #364]	; (80018e0 <HAL_GPIO_Init+0x310>)
 8001774:	69fb      	ldr	r3, [r7, #28]
 8001776:	089b      	lsrs	r3, r3, #2
 8001778:	3302      	adds	r3, #2
 800177a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800177e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001780:	69fb      	ldr	r3, [r7, #28]
 8001782:	f003 0303 	and.w	r3, r3, #3
 8001786:	009b      	lsls	r3, r3, #2
 8001788:	220f      	movs	r2, #15
 800178a:	fa02 f303 	lsl.w	r3, r2, r3
 800178e:	43db      	mvns	r3, r3
 8001790:	69ba      	ldr	r2, [r7, #24]
 8001792:	4013      	ands	r3, r2
 8001794:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	4a52      	ldr	r2, [pc, #328]	; (80018e4 <HAL_GPIO_Init+0x314>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d02b      	beq.n	80017f6 <HAL_GPIO_Init+0x226>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4a51      	ldr	r2, [pc, #324]	; (80018e8 <HAL_GPIO_Init+0x318>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d025      	beq.n	80017f2 <HAL_GPIO_Init+0x222>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	4a50      	ldr	r2, [pc, #320]	; (80018ec <HAL_GPIO_Init+0x31c>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d01f      	beq.n	80017ee <HAL_GPIO_Init+0x21e>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4a4f      	ldr	r2, [pc, #316]	; (80018f0 <HAL_GPIO_Init+0x320>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d019      	beq.n	80017ea <HAL_GPIO_Init+0x21a>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	4a4e      	ldr	r2, [pc, #312]	; (80018f4 <HAL_GPIO_Init+0x324>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d013      	beq.n	80017e6 <HAL_GPIO_Init+0x216>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	4a4d      	ldr	r2, [pc, #308]	; (80018f8 <HAL_GPIO_Init+0x328>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d00d      	beq.n	80017e2 <HAL_GPIO_Init+0x212>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4a4c      	ldr	r2, [pc, #304]	; (80018fc <HAL_GPIO_Init+0x32c>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d007      	beq.n	80017de <HAL_GPIO_Init+0x20e>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	4a4b      	ldr	r2, [pc, #300]	; (8001900 <HAL_GPIO_Init+0x330>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d101      	bne.n	80017da <HAL_GPIO_Init+0x20a>
 80017d6:	2307      	movs	r3, #7
 80017d8:	e00e      	b.n	80017f8 <HAL_GPIO_Init+0x228>
 80017da:	2308      	movs	r3, #8
 80017dc:	e00c      	b.n	80017f8 <HAL_GPIO_Init+0x228>
 80017de:	2306      	movs	r3, #6
 80017e0:	e00a      	b.n	80017f8 <HAL_GPIO_Init+0x228>
 80017e2:	2305      	movs	r3, #5
 80017e4:	e008      	b.n	80017f8 <HAL_GPIO_Init+0x228>
 80017e6:	2304      	movs	r3, #4
 80017e8:	e006      	b.n	80017f8 <HAL_GPIO_Init+0x228>
 80017ea:	2303      	movs	r3, #3
 80017ec:	e004      	b.n	80017f8 <HAL_GPIO_Init+0x228>
 80017ee:	2302      	movs	r3, #2
 80017f0:	e002      	b.n	80017f8 <HAL_GPIO_Init+0x228>
 80017f2:	2301      	movs	r3, #1
 80017f4:	e000      	b.n	80017f8 <HAL_GPIO_Init+0x228>
 80017f6:	2300      	movs	r3, #0
 80017f8:	69fa      	ldr	r2, [r7, #28]
 80017fa:	f002 0203 	and.w	r2, r2, #3
 80017fe:	0092      	lsls	r2, r2, #2
 8001800:	4093      	lsls	r3, r2
 8001802:	69ba      	ldr	r2, [r7, #24]
 8001804:	4313      	orrs	r3, r2
 8001806:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001808:	4935      	ldr	r1, [pc, #212]	; (80018e0 <HAL_GPIO_Init+0x310>)
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	089b      	lsrs	r3, r3, #2
 800180e:	3302      	adds	r3, #2
 8001810:	69ba      	ldr	r2, [r7, #24]
 8001812:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001816:	4b3b      	ldr	r3, [pc, #236]	; (8001904 <HAL_GPIO_Init+0x334>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	43db      	mvns	r3, r3
 8001820:	69ba      	ldr	r2, [r7, #24]
 8001822:	4013      	ands	r3, r2
 8001824:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800182e:	2b00      	cmp	r3, #0
 8001830:	d003      	beq.n	800183a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001832:	69ba      	ldr	r2, [r7, #24]
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	4313      	orrs	r3, r2
 8001838:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800183a:	4a32      	ldr	r2, [pc, #200]	; (8001904 <HAL_GPIO_Init+0x334>)
 800183c:	69bb      	ldr	r3, [r7, #24]
 800183e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001840:	4b30      	ldr	r3, [pc, #192]	; (8001904 <HAL_GPIO_Init+0x334>)
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	43db      	mvns	r3, r3
 800184a:	69ba      	ldr	r2, [r7, #24]
 800184c:	4013      	ands	r3, r2
 800184e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001858:	2b00      	cmp	r3, #0
 800185a:	d003      	beq.n	8001864 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800185c:	69ba      	ldr	r2, [r7, #24]
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	4313      	orrs	r3, r2
 8001862:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001864:	4a27      	ldr	r2, [pc, #156]	; (8001904 <HAL_GPIO_Init+0x334>)
 8001866:	69bb      	ldr	r3, [r7, #24]
 8001868:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800186a:	4b26      	ldr	r3, [pc, #152]	; (8001904 <HAL_GPIO_Init+0x334>)
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	43db      	mvns	r3, r3
 8001874:	69ba      	ldr	r2, [r7, #24]
 8001876:	4013      	ands	r3, r2
 8001878:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001882:	2b00      	cmp	r3, #0
 8001884:	d003      	beq.n	800188e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001886:	69ba      	ldr	r2, [r7, #24]
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	4313      	orrs	r3, r2
 800188c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800188e:	4a1d      	ldr	r2, [pc, #116]	; (8001904 <HAL_GPIO_Init+0x334>)
 8001890:	69bb      	ldr	r3, [r7, #24]
 8001892:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001894:	4b1b      	ldr	r3, [pc, #108]	; (8001904 <HAL_GPIO_Init+0x334>)
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	43db      	mvns	r3, r3
 800189e:	69ba      	ldr	r2, [r7, #24]
 80018a0:	4013      	ands	r3, r2
 80018a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d003      	beq.n	80018b8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80018b0:	69ba      	ldr	r2, [r7, #24]
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	4313      	orrs	r3, r2
 80018b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80018b8:	4a12      	ldr	r2, [pc, #72]	; (8001904 <HAL_GPIO_Init+0x334>)
 80018ba:	69bb      	ldr	r3, [r7, #24]
 80018bc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	3301      	adds	r3, #1
 80018c2:	61fb      	str	r3, [r7, #28]
 80018c4:	69fb      	ldr	r3, [r7, #28]
 80018c6:	2b0f      	cmp	r3, #15
 80018c8:	f67f ae90 	bls.w	80015ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80018cc:	bf00      	nop
 80018ce:	bf00      	nop
 80018d0:	3724      	adds	r7, #36	; 0x24
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	40023800 	.word	0x40023800
 80018e0:	40013800 	.word	0x40013800
 80018e4:	40020000 	.word	0x40020000
 80018e8:	40020400 	.word	0x40020400
 80018ec:	40020800 	.word	0x40020800
 80018f0:	40020c00 	.word	0x40020c00
 80018f4:	40021000 	.word	0x40021000
 80018f8:	40021400 	.word	0x40021400
 80018fc:	40021800 	.word	0x40021800
 8001900:	40021c00 	.word	0x40021c00
 8001904:	40013c00 	.word	0x40013c00

08001908 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
 8001910:	460b      	mov	r3, r1
 8001912:	807b      	strh	r3, [r7, #2]
 8001914:	4613      	mov	r3, r2
 8001916:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001918:	787b      	ldrb	r3, [r7, #1]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d003      	beq.n	8001926 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800191e:	887a      	ldrh	r2, [r7, #2]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001924:	e003      	b.n	800192e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001926:	887b      	ldrh	r3, [r7, #2]
 8001928:	041a      	lsls	r2, r3, #16
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	619a      	str	r2, [r3, #24]
}
 800192e:	bf00      	nop
 8001930:	370c      	adds	r7, #12
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr
	...

0800193c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b086      	sub	sp, #24
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d101      	bne.n	800194e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	e264      	b.n	8001e18 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 0301 	and.w	r3, r3, #1
 8001956:	2b00      	cmp	r3, #0
 8001958:	d075      	beq.n	8001a46 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800195a:	4ba3      	ldr	r3, [pc, #652]	; (8001be8 <HAL_RCC_OscConfig+0x2ac>)
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	f003 030c 	and.w	r3, r3, #12
 8001962:	2b04      	cmp	r3, #4
 8001964:	d00c      	beq.n	8001980 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001966:	4ba0      	ldr	r3, [pc, #640]	; (8001be8 <HAL_RCC_OscConfig+0x2ac>)
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800196e:	2b08      	cmp	r3, #8
 8001970:	d112      	bne.n	8001998 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001972:	4b9d      	ldr	r3, [pc, #628]	; (8001be8 <HAL_RCC_OscConfig+0x2ac>)
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800197a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800197e:	d10b      	bne.n	8001998 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001980:	4b99      	ldr	r3, [pc, #612]	; (8001be8 <HAL_RCC_OscConfig+0x2ac>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001988:	2b00      	cmp	r3, #0
 800198a:	d05b      	beq.n	8001a44 <HAL_RCC_OscConfig+0x108>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d157      	bne.n	8001a44 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001994:	2301      	movs	r3, #1
 8001996:	e23f      	b.n	8001e18 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019a0:	d106      	bne.n	80019b0 <HAL_RCC_OscConfig+0x74>
 80019a2:	4b91      	ldr	r3, [pc, #580]	; (8001be8 <HAL_RCC_OscConfig+0x2ac>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a90      	ldr	r2, [pc, #576]	; (8001be8 <HAL_RCC_OscConfig+0x2ac>)
 80019a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019ac:	6013      	str	r3, [r2, #0]
 80019ae:	e01d      	b.n	80019ec <HAL_RCC_OscConfig+0xb0>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019b8:	d10c      	bne.n	80019d4 <HAL_RCC_OscConfig+0x98>
 80019ba:	4b8b      	ldr	r3, [pc, #556]	; (8001be8 <HAL_RCC_OscConfig+0x2ac>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a8a      	ldr	r2, [pc, #552]	; (8001be8 <HAL_RCC_OscConfig+0x2ac>)
 80019c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019c4:	6013      	str	r3, [r2, #0]
 80019c6:	4b88      	ldr	r3, [pc, #544]	; (8001be8 <HAL_RCC_OscConfig+0x2ac>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a87      	ldr	r2, [pc, #540]	; (8001be8 <HAL_RCC_OscConfig+0x2ac>)
 80019cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019d0:	6013      	str	r3, [r2, #0]
 80019d2:	e00b      	b.n	80019ec <HAL_RCC_OscConfig+0xb0>
 80019d4:	4b84      	ldr	r3, [pc, #528]	; (8001be8 <HAL_RCC_OscConfig+0x2ac>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a83      	ldr	r2, [pc, #524]	; (8001be8 <HAL_RCC_OscConfig+0x2ac>)
 80019da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019de:	6013      	str	r3, [r2, #0]
 80019e0:	4b81      	ldr	r3, [pc, #516]	; (8001be8 <HAL_RCC_OscConfig+0x2ac>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a80      	ldr	r2, [pc, #512]	; (8001be8 <HAL_RCC_OscConfig+0x2ac>)
 80019e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d013      	beq.n	8001a1c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019f4:	f7ff fc18 	bl	8001228 <HAL_GetTick>
 80019f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019fa:	e008      	b.n	8001a0e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019fc:	f7ff fc14 	bl	8001228 <HAL_GetTick>
 8001a00:	4602      	mov	r2, r0
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	2b64      	cmp	r3, #100	; 0x64
 8001a08:	d901      	bls.n	8001a0e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	e204      	b.n	8001e18 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a0e:	4b76      	ldr	r3, [pc, #472]	; (8001be8 <HAL_RCC_OscConfig+0x2ac>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d0f0      	beq.n	80019fc <HAL_RCC_OscConfig+0xc0>
 8001a1a:	e014      	b.n	8001a46 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a1c:	f7ff fc04 	bl	8001228 <HAL_GetTick>
 8001a20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a22:	e008      	b.n	8001a36 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a24:	f7ff fc00 	bl	8001228 <HAL_GetTick>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	2b64      	cmp	r3, #100	; 0x64
 8001a30:	d901      	bls.n	8001a36 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a32:	2303      	movs	r3, #3
 8001a34:	e1f0      	b.n	8001e18 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a36:	4b6c      	ldr	r3, [pc, #432]	; (8001be8 <HAL_RCC_OscConfig+0x2ac>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d1f0      	bne.n	8001a24 <HAL_RCC_OscConfig+0xe8>
 8001a42:	e000      	b.n	8001a46 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 0302 	and.w	r3, r3, #2
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d063      	beq.n	8001b1a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a52:	4b65      	ldr	r3, [pc, #404]	; (8001be8 <HAL_RCC_OscConfig+0x2ac>)
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	f003 030c 	and.w	r3, r3, #12
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d00b      	beq.n	8001a76 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a5e:	4b62      	ldr	r3, [pc, #392]	; (8001be8 <HAL_RCC_OscConfig+0x2ac>)
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a66:	2b08      	cmp	r3, #8
 8001a68:	d11c      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a6a:	4b5f      	ldr	r3, [pc, #380]	; (8001be8 <HAL_RCC_OscConfig+0x2ac>)
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d116      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a76:	4b5c      	ldr	r3, [pc, #368]	; (8001be8 <HAL_RCC_OscConfig+0x2ac>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 0302 	and.w	r3, r3, #2
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d005      	beq.n	8001a8e <HAL_RCC_OscConfig+0x152>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	68db      	ldr	r3, [r3, #12]
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d001      	beq.n	8001a8e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e1c4      	b.n	8001e18 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a8e:	4b56      	ldr	r3, [pc, #344]	; (8001be8 <HAL_RCC_OscConfig+0x2ac>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	691b      	ldr	r3, [r3, #16]
 8001a9a:	00db      	lsls	r3, r3, #3
 8001a9c:	4952      	ldr	r1, [pc, #328]	; (8001be8 <HAL_RCC_OscConfig+0x2ac>)
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001aa2:	e03a      	b.n	8001b1a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	68db      	ldr	r3, [r3, #12]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d020      	beq.n	8001aee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001aac:	4b4f      	ldr	r3, [pc, #316]	; (8001bec <HAL_RCC_OscConfig+0x2b0>)
 8001aae:	2201      	movs	r2, #1
 8001ab0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ab2:	f7ff fbb9 	bl	8001228 <HAL_GetTick>
 8001ab6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ab8:	e008      	b.n	8001acc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001aba:	f7ff fbb5 	bl	8001228 <HAL_GetTick>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	1ad3      	subs	r3, r2, r3
 8001ac4:	2b02      	cmp	r3, #2
 8001ac6:	d901      	bls.n	8001acc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001ac8:	2303      	movs	r3, #3
 8001aca:	e1a5      	b.n	8001e18 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001acc:	4b46      	ldr	r3, [pc, #280]	; (8001be8 <HAL_RCC_OscConfig+0x2ac>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f003 0302 	and.w	r3, r3, #2
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d0f0      	beq.n	8001aba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ad8:	4b43      	ldr	r3, [pc, #268]	; (8001be8 <HAL_RCC_OscConfig+0x2ac>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	691b      	ldr	r3, [r3, #16]
 8001ae4:	00db      	lsls	r3, r3, #3
 8001ae6:	4940      	ldr	r1, [pc, #256]	; (8001be8 <HAL_RCC_OscConfig+0x2ac>)
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	600b      	str	r3, [r1, #0]
 8001aec:	e015      	b.n	8001b1a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001aee:	4b3f      	ldr	r3, [pc, #252]	; (8001bec <HAL_RCC_OscConfig+0x2b0>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001af4:	f7ff fb98 	bl	8001228 <HAL_GetTick>
 8001af8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001afa:	e008      	b.n	8001b0e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001afc:	f7ff fb94 	bl	8001228 <HAL_GetTick>
 8001b00:	4602      	mov	r2, r0
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	1ad3      	subs	r3, r2, r3
 8001b06:	2b02      	cmp	r3, #2
 8001b08:	d901      	bls.n	8001b0e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	e184      	b.n	8001e18 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b0e:	4b36      	ldr	r3, [pc, #216]	; (8001be8 <HAL_RCC_OscConfig+0x2ac>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 0302 	and.w	r3, r3, #2
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d1f0      	bne.n	8001afc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f003 0308 	and.w	r3, r3, #8
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d030      	beq.n	8001b88 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	695b      	ldr	r3, [r3, #20]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d016      	beq.n	8001b5c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b2e:	4b30      	ldr	r3, [pc, #192]	; (8001bf0 <HAL_RCC_OscConfig+0x2b4>)
 8001b30:	2201      	movs	r2, #1
 8001b32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b34:	f7ff fb78 	bl	8001228 <HAL_GetTick>
 8001b38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b3a:	e008      	b.n	8001b4e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b3c:	f7ff fb74 	bl	8001228 <HAL_GetTick>
 8001b40:	4602      	mov	r2, r0
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	2b02      	cmp	r3, #2
 8001b48:	d901      	bls.n	8001b4e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	e164      	b.n	8001e18 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b4e:	4b26      	ldr	r3, [pc, #152]	; (8001be8 <HAL_RCC_OscConfig+0x2ac>)
 8001b50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b52:	f003 0302 	and.w	r3, r3, #2
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d0f0      	beq.n	8001b3c <HAL_RCC_OscConfig+0x200>
 8001b5a:	e015      	b.n	8001b88 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b5c:	4b24      	ldr	r3, [pc, #144]	; (8001bf0 <HAL_RCC_OscConfig+0x2b4>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b62:	f7ff fb61 	bl	8001228 <HAL_GetTick>
 8001b66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b68:	e008      	b.n	8001b7c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b6a:	f7ff fb5d 	bl	8001228 <HAL_GetTick>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	1ad3      	subs	r3, r2, r3
 8001b74:	2b02      	cmp	r3, #2
 8001b76:	d901      	bls.n	8001b7c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001b78:	2303      	movs	r3, #3
 8001b7a:	e14d      	b.n	8001e18 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b7c:	4b1a      	ldr	r3, [pc, #104]	; (8001be8 <HAL_RCC_OscConfig+0x2ac>)
 8001b7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b80:	f003 0302 	and.w	r3, r3, #2
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d1f0      	bne.n	8001b6a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f003 0304 	and.w	r3, r3, #4
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	f000 80a0 	beq.w	8001cd6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b96:	2300      	movs	r3, #0
 8001b98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b9a:	4b13      	ldr	r3, [pc, #76]	; (8001be8 <HAL_RCC_OscConfig+0x2ac>)
 8001b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d10f      	bne.n	8001bc6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	60bb      	str	r3, [r7, #8]
 8001baa:	4b0f      	ldr	r3, [pc, #60]	; (8001be8 <HAL_RCC_OscConfig+0x2ac>)
 8001bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bae:	4a0e      	ldr	r2, [pc, #56]	; (8001be8 <HAL_RCC_OscConfig+0x2ac>)
 8001bb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bb4:	6413      	str	r3, [r2, #64]	; 0x40
 8001bb6:	4b0c      	ldr	r3, [pc, #48]	; (8001be8 <HAL_RCC_OscConfig+0x2ac>)
 8001bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bbe:	60bb      	str	r3, [r7, #8]
 8001bc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bc6:	4b0b      	ldr	r3, [pc, #44]	; (8001bf4 <HAL_RCC_OscConfig+0x2b8>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d121      	bne.n	8001c16 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bd2:	4b08      	ldr	r3, [pc, #32]	; (8001bf4 <HAL_RCC_OscConfig+0x2b8>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a07      	ldr	r2, [pc, #28]	; (8001bf4 <HAL_RCC_OscConfig+0x2b8>)
 8001bd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bdc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bde:	f7ff fb23 	bl	8001228 <HAL_GetTick>
 8001be2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001be4:	e011      	b.n	8001c0a <HAL_RCC_OscConfig+0x2ce>
 8001be6:	bf00      	nop
 8001be8:	40023800 	.word	0x40023800
 8001bec:	42470000 	.word	0x42470000
 8001bf0:	42470e80 	.word	0x42470e80
 8001bf4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bf8:	f7ff fb16 	bl	8001228 <HAL_GetTick>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	1ad3      	subs	r3, r2, r3
 8001c02:	2b02      	cmp	r3, #2
 8001c04:	d901      	bls.n	8001c0a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001c06:	2303      	movs	r3, #3
 8001c08:	e106      	b.n	8001e18 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c0a:	4b85      	ldr	r3, [pc, #532]	; (8001e20 <HAL_RCC_OscConfig+0x4e4>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d0f0      	beq.n	8001bf8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d106      	bne.n	8001c2c <HAL_RCC_OscConfig+0x2f0>
 8001c1e:	4b81      	ldr	r3, [pc, #516]	; (8001e24 <HAL_RCC_OscConfig+0x4e8>)
 8001c20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c22:	4a80      	ldr	r2, [pc, #512]	; (8001e24 <HAL_RCC_OscConfig+0x4e8>)
 8001c24:	f043 0301 	orr.w	r3, r3, #1
 8001c28:	6713      	str	r3, [r2, #112]	; 0x70
 8001c2a:	e01c      	b.n	8001c66 <HAL_RCC_OscConfig+0x32a>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	2b05      	cmp	r3, #5
 8001c32:	d10c      	bne.n	8001c4e <HAL_RCC_OscConfig+0x312>
 8001c34:	4b7b      	ldr	r3, [pc, #492]	; (8001e24 <HAL_RCC_OscConfig+0x4e8>)
 8001c36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c38:	4a7a      	ldr	r2, [pc, #488]	; (8001e24 <HAL_RCC_OscConfig+0x4e8>)
 8001c3a:	f043 0304 	orr.w	r3, r3, #4
 8001c3e:	6713      	str	r3, [r2, #112]	; 0x70
 8001c40:	4b78      	ldr	r3, [pc, #480]	; (8001e24 <HAL_RCC_OscConfig+0x4e8>)
 8001c42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c44:	4a77      	ldr	r2, [pc, #476]	; (8001e24 <HAL_RCC_OscConfig+0x4e8>)
 8001c46:	f043 0301 	orr.w	r3, r3, #1
 8001c4a:	6713      	str	r3, [r2, #112]	; 0x70
 8001c4c:	e00b      	b.n	8001c66 <HAL_RCC_OscConfig+0x32a>
 8001c4e:	4b75      	ldr	r3, [pc, #468]	; (8001e24 <HAL_RCC_OscConfig+0x4e8>)
 8001c50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c52:	4a74      	ldr	r2, [pc, #464]	; (8001e24 <HAL_RCC_OscConfig+0x4e8>)
 8001c54:	f023 0301 	bic.w	r3, r3, #1
 8001c58:	6713      	str	r3, [r2, #112]	; 0x70
 8001c5a:	4b72      	ldr	r3, [pc, #456]	; (8001e24 <HAL_RCC_OscConfig+0x4e8>)
 8001c5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c5e:	4a71      	ldr	r2, [pc, #452]	; (8001e24 <HAL_RCC_OscConfig+0x4e8>)
 8001c60:	f023 0304 	bic.w	r3, r3, #4
 8001c64:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d015      	beq.n	8001c9a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c6e:	f7ff fadb 	bl	8001228 <HAL_GetTick>
 8001c72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c74:	e00a      	b.n	8001c8c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c76:	f7ff fad7 	bl	8001228 <HAL_GetTick>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	1ad3      	subs	r3, r2, r3
 8001c80:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d901      	bls.n	8001c8c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001c88:	2303      	movs	r3, #3
 8001c8a:	e0c5      	b.n	8001e18 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c8c:	4b65      	ldr	r3, [pc, #404]	; (8001e24 <HAL_RCC_OscConfig+0x4e8>)
 8001c8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c90:	f003 0302 	and.w	r3, r3, #2
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d0ee      	beq.n	8001c76 <HAL_RCC_OscConfig+0x33a>
 8001c98:	e014      	b.n	8001cc4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c9a:	f7ff fac5 	bl	8001228 <HAL_GetTick>
 8001c9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ca0:	e00a      	b.n	8001cb8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ca2:	f7ff fac1 	bl	8001228 <HAL_GetTick>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	1ad3      	subs	r3, r2, r3
 8001cac:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d901      	bls.n	8001cb8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001cb4:	2303      	movs	r3, #3
 8001cb6:	e0af      	b.n	8001e18 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cb8:	4b5a      	ldr	r3, [pc, #360]	; (8001e24 <HAL_RCC_OscConfig+0x4e8>)
 8001cba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cbc:	f003 0302 	and.w	r3, r3, #2
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d1ee      	bne.n	8001ca2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001cc4:	7dfb      	ldrb	r3, [r7, #23]
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d105      	bne.n	8001cd6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cca:	4b56      	ldr	r3, [pc, #344]	; (8001e24 <HAL_RCC_OscConfig+0x4e8>)
 8001ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cce:	4a55      	ldr	r2, [pc, #340]	; (8001e24 <HAL_RCC_OscConfig+0x4e8>)
 8001cd0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cd4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	699b      	ldr	r3, [r3, #24]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	f000 809b 	beq.w	8001e16 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ce0:	4b50      	ldr	r3, [pc, #320]	; (8001e24 <HAL_RCC_OscConfig+0x4e8>)
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	f003 030c 	and.w	r3, r3, #12
 8001ce8:	2b08      	cmp	r3, #8
 8001cea:	d05c      	beq.n	8001da6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	699b      	ldr	r3, [r3, #24]
 8001cf0:	2b02      	cmp	r3, #2
 8001cf2:	d141      	bne.n	8001d78 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cf4:	4b4c      	ldr	r3, [pc, #304]	; (8001e28 <HAL_RCC_OscConfig+0x4ec>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cfa:	f7ff fa95 	bl	8001228 <HAL_GetTick>
 8001cfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d00:	e008      	b.n	8001d14 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d02:	f7ff fa91 	bl	8001228 <HAL_GetTick>
 8001d06:	4602      	mov	r2, r0
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	2b02      	cmp	r3, #2
 8001d0e:	d901      	bls.n	8001d14 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001d10:	2303      	movs	r3, #3
 8001d12:	e081      	b.n	8001e18 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d14:	4b43      	ldr	r3, [pc, #268]	; (8001e24 <HAL_RCC_OscConfig+0x4e8>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d1f0      	bne.n	8001d02 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	69da      	ldr	r2, [r3, #28]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6a1b      	ldr	r3, [r3, #32]
 8001d28:	431a      	orrs	r2, r3
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d2e:	019b      	lsls	r3, r3, #6
 8001d30:	431a      	orrs	r2, r3
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d36:	085b      	lsrs	r3, r3, #1
 8001d38:	3b01      	subs	r3, #1
 8001d3a:	041b      	lsls	r3, r3, #16
 8001d3c:	431a      	orrs	r2, r3
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d42:	061b      	lsls	r3, r3, #24
 8001d44:	4937      	ldr	r1, [pc, #220]	; (8001e24 <HAL_RCC_OscConfig+0x4e8>)
 8001d46:	4313      	orrs	r3, r2
 8001d48:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d4a:	4b37      	ldr	r3, [pc, #220]	; (8001e28 <HAL_RCC_OscConfig+0x4ec>)
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d50:	f7ff fa6a 	bl	8001228 <HAL_GetTick>
 8001d54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d56:	e008      	b.n	8001d6a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d58:	f7ff fa66 	bl	8001228 <HAL_GetTick>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	2b02      	cmp	r3, #2
 8001d64:	d901      	bls.n	8001d6a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001d66:	2303      	movs	r3, #3
 8001d68:	e056      	b.n	8001e18 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d6a:	4b2e      	ldr	r3, [pc, #184]	; (8001e24 <HAL_RCC_OscConfig+0x4e8>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d0f0      	beq.n	8001d58 <HAL_RCC_OscConfig+0x41c>
 8001d76:	e04e      	b.n	8001e16 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d78:	4b2b      	ldr	r3, [pc, #172]	; (8001e28 <HAL_RCC_OscConfig+0x4ec>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d7e:	f7ff fa53 	bl	8001228 <HAL_GetTick>
 8001d82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d84:	e008      	b.n	8001d98 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d86:	f7ff fa4f 	bl	8001228 <HAL_GetTick>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	1ad3      	subs	r3, r2, r3
 8001d90:	2b02      	cmp	r3, #2
 8001d92:	d901      	bls.n	8001d98 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001d94:	2303      	movs	r3, #3
 8001d96:	e03f      	b.n	8001e18 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d98:	4b22      	ldr	r3, [pc, #136]	; (8001e24 <HAL_RCC_OscConfig+0x4e8>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d1f0      	bne.n	8001d86 <HAL_RCC_OscConfig+0x44a>
 8001da4:	e037      	b.n	8001e16 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	699b      	ldr	r3, [r3, #24]
 8001daa:	2b01      	cmp	r3, #1
 8001dac:	d101      	bne.n	8001db2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e032      	b.n	8001e18 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001db2:	4b1c      	ldr	r3, [pc, #112]	; (8001e24 <HAL_RCC_OscConfig+0x4e8>)
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	699b      	ldr	r3, [r3, #24]
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	d028      	beq.n	8001e12 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	d121      	bne.n	8001e12 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d11a      	bne.n	8001e12 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ddc:	68fa      	ldr	r2, [r7, #12]
 8001dde:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001de2:	4013      	ands	r3, r2
 8001de4:	687a      	ldr	r2, [r7, #4]
 8001de6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001de8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d111      	bne.n	8001e12 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001df8:	085b      	lsrs	r3, r3, #1
 8001dfa:	3b01      	subs	r3, #1
 8001dfc:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001dfe:	429a      	cmp	r2, r3
 8001e00:	d107      	bne.n	8001e12 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e0c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e0e:	429a      	cmp	r2, r3
 8001e10:	d001      	beq.n	8001e16 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e000      	b.n	8001e18 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001e16:	2300      	movs	r3, #0
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3718      	adds	r7, #24
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	40007000 	.word	0x40007000
 8001e24:	40023800 	.word	0x40023800
 8001e28:	42470060 	.word	0x42470060

08001e2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b084      	sub	sp, #16
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d101      	bne.n	8001e40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e0cc      	b.n	8001fda <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e40:	4b68      	ldr	r3, [pc, #416]	; (8001fe4 <HAL_RCC_ClockConfig+0x1b8>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f003 0307 	and.w	r3, r3, #7
 8001e48:	683a      	ldr	r2, [r7, #0]
 8001e4a:	429a      	cmp	r2, r3
 8001e4c:	d90c      	bls.n	8001e68 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e4e:	4b65      	ldr	r3, [pc, #404]	; (8001fe4 <HAL_RCC_ClockConfig+0x1b8>)
 8001e50:	683a      	ldr	r2, [r7, #0]
 8001e52:	b2d2      	uxtb	r2, r2
 8001e54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e56:	4b63      	ldr	r3, [pc, #396]	; (8001fe4 <HAL_RCC_ClockConfig+0x1b8>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 0307 	and.w	r3, r3, #7
 8001e5e:	683a      	ldr	r2, [r7, #0]
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d001      	beq.n	8001e68 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	e0b8      	b.n	8001fda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 0302 	and.w	r3, r3, #2
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d020      	beq.n	8001eb6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f003 0304 	and.w	r3, r3, #4
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d005      	beq.n	8001e8c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e80:	4b59      	ldr	r3, [pc, #356]	; (8001fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	4a58      	ldr	r2, [pc, #352]	; (8001fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8001e86:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001e8a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 0308 	and.w	r3, r3, #8
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d005      	beq.n	8001ea4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e98:	4b53      	ldr	r3, [pc, #332]	; (8001fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	4a52      	ldr	r2, [pc, #328]	; (8001fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8001e9e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001ea2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ea4:	4b50      	ldr	r3, [pc, #320]	; (8001fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	494d      	ldr	r1, [pc, #308]	; (8001fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 0301 	and.w	r3, r3, #1
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d044      	beq.n	8001f4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d107      	bne.n	8001eda <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eca:	4b47      	ldr	r3, [pc, #284]	; (8001fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d119      	bne.n	8001f0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e07f      	b.n	8001fda <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	2b02      	cmp	r3, #2
 8001ee0:	d003      	beq.n	8001eea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ee6:	2b03      	cmp	r3, #3
 8001ee8:	d107      	bne.n	8001efa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001eea:	4b3f      	ldr	r3, [pc, #252]	; (8001fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d109      	bne.n	8001f0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e06f      	b.n	8001fda <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001efa:	4b3b      	ldr	r3, [pc, #236]	; (8001fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 0302 	and.w	r3, r3, #2
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d101      	bne.n	8001f0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e067      	b.n	8001fda <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f0a:	4b37      	ldr	r3, [pc, #220]	; (8001fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	f023 0203 	bic.w	r2, r3, #3
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	4934      	ldr	r1, [pc, #208]	; (8001fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f1c:	f7ff f984 	bl	8001228 <HAL_GetTick>
 8001f20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f22:	e00a      	b.n	8001f3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f24:	f7ff f980 	bl	8001228 <HAL_GetTick>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	1ad3      	subs	r3, r2, r3
 8001f2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d901      	bls.n	8001f3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f36:	2303      	movs	r3, #3
 8001f38:	e04f      	b.n	8001fda <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f3a:	4b2b      	ldr	r3, [pc, #172]	; (8001fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	f003 020c 	and.w	r2, r3, #12
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d1eb      	bne.n	8001f24 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f4c:	4b25      	ldr	r3, [pc, #148]	; (8001fe4 <HAL_RCC_ClockConfig+0x1b8>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 0307 	and.w	r3, r3, #7
 8001f54:	683a      	ldr	r2, [r7, #0]
 8001f56:	429a      	cmp	r2, r3
 8001f58:	d20c      	bcs.n	8001f74 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f5a:	4b22      	ldr	r3, [pc, #136]	; (8001fe4 <HAL_RCC_ClockConfig+0x1b8>)
 8001f5c:	683a      	ldr	r2, [r7, #0]
 8001f5e:	b2d2      	uxtb	r2, r2
 8001f60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f62:	4b20      	ldr	r3, [pc, #128]	; (8001fe4 <HAL_RCC_ClockConfig+0x1b8>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 0307 	and.w	r3, r3, #7
 8001f6a:	683a      	ldr	r2, [r7, #0]
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d001      	beq.n	8001f74 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	e032      	b.n	8001fda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 0304 	and.w	r3, r3, #4
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d008      	beq.n	8001f92 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f80:	4b19      	ldr	r3, [pc, #100]	; (8001fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	4916      	ldr	r1, [pc, #88]	; (8001fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 0308 	and.w	r3, r3, #8
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d009      	beq.n	8001fb2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f9e:	4b12      	ldr	r3, [pc, #72]	; (8001fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	691b      	ldr	r3, [r3, #16]
 8001faa:	00db      	lsls	r3, r3, #3
 8001fac:	490e      	ldr	r1, [pc, #56]	; (8001fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001fb2:	f000 f821 	bl	8001ff8 <HAL_RCC_GetSysClockFreq>
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	4b0b      	ldr	r3, [pc, #44]	; (8001fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	091b      	lsrs	r3, r3, #4
 8001fbe:	f003 030f 	and.w	r3, r3, #15
 8001fc2:	490a      	ldr	r1, [pc, #40]	; (8001fec <HAL_RCC_ClockConfig+0x1c0>)
 8001fc4:	5ccb      	ldrb	r3, [r1, r3]
 8001fc6:	fa22 f303 	lsr.w	r3, r2, r3
 8001fca:	4a09      	ldr	r2, [pc, #36]	; (8001ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8001fcc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001fce:	4b09      	ldr	r3, [pc, #36]	; (8001ff4 <HAL_RCC_ClockConfig+0x1c8>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f7ff f8e4 	bl	80011a0 <HAL_InitTick>

  return HAL_OK;
 8001fd8:	2300      	movs	r3, #0
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3710      	adds	r7, #16
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	40023c00 	.word	0x40023c00
 8001fe8:	40023800 	.word	0x40023800
 8001fec:	08003aa8 	.word	0x08003aa8
 8001ff0:	20000000 	.word	0x20000000
 8001ff4:	20000004 	.word	0x20000004

08001ff8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ff8:	b5b0      	push	{r4, r5, r7, lr}
 8001ffa:	b084      	sub	sp, #16
 8001ffc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001ffe:	2100      	movs	r1, #0
 8002000:	6079      	str	r1, [r7, #4]
 8002002:	2100      	movs	r1, #0
 8002004:	60f9      	str	r1, [r7, #12]
 8002006:	2100      	movs	r1, #0
 8002008:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800200a:	2100      	movs	r1, #0
 800200c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800200e:	4952      	ldr	r1, [pc, #328]	; (8002158 <HAL_RCC_GetSysClockFreq+0x160>)
 8002010:	6889      	ldr	r1, [r1, #8]
 8002012:	f001 010c 	and.w	r1, r1, #12
 8002016:	2908      	cmp	r1, #8
 8002018:	d00d      	beq.n	8002036 <HAL_RCC_GetSysClockFreq+0x3e>
 800201a:	2908      	cmp	r1, #8
 800201c:	f200 8094 	bhi.w	8002148 <HAL_RCC_GetSysClockFreq+0x150>
 8002020:	2900      	cmp	r1, #0
 8002022:	d002      	beq.n	800202a <HAL_RCC_GetSysClockFreq+0x32>
 8002024:	2904      	cmp	r1, #4
 8002026:	d003      	beq.n	8002030 <HAL_RCC_GetSysClockFreq+0x38>
 8002028:	e08e      	b.n	8002148 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800202a:	4b4c      	ldr	r3, [pc, #304]	; (800215c <HAL_RCC_GetSysClockFreq+0x164>)
 800202c:	60bb      	str	r3, [r7, #8]
       break;
 800202e:	e08e      	b.n	800214e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002030:	4b4b      	ldr	r3, [pc, #300]	; (8002160 <HAL_RCC_GetSysClockFreq+0x168>)
 8002032:	60bb      	str	r3, [r7, #8]
      break;
 8002034:	e08b      	b.n	800214e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002036:	4948      	ldr	r1, [pc, #288]	; (8002158 <HAL_RCC_GetSysClockFreq+0x160>)
 8002038:	6849      	ldr	r1, [r1, #4]
 800203a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800203e:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002040:	4945      	ldr	r1, [pc, #276]	; (8002158 <HAL_RCC_GetSysClockFreq+0x160>)
 8002042:	6849      	ldr	r1, [r1, #4]
 8002044:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002048:	2900      	cmp	r1, #0
 800204a:	d024      	beq.n	8002096 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800204c:	4942      	ldr	r1, [pc, #264]	; (8002158 <HAL_RCC_GetSysClockFreq+0x160>)
 800204e:	6849      	ldr	r1, [r1, #4]
 8002050:	0989      	lsrs	r1, r1, #6
 8002052:	4608      	mov	r0, r1
 8002054:	f04f 0100 	mov.w	r1, #0
 8002058:	f240 14ff 	movw	r4, #511	; 0x1ff
 800205c:	f04f 0500 	mov.w	r5, #0
 8002060:	ea00 0204 	and.w	r2, r0, r4
 8002064:	ea01 0305 	and.w	r3, r1, r5
 8002068:	493d      	ldr	r1, [pc, #244]	; (8002160 <HAL_RCC_GetSysClockFreq+0x168>)
 800206a:	fb01 f003 	mul.w	r0, r1, r3
 800206e:	2100      	movs	r1, #0
 8002070:	fb01 f102 	mul.w	r1, r1, r2
 8002074:	1844      	adds	r4, r0, r1
 8002076:	493a      	ldr	r1, [pc, #232]	; (8002160 <HAL_RCC_GetSysClockFreq+0x168>)
 8002078:	fba2 0101 	umull	r0, r1, r2, r1
 800207c:	1863      	adds	r3, r4, r1
 800207e:	4619      	mov	r1, r3
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	461a      	mov	r2, r3
 8002084:	f04f 0300 	mov.w	r3, #0
 8002088:	f7fe f89e 	bl	80001c8 <__aeabi_uldivmod>
 800208c:	4602      	mov	r2, r0
 800208e:	460b      	mov	r3, r1
 8002090:	4613      	mov	r3, r2
 8002092:	60fb      	str	r3, [r7, #12]
 8002094:	e04a      	b.n	800212c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002096:	4b30      	ldr	r3, [pc, #192]	; (8002158 <HAL_RCC_GetSysClockFreq+0x160>)
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	099b      	lsrs	r3, r3, #6
 800209c:	461a      	mov	r2, r3
 800209e:	f04f 0300 	mov.w	r3, #0
 80020a2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80020a6:	f04f 0100 	mov.w	r1, #0
 80020aa:	ea02 0400 	and.w	r4, r2, r0
 80020ae:	ea03 0501 	and.w	r5, r3, r1
 80020b2:	4620      	mov	r0, r4
 80020b4:	4629      	mov	r1, r5
 80020b6:	f04f 0200 	mov.w	r2, #0
 80020ba:	f04f 0300 	mov.w	r3, #0
 80020be:	014b      	lsls	r3, r1, #5
 80020c0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80020c4:	0142      	lsls	r2, r0, #5
 80020c6:	4610      	mov	r0, r2
 80020c8:	4619      	mov	r1, r3
 80020ca:	1b00      	subs	r0, r0, r4
 80020cc:	eb61 0105 	sbc.w	r1, r1, r5
 80020d0:	f04f 0200 	mov.w	r2, #0
 80020d4:	f04f 0300 	mov.w	r3, #0
 80020d8:	018b      	lsls	r3, r1, #6
 80020da:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80020de:	0182      	lsls	r2, r0, #6
 80020e0:	1a12      	subs	r2, r2, r0
 80020e2:	eb63 0301 	sbc.w	r3, r3, r1
 80020e6:	f04f 0000 	mov.w	r0, #0
 80020ea:	f04f 0100 	mov.w	r1, #0
 80020ee:	00d9      	lsls	r1, r3, #3
 80020f0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80020f4:	00d0      	lsls	r0, r2, #3
 80020f6:	4602      	mov	r2, r0
 80020f8:	460b      	mov	r3, r1
 80020fa:	1912      	adds	r2, r2, r4
 80020fc:	eb45 0303 	adc.w	r3, r5, r3
 8002100:	f04f 0000 	mov.w	r0, #0
 8002104:	f04f 0100 	mov.w	r1, #0
 8002108:	0299      	lsls	r1, r3, #10
 800210a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800210e:	0290      	lsls	r0, r2, #10
 8002110:	4602      	mov	r2, r0
 8002112:	460b      	mov	r3, r1
 8002114:	4610      	mov	r0, r2
 8002116:	4619      	mov	r1, r3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	461a      	mov	r2, r3
 800211c:	f04f 0300 	mov.w	r3, #0
 8002120:	f7fe f852 	bl	80001c8 <__aeabi_uldivmod>
 8002124:	4602      	mov	r2, r0
 8002126:	460b      	mov	r3, r1
 8002128:	4613      	mov	r3, r2
 800212a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800212c:	4b0a      	ldr	r3, [pc, #40]	; (8002158 <HAL_RCC_GetSysClockFreq+0x160>)
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	0c1b      	lsrs	r3, r3, #16
 8002132:	f003 0303 	and.w	r3, r3, #3
 8002136:	3301      	adds	r3, #1
 8002138:	005b      	lsls	r3, r3, #1
 800213a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800213c:	68fa      	ldr	r2, [r7, #12]
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	fbb2 f3f3 	udiv	r3, r2, r3
 8002144:	60bb      	str	r3, [r7, #8]
      break;
 8002146:	e002      	b.n	800214e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002148:	4b04      	ldr	r3, [pc, #16]	; (800215c <HAL_RCC_GetSysClockFreq+0x164>)
 800214a:	60bb      	str	r3, [r7, #8]
      break;
 800214c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800214e:	68bb      	ldr	r3, [r7, #8]
}
 8002150:	4618      	mov	r0, r3
 8002152:	3710      	adds	r7, #16
 8002154:	46bd      	mov	sp, r7
 8002156:	bdb0      	pop	{r4, r5, r7, pc}
 8002158:	40023800 	.word	0x40023800
 800215c:	00f42400 	.word	0x00f42400
 8002160:	017d7840 	.word	0x017d7840

08002164 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002168:	4b03      	ldr	r3, [pc, #12]	; (8002178 <HAL_RCC_GetHCLKFreq+0x14>)
 800216a:	681b      	ldr	r3, [r3, #0]
}
 800216c:	4618      	mov	r0, r3
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr
 8002176:	bf00      	nop
 8002178:	20000000 	.word	0x20000000

0800217c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002180:	f7ff fff0 	bl	8002164 <HAL_RCC_GetHCLKFreq>
 8002184:	4602      	mov	r2, r0
 8002186:	4b05      	ldr	r3, [pc, #20]	; (800219c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	0a9b      	lsrs	r3, r3, #10
 800218c:	f003 0307 	and.w	r3, r3, #7
 8002190:	4903      	ldr	r1, [pc, #12]	; (80021a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002192:	5ccb      	ldrb	r3, [r1, r3]
 8002194:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002198:	4618      	mov	r0, r3
 800219a:	bd80      	pop	{r7, pc}
 800219c:	40023800 	.word	0x40023800
 80021a0:	08003ab8 	.word	0x08003ab8

080021a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80021a8:	f7ff ffdc 	bl	8002164 <HAL_RCC_GetHCLKFreq>
 80021ac:	4602      	mov	r2, r0
 80021ae:	4b05      	ldr	r3, [pc, #20]	; (80021c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	0b5b      	lsrs	r3, r3, #13
 80021b4:	f003 0307 	and.w	r3, r3, #7
 80021b8:	4903      	ldr	r1, [pc, #12]	; (80021c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80021ba:	5ccb      	ldrb	r3, [r1, r3]
 80021bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	40023800 	.word	0x40023800
 80021c8:	08003ab8 	.word	0x08003ab8

080021cc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b082      	sub	sp, #8
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d101      	bne.n	80021de <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e041      	b.n	8002262 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d106      	bne.n	80021f8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2200      	movs	r2, #0
 80021ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f7fe fdf2 	bl	8000ddc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2202      	movs	r2, #2
 80021fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	3304      	adds	r3, #4
 8002208:	4619      	mov	r1, r3
 800220a:	4610      	mov	r0, r2
 800220c:	f000 f9b8 	bl	8002580 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2201      	movs	r2, #1
 8002214:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2201      	movs	r2, #1
 800221c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2201      	movs	r2, #1
 8002224:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2201      	movs	r2, #1
 800222c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2201      	movs	r2, #1
 8002234:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2201      	movs	r2, #1
 800223c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2201      	movs	r2, #1
 8002244:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2201      	movs	r2, #1
 800224c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2201      	movs	r2, #1
 8002254:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2201      	movs	r2, #1
 800225c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002260:	2300      	movs	r3, #0
}
 8002262:	4618      	mov	r0, r3
 8002264:	3708      	adds	r7, #8
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
	...

0800226c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b084      	sub	sp, #16
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d109      	bne.n	8002290 <HAL_TIM_PWM_Start+0x24>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002282:	b2db      	uxtb	r3, r3
 8002284:	2b01      	cmp	r3, #1
 8002286:	bf14      	ite	ne
 8002288:	2301      	movne	r3, #1
 800228a:	2300      	moveq	r3, #0
 800228c:	b2db      	uxtb	r3, r3
 800228e:	e022      	b.n	80022d6 <HAL_TIM_PWM_Start+0x6a>
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	2b04      	cmp	r3, #4
 8002294:	d109      	bne.n	80022aa <HAL_TIM_PWM_Start+0x3e>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800229c:	b2db      	uxtb	r3, r3
 800229e:	2b01      	cmp	r3, #1
 80022a0:	bf14      	ite	ne
 80022a2:	2301      	movne	r3, #1
 80022a4:	2300      	moveq	r3, #0
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	e015      	b.n	80022d6 <HAL_TIM_PWM_Start+0x6a>
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	2b08      	cmp	r3, #8
 80022ae:	d109      	bne.n	80022c4 <HAL_TIM_PWM_Start+0x58>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	bf14      	ite	ne
 80022bc:	2301      	movne	r3, #1
 80022be:	2300      	moveq	r3, #0
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	e008      	b.n	80022d6 <HAL_TIM_PWM_Start+0x6a>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	bf14      	ite	ne
 80022d0:	2301      	movne	r3, #1
 80022d2:	2300      	moveq	r3, #0
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d001      	beq.n	80022de <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e07c      	b.n	80023d8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d104      	bne.n	80022ee <HAL_TIM_PWM_Start+0x82>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2202      	movs	r2, #2
 80022e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80022ec:	e013      	b.n	8002316 <HAL_TIM_PWM_Start+0xaa>
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	2b04      	cmp	r3, #4
 80022f2:	d104      	bne.n	80022fe <HAL_TIM_PWM_Start+0x92>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2202      	movs	r2, #2
 80022f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80022fc:	e00b      	b.n	8002316 <HAL_TIM_PWM_Start+0xaa>
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	2b08      	cmp	r3, #8
 8002302:	d104      	bne.n	800230e <HAL_TIM_PWM_Start+0xa2>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2202      	movs	r2, #2
 8002308:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800230c:	e003      	b.n	8002316 <HAL_TIM_PWM_Start+0xaa>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2202      	movs	r2, #2
 8002312:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	2201      	movs	r2, #1
 800231c:	6839      	ldr	r1, [r7, #0]
 800231e:	4618      	mov	r0, r3
 8002320:	f000 fb7e 	bl	8002a20 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a2d      	ldr	r2, [pc, #180]	; (80023e0 <HAL_TIM_PWM_Start+0x174>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d004      	beq.n	8002338 <HAL_TIM_PWM_Start+0xcc>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a2c      	ldr	r2, [pc, #176]	; (80023e4 <HAL_TIM_PWM_Start+0x178>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d101      	bne.n	800233c <HAL_TIM_PWM_Start+0xd0>
 8002338:	2301      	movs	r3, #1
 800233a:	e000      	b.n	800233e <HAL_TIM_PWM_Start+0xd2>
 800233c:	2300      	movs	r3, #0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d007      	beq.n	8002352 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002350:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a22      	ldr	r2, [pc, #136]	; (80023e0 <HAL_TIM_PWM_Start+0x174>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d022      	beq.n	80023a2 <HAL_TIM_PWM_Start+0x136>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002364:	d01d      	beq.n	80023a2 <HAL_TIM_PWM_Start+0x136>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a1f      	ldr	r2, [pc, #124]	; (80023e8 <HAL_TIM_PWM_Start+0x17c>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d018      	beq.n	80023a2 <HAL_TIM_PWM_Start+0x136>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a1d      	ldr	r2, [pc, #116]	; (80023ec <HAL_TIM_PWM_Start+0x180>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d013      	beq.n	80023a2 <HAL_TIM_PWM_Start+0x136>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a1c      	ldr	r2, [pc, #112]	; (80023f0 <HAL_TIM_PWM_Start+0x184>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d00e      	beq.n	80023a2 <HAL_TIM_PWM_Start+0x136>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a16      	ldr	r2, [pc, #88]	; (80023e4 <HAL_TIM_PWM_Start+0x178>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d009      	beq.n	80023a2 <HAL_TIM_PWM_Start+0x136>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a18      	ldr	r2, [pc, #96]	; (80023f4 <HAL_TIM_PWM_Start+0x188>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d004      	beq.n	80023a2 <HAL_TIM_PWM_Start+0x136>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a16      	ldr	r2, [pc, #88]	; (80023f8 <HAL_TIM_PWM_Start+0x18c>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d111      	bne.n	80023c6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	f003 0307 	and.w	r3, r3, #7
 80023ac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	2b06      	cmp	r3, #6
 80023b2:	d010      	beq.n	80023d6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f042 0201 	orr.w	r2, r2, #1
 80023c2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023c4:	e007      	b.n	80023d6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f042 0201 	orr.w	r2, r2, #1
 80023d4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80023d6:	2300      	movs	r3, #0
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3710      	adds	r7, #16
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	40010000 	.word	0x40010000
 80023e4:	40010400 	.word	0x40010400
 80023e8:	40000400 	.word	0x40000400
 80023ec:	40000800 	.word	0x40000800
 80023f0:	40000c00 	.word	0x40000c00
 80023f4:	40014000 	.word	0x40014000
 80023f8:	40001800 	.word	0x40001800

080023fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b086      	sub	sp, #24
 8002400:	af00      	add	r7, sp, #0
 8002402:	60f8      	str	r0, [r7, #12]
 8002404:	60b9      	str	r1, [r7, #8]
 8002406:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002408:	2300      	movs	r3, #0
 800240a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002412:	2b01      	cmp	r3, #1
 8002414:	d101      	bne.n	800241a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002416:	2302      	movs	r3, #2
 8002418:	e0ae      	b.n	8002578 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	2201      	movs	r2, #1
 800241e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2b0c      	cmp	r3, #12
 8002426:	f200 809f 	bhi.w	8002568 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800242a:	a201      	add	r2, pc, #4	; (adr r2, 8002430 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800242c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002430:	08002465 	.word	0x08002465
 8002434:	08002569 	.word	0x08002569
 8002438:	08002569 	.word	0x08002569
 800243c:	08002569 	.word	0x08002569
 8002440:	080024a5 	.word	0x080024a5
 8002444:	08002569 	.word	0x08002569
 8002448:	08002569 	.word	0x08002569
 800244c:	08002569 	.word	0x08002569
 8002450:	080024e7 	.word	0x080024e7
 8002454:	08002569 	.word	0x08002569
 8002458:	08002569 	.word	0x08002569
 800245c:	08002569 	.word	0x08002569
 8002460:	08002527 	.word	0x08002527
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	68b9      	ldr	r1, [r7, #8]
 800246a:	4618      	mov	r0, r3
 800246c:	f000 f928 	bl	80026c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	699a      	ldr	r2, [r3, #24]
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f042 0208 	orr.w	r2, r2, #8
 800247e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	699a      	ldr	r2, [r3, #24]
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f022 0204 	bic.w	r2, r2, #4
 800248e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	6999      	ldr	r1, [r3, #24]
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	691a      	ldr	r2, [r3, #16]
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	430a      	orrs	r2, r1
 80024a0:	619a      	str	r2, [r3, #24]
      break;
 80024a2:	e064      	b.n	800256e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	68b9      	ldr	r1, [r7, #8]
 80024aa:	4618      	mov	r0, r3
 80024ac:	f000 f978 	bl	80027a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	699a      	ldr	r2, [r3, #24]
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80024be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	699a      	ldr	r2, [r3, #24]
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	6999      	ldr	r1, [r3, #24]
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	691b      	ldr	r3, [r3, #16]
 80024da:	021a      	lsls	r2, r3, #8
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	430a      	orrs	r2, r1
 80024e2:	619a      	str	r2, [r3, #24]
      break;
 80024e4:	e043      	b.n	800256e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	68b9      	ldr	r1, [r7, #8]
 80024ec:	4618      	mov	r0, r3
 80024ee:	f000 f9cd 	bl	800288c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	69da      	ldr	r2, [r3, #28]
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f042 0208 	orr.w	r2, r2, #8
 8002500:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	69da      	ldr	r2, [r3, #28]
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f022 0204 	bic.w	r2, r2, #4
 8002510:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	69d9      	ldr	r1, [r3, #28]
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	691a      	ldr	r2, [r3, #16]
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	430a      	orrs	r2, r1
 8002522:	61da      	str	r2, [r3, #28]
      break;
 8002524:	e023      	b.n	800256e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	68b9      	ldr	r1, [r7, #8]
 800252c:	4618      	mov	r0, r3
 800252e:	f000 fa21 	bl	8002974 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	69da      	ldr	r2, [r3, #28]
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002540:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	69da      	ldr	r2, [r3, #28]
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002550:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	69d9      	ldr	r1, [r3, #28]
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	691b      	ldr	r3, [r3, #16]
 800255c:	021a      	lsls	r2, r3, #8
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	430a      	orrs	r2, r1
 8002564:	61da      	str	r2, [r3, #28]
      break;
 8002566:	e002      	b.n	800256e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	75fb      	strb	r3, [r7, #23]
      break;
 800256c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	2200      	movs	r2, #0
 8002572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002576:	7dfb      	ldrb	r3, [r7, #23]
}
 8002578:	4618      	mov	r0, r3
 800257a:	3718      	adds	r7, #24
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}

08002580 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002580:	b480      	push	{r7}
 8002582:	b085      	sub	sp, #20
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
 8002588:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	4a40      	ldr	r2, [pc, #256]	; (8002694 <TIM_Base_SetConfig+0x114>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d013      	beq.n	80025c0 <TIM_Base_SetConfig+0x40>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800259e:	d00f      	beq.n	80025c0 <TIM_Base_SetConfig+0x40>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	4a3d      	ldr	r2, [pc, #244]	; (8002698 <TIM_Base_SetConfig+0x118>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d00b      	beq.n	80025c0 <TIM_Base_SetConfig+0x40>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	4a3c      	ldr	r2, [pc, #240]	; (800269c <TIM_Base_SetConfig+0x11c>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d007      	beq.n	80025c0 <TIM_Base_SetConfig+0x40>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	4a3b      	ldr	r2, [pc, #236]	; (80026a0 <TIM_Base_SetConfig+0x120>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d003      	beq.n	80025c0 <TIM_Base_SetConfig+0x40>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	4a3a      	ldr	r2, [pc, #232]	; (80026a4 <TIM_Base_SetConfig+0x124>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d108      	bne.n	80025d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	68fa      	ldr	r2, [r7, #12]
 80025ce:	4313      	orrs	r3, r2
 80025d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4a2f      	ldr	r2, [pc, #188]	; (8002694 <TIM_Base_SetConfig+0x114>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d02b      	beq.n	8002632 <TIM_Base_SetConfig+0xb2>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025e0:	d027      	beq.n	8002632 <TIM_Base_SetConfig+0xb2>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4a2c      	ldr	r2, [pc, #176]	; (8002698 <TIM_Base_SetConfig+0x118>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d023      	beq.n	8002632 <TIM_Base_SetConfig+0xb2>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4a2b      	ldr	r2, [pc, #172]	; (800269c <TIM_Base_SetConfig+0x11c>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d01f      	beq.n	8002632 <TIM_Base_SetConfig+0xb2>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4a2a      	ldr	r2, [pc, #168]	; (80026a0 <TIM_Base_SetConfig+0x120>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d01b      	beq.n	8002632 <TIM_Base_SetConfig+0xb2>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4a29      	ldr	r2, [pc, #164]	; (80026a4 <TIM_Base_SetConfig+0x124>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d017      	beq.n	8002632 <TIM_Base_SetConfig+0xb2>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4a28      	ldr	r2, [pc, #160]	; (80026a8 <TIM_Base_SetConfig+0x128>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d013      	beq.n	8002632 <TIM_Base_SetConfig+0xb2>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4a27      	ldr	r2, [pc, #156]	; (80026ac <TIM_Base_SetConfig+0x12c>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d00f      	beq.n	8002632 <TIM_Base_SetConfig+0xb2>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4a26      	ldr	r2, [pc, #152]	; (80026b0 <TIM_Base_SetConfig+0x130>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d00b      	beq.n	8002632 <TIM_Base_SetConfig+0xb2>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4a25      	ldr	r2, [pc, #148]	; (80026b4 <TIM_Base_SetConfig+0x134>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d007      	beq.n	8002632 <TIM_Base_SetConfig+0xb2>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4a24      	ldr	r2, [pc, #144]	; (80026b8 <TIM_Base_SetConfig+0x138>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d003      	beq.n	8002632 <TIM_Base_SetConfig+0xb2>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	4a23      	ldr	r2, [pc, #140]	; (80026bc <TIM_Base_SetConfig+0x13c>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d108      	bne.n	8002644 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002638:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	68db      	ldr	r3, [r3, #12]
 800263e:	68fa      	ldr	r2, [r7, #12]
 8002640:	4313      	orrs	r3, r2
 8002642:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	695b      	ldr	r3, [r3, #20]
 800264e:	4313      	orrs	r3, r2
 8002650:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	68fa      	ldr	r2, [r7, #12]
 8002656:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	689a      	ldr	r2, [r3, #8]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	4a0a      	ldr	r2, [pc, #40]	; (8002694 <TIM_Base_SetConfig+0x114>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d003      	beq.n	8002678 <TIM_Base_SetConfig+0xf8>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	4a0c      	ldr	r2, [pc, #48]	; (80026a4 <TIM_Base_SetConfig+0x124>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d103      	bne.n	8002680 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	691a      	ldr	r2, [r3, #16]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2201      	movs	r2, #1
 8002684:	615a      	str	r2, [r3, #20]
}
 8002686:	bf00      	nop
 8002688:	3714      	adds	r7, #20
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr
 8002692:	bf00      	nop
 8002694:	40010000 	.word	0x40010000
 8002698:	40000400 	.word	0x40000400
 800269c:	40000800 	.word	0x40000800
 80026a0:	40000c00 	.word	0x40000c00
 80026a4:	40010400 	.word	0x40010400
 80026a8:	40014000 	.word	0x40014000
 80026ac:	40014400 	.word	0x40014400
 80026b0:	40014800 	.word	0x40014800
 80026b4:	40001800 	.word	0x40001800
 80026b8:	40001c00 	.word	0x40001c00
 80026bc:	40002000 	.word	0x40002000

080026c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b087      	sub	sp, #28
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6a1b      	ldr	r3, [r3, #32]
 80026ce:	f023 0201 	bic.w	r2, r3, #1
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6a1b      	ldr	r3, [r3, #32]
 80026da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	699b      	ldr	r3, [r3, #24]
 80026e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	f023 0303 	bic.w	r3, r3, #3
 80026f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	68fa      	ldr	r2, [r7, #12]
 80026fe:	4313      	orrs	r3, r2
 8002700:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	f023 0302 	bic.w	r3, r3, #2
 8002708:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	697a      	ldr	r2, [r7, #20]
 8002710:	4313      	orrs	r3, r2
 8002712:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	4a20      	ldr	r2, [pc, #128]	; (8002798 <TIM_OC1_SetConfig+0xd8>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d003      	beq.n	8002724 <TIM_OC1_SetConfig+0x64>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	4a1f      	ldr	r2, [pc, #124]	; (800279c <TIM_OC1_SetConfig+0xdc>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d10c      	bne.n	800273e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	f023 0308 	bic.w	r3, r3, #8
 800272a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	697a      	ldr	r2, [r7, #20]
 8002732:	4313      	orrs	r3, r2
 8002734:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	f023 0304 	bic.w	r3, r3, #4
 800273c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4a15      	ldr	r2, [pc, #84]	; (8002798 <TIM_OC1_SetConfig+0xd8>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d003      	beq.n	800274e <TIM_OC1_SetConfig+0x8e>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4a14      	ldr	r2, [pc, #80]	; (800279c <TIM_OC1_SetConfig+0xdc>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d111      	bne.n	8002772 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002754:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800275c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	695b      	ldr	r3, [r3, #20]
 8002762:	693a      	ldr	r2, [r7, #16]
 8002764:	4313      	orrs	r3, r2
 8002766:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	699b      	ldr	r3, [r3, #24]
 800276c:	693a      	ldr	r2, [r7, #16]
 800276e:	4313      	orrs	r3, r2
 8002770:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	693a      	ldr	r2, [r7, #16]
 8002776:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	68fa      	ldr	r2, [r7, #12]
 800277c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	685a      	ldr	r2, [r3, #4]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	697a      	ldr	r2, [r7, #20]
 800278a:	621a      	str	r2, [r3, #32]
}
 800278c:	bf00      	nop
 800278e:	371c      	adds	r7, #28
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr
 8002798:	40010000 	.word	0x40010000
 800279c:	40010400 	.word	0x40010400

080027a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b087      	sub	sp, #28
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6a1b      	ldr	r3, [r3, #32]
 80027ae:	f023 0210 	bic.w	r2, r3, #16
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6a1b      	ldr	r3, [r3, #32]
 80027ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	699b      	ldr	r3, [r3, #24]
 80027c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	021b      	lsls	r3, r3, #8
 80027de:	68fa      	ldr	r2, [r7, #12]
 80027e0:	4313      	orrs	r3, r2
 80027e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	f023 0320 	bic.w	r3, r3, #32
 80027ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	011b      	lsls	r3, r3, #4
 80027f2:	697a      	ldr	r2, [r7, #20]
 80027f4:	4313      	orrs	r3, r2
 80027f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	4a22      	ldr	r2, [pc, #136]	; (8002884 <TIM_OC2_SetConfig+0xe4>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d003      	beq.n	8002808 <TIM_OC2_SetConfig+0x68>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	4a21      	ldr	r2, [pc, #132]	; (8002888 <TIM_OC2_SetConfig+0xe8>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d10d      	bne.n	8002824 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800280e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	011b      	lsls	r3, r3, #4
 8002816:	697a      	ldr	r2, [r7, #20]
 8002818:	4313      	orrs	r3, r2
 800281a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002822:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	4a17      	ldr	r2, [pc, #92]	; (8002884 <TIM_OC2_SetConfig+0xe4>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d003      	beq.n	8002834 <TIM_OC2_SetConfig+0x94>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	4a16      	ldr	r2, [pc, #88]	; (8002888 <TIM_OC2_SetConfig+0xe8>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d113      	bne.n	800285c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800283a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002842:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	695b      	ldr	r3, [r3, #20]
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	693a      	ldr	r2, [r7, #16]
 800284c:	4313      	orrs	r3, r2
 800284e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	699b      	ldr	r3, [r3, #24]
 8002854:	009b      	lsls	r3, r3, #2
 8002856:	693a      	ldr	r2, [r7, #16]
 8002858:	4313      	orrs	r3, r2
 800285a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	693a      	ldr	r2, [r7, #16]
 8002860:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	68fa      	ldr	r2, [r7, #12]
 8002866:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	685a      	ldr	r2, [r3, #4]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	697a      	ldr	r2, [r7, #20]
 8002874:	621a      	str	r2, [r3, #32]
}
 8002876:	bf00      	nop
 8002878:	371c      	adds	r7, #28
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr
 8002882:	bf00      	nop
 8002884:	40010000 	.word	0x40010000
 8002888:	40010400 	.word	0x40010400

0800288c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800288c:	b480      	push	{r7}
 800288e:	b087      	sub	sp, #28
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
 8002894:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6a1b      	ldr	r3, [r3, #32]
 800289a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6a1b      	ldr	r3, [r3, #32]
 80028a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	69db      	ldr	r3, [r3, #28]
 80028b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	f023 0303 	bic.w	r3, r3, #3
 80028c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	68fa      	ldr	r2, [r7, #12]
 80028ca:	4313      	orrs	r3, r2
 80028cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80028d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	021b      	lsls	r3, r3, #8
 80028dc:	697a      	ldr	r2, [r7, #20]
 80028de:	4313      	orrs	r3, r2
 80028e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	4a21      	ldr	r2, [pc, #132]	; (800296c <TIM_OC3_SetConfig+0xe0>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d003      	beq.n	80028f2 <TIM_OC3_SetConfig+0x66>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	4a20      	ldr	r2, [pc, #128]	; (8002970 <TIM_OC3_SetConfig+0xe4>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d10d      	bne.n	800290e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80028f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	68db      	ldr	r3, [r3, #12]
 80028fe:	021b      	lsls	r3, r3, #8
 8002900:	697a      	ldr	r2, [r7, #20]
 8002902:	4313      	orrs	r3, r2
 8002904:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800290c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4a16      	ldr	r2, [pc, #88]	; (800296c <TIM_OC3_SetConfig+0xe0>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d003      	beq.n	800291e <TIM_OC3_SetConfig+0x92>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4a15      	ldr	r2, [pc, #84]	; (8002970 <TIM_OC3_SetConfig+0xe4>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d113      	bne.n	8002946 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002924:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800292c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	695b      	ldr	r3, [r3, #20]
 8002932:	011b      	lsls	r3, r3, #4
 8002934:	693a      	ldr	r2, [r7, #16]
 8002936:	4313      	orrs	r3, r2
 8002938:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	699b      	ldr	r3, [r3, #24]
 800293e:	011b      	lsls	r3, r3, #4
 8002940:	693a      	ldr	r2, [r7, #16]
 8002942:	4313      	orrs	r3, r2
 8002944:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	693a      	ldr	r2, [r7, #16]
 800294a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	68fa      	ldr	r2, [r7, #12]
 8002950:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	685a      	ldr	r2, [r3, #4]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	697a      	ldr	r2, [r7, #20]
 800295e:	621a      	str	r2, [r3, #32]
}
 8002960:	bf00      	nop
 8002962:	371c      	adds	r7, #28
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr
 800296c:	40010000 	.word	0x40010000
 8002970:	40010400 	.word	0x40010400

08002974 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002974:	b480      	push	{r7}
 8002976:	b087      	sub	sp, #28
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
 800297c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6a1b      	ldr	r3, [r3, #32]
 8002982:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6a1b      	ldr	r3, [r3, #32]
 800298e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	69db      	ldr	r3, [r3, #28]
 800299a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	021b      	lsls	r3, r3, #8
 80029b2:	68fa      	ldr	r2, [r7, #12]
 80029b4:	4313      	orrs	r3, r2
 80029b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80029be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	031b      	lsls	r3, r3, #12
 80029c6:	693a      	ldr	r2, [r7, #16]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	4a12      	ldr	r2, [pc, #72]	; (8002a18 <TIM_OC4_SetConfig+0xa4>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d003      	beq.n	80029dc <TIM_OC4_SetConfig+0x68>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	4a11      	ldr	r2, [pc, #68]	; (8002a1c <TIM_OC4_SetConfig+0xa8>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d109      	bne.n	80029f0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80029e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	695b      	ldr	r3, [r3, #20]
 80029e8:	019b      	lsls	r3, r3, #6
 80029ea:	697a      	ldr	r2, [r7, #20]
 80029ec:	4313      	orrs	r3, r2
 80029ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	697a      	ldr	r2, [r7, #20]
 80029f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	68fa      	ldr	r2, [r7, #12]
 80029fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	685a      	ldr	r2, [r3, #4]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	693a      	ldr	r2, [r7, #16]
 8002a08:	621a      	str	r2, [r3, #32]
}
 8002a0a:	bf00      	nop
 8002a0c:	371c      	adds	r7, #28
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr
 8002a16:	bf00      	nop
 8002a18:	40010000 	.word	0x40010000
 8002a1c:	40010400 	.word	0x40010400

08002a20 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b087      	sub	sp, #28
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	60f8      	str	r0, [r7, #12]
 8002a28:	60b9      	str	r1, [r7, #8]
 8002a2a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	f003 031f 	and.w	r3, r3, #31
 8002a32:	2201      	movs	r2, #1
 8002a34:	fa02 f303 	lsl.w	r3, r2, r3
 8002a38:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	6a1a      	ldr	r2, [r3, #32]
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	43db      	mvns	r3, r3
 8002a42:	401a      	ands	r2, r3
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	6a1a      	ldr	r2, [r3, #32]
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	f003 031f 	and.w	r3, r3, #31
 8002a52:	6879      	ldr	r1, [r7, #4]
 8002a54:	fa01 f303 	lsl.w	r3, r1, r3
 8002a58:	431a      	orrs	r2, r3
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	621a      	str	r2, [r3, #32]
}
 8002a5e:	bf00      	nop
 8002a60:	371c      	adds	r7, #28
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr
	...

08002a6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b085      	sub	sp, #20
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
 8002a74:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d101      	bne.n	8002a84 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002a80:	2302      	movs	r3, #2
 8002a82:	e05a      	b.n	8002b3a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2201      	movs	r2, #1
 8002a88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2202      	movs	r2, #2
 8002a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002aaa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	68fa      	ldr	r2, [r7, #12]
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	68fa      	ldr	r2, [r7, #12]
 8002abc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a21      	ldr	r2, [pc, #132]	; (8002b48 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d022      	beq.n	8002b0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ad0:	d01d      	beq.n	8002b0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a1d      	ldr	r2, [pc, #116]	; (8002b4c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d018      	beq.n	8002b0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a1b      	ldr	r2, [pc, #108]	; (8002b50 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d013      	beq.n	8002b0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a1a      	ldr	r2, [pc, #104]	; (8002b54 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d00e      	beq.n	8002b0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a18      	ldr	r2, [pc, #96]	; (8002b58 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d009      	beq.n	8002b0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a17      	ldr	r2, [pc, #92]	; (8002b5c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d004      	beq.n	8002b0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a15      	ldr	r2, [pc, #84]	; (8002b60 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d10c      	bne.n	8002b28 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b14:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	68ba      	ldr	r2, [r7, #8]
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	68ba      	ldr	r2, [r7, #8]
 8002b26:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2200      	movs	r2, #0
 8002b34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b38:	2300      	movs	r3, #0
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3714      	adds	r7, #20
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr
 8002b46:	bf00      	nop
 8002b48:	40010000 	.word	0x40010000
 8002b4c:	40000400 	.word	0x40000400
 8002b50:	40000800 	.word	0x40000800
 8002b54:	40000c00 	.word	0x40000c00
 8002b58:	40010400 	.word	0x40010400
 8002b5c:	40014000 	.word	0x40014000
 8002b60:	40001800 	.word	0x40001800

08002b64 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b082      	sub	sp, #8
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d101      	bne.n	8002b76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e03f      	b.n	8002bf6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d106      	bne.n	8002b90 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2200      	movs	r2, #0
 8002b86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f7fe f9e0 	bl	8000f50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2224      	movs	r2, #36	; 0x24
 8002b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	68da      	ldr	r2, [r3, #12]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ba6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	f000 fce5 	bl	8003578 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	691a      	ldr	r2, [r3, #16]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002bbc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	695a      	ldr	r2, [r3, #20]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002bcc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	68da      	ldr	r2, [r3, #12]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002bdc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2200      	movs	r2, #0
 8002be2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2220      	movs	r2, #32
 8002be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2220      	movs	r2, #32
 8002bf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002bf4:	2300      	movs	r3, #0
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3708      	adds	r7, #8
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}

08002bfe <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002bfe:	b580      	push	{r7, lr}
 8002c00:	b084      	sub	sp, #16
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	60f8      	str	r0, [r7, #12]
 8002c06:	60b9      	str	r1, [r7, #8]
 8002c08:	4613      	mov	r3, r2
 8002c0a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	2b20      	cmp	r3, #32
 8002c16:	d11d      	bne.n	8002c54 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d002      	beq.n	8002c24 <HAL_UART_Receive_IT+0x26>
 8002c1e:	88fb      	ldrh	r3, [r7, #6]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d101      	bne.n	8002c28 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	e016      	b.n	8002c56 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d101      	bne.n	8002c36 <HAL_UART_Receive_IT+0x38>
 8002c32:	2302      	movs	r3, #2
 8002c34:	e00f      	b.n	8002c56 <HAL_UART_Receive_IT+0x58>
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2201      	movs	r2, #1
 8002c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2200      	movs	r2, #0
 8002c42:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002c44:	88fb      	ldrh	r3, [r7, #6]
 8002c46:	461a      	mov	r2, r3
 8002c48:	68b9      	ldr	r1, [r7, #8]
 8002c4a:	68f8      	ldr	r0, [r7, #12]
 8002c4c:	f000 fac0 	bl	80031d0 <UART_Start_Receive_IT>
 8002c50:	4603      	mov	r3, r0
 8002c52:	e000      	b.n	8002c56 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002c54:	2302      	movs	r3, #2
  }
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3710      	adds	r7, #16
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}
	...

08002c60 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b0ba      	sub	sp, #232	; 0xe8
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	695b      	ldr	r3, [r3, #20]
 8002c82:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002c86:	2300      	movs	r3, #0
 8002c88:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002c92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c96:	f003 030f 	and.w	r3, r3, #15
 8002c9a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002c9e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d10f      	bne.n	8002cc6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002ca6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002caa:	f003 0320 	and.w	r3, r3, #32
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d009      	beq.n	8002cc6 <HAL_UART_IRQHandler+0x66>
 8002cb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002cb6:	f003 0320 	and.w	r3, r3, #32
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d003      	beq.n	8002cc6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f000 fb9f 	bl	8003402 <UART_Receive_IT>
      return;
 8002cc4:	e256      	b.n	8003174 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002cc6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	f000 80de 	beq.w	8002e8c <HAL_UART_IRQHandler+0x22c>
 8002cd0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002cd4:	f003 0301 	and.w	r3, r3, #1
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d106      	bne.n	8002cea <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002cdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ce0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	f000 80d1 	beq.w	8002e8c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002cea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cee:	f003 0301 	and.w	r3, r3, #1
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d00b      	beq.n	8002d0e <HAL_UART_IRQHandler+0xae>
 8002cf6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002cfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d005      	beq.n	8002d0e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d06:	f043 0201 	orr.w	r2, r3, #1
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002d0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d12:	f003 0304 	and.w	r3, r3, #4
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d00b      	beq.n	8002d32 <HAL_UART_IRQHandler+0xd2>
 8002d1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d1e:	f003 0301 	and.w	r3, r3, #1
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d005      	beq.n	8002d32 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2a:	f043 0202 	orr.w	r2, r3, #2
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002d32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d36:	f003 0302 	and.w	r3, r3, #2
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d00b      	beq.n	8002d56 <HAL_UART_IRQHandler+0xf6>
 8002d3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d42:	f003 0301 	and.w	r3, r3, #1
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d005      	beq.n	8002d56 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4e:	f043 0204 	orr.w	r2, r3, #4
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002d56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d5a:	f003 0308 	and.w	r3, r3, #8
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d011      	beq.n	8002d86 <HAL_UART_IRQHandler+0x126>
 8002d62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d66:	f003 0320 	and.w	r3, r3, #32
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d105      	bne.n	8002d7a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002d6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d72:	f003 0301 	and.w	r3, r3, #1
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d005      	beq.n	8002d86 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7e:	f043 0208 	orr.w	r2, r3, #8
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	f000 81ed 	beq.w	800316a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002d90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d94:	f003 0320 	and.w	r3, r3, #32
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d008      	beq.n	8002dae <HAL_UART_IRQHandler+0x14e>
 8002d9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002da0:	f003 0320 	and.w	r3, r3, #32
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d002      	beq.n	8002dae <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002da8:	6878      	ldr	r0, [r7, #4]
 8002daa:	f000 fb2a 	bl	8003402 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	695b      	ldr	r3, [r3, #20]
 8002db4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002db8:	2b40      	cmp	r3, #64	; 0x40
 8002dba:	bf0c      	ite	eq
 8002dbc:	2301      	moveq	r3, #1
 8002dbe:	2300      	movne	r3, #0
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dca:	f003 0308 	and.w	r3, r3, #8
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d103      	bne.n	8002dda <HAL_UART_IRQHandler+0x17a>
 8002dd2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d04f      	beq.n	8002e7a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f000 fa32 	bl	8003244 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	695b      	ldr	r3, [r3, #20]
 8002de6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dea:	2b40      	cmp	r3, #64	; 0x40
 8002dec:	d141      	bne.n	8002e72 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	3314      	adds	r3, #20
 8002df4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002df8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002dfc:	e853 3f00 	ldrex	r3, [r3]
 8002e00:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002e04:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002e08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e0c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	3314      	adds	r3, #20
 8002e16:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002e1a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002e1e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e22:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002e26:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002e2a:	e841 2300 	strex	r3, r2, [r1]
 8002e2e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002e32:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d1d9      	bne.n	8002dee <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d013      	beq.n	8002e6a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e46:	4a7d      	ldr	r2, [pc, #500]	; (800303c <HAL_UART_IRQHandler+0x3dc>)
 8002e48:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f7fe fb9b 	bl	800158a <HAL_DMA_Abort_IT>
 8002e54:	4603      	mov	r3, r0
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d016      	beq.n	8002e88 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e60:	687a      	ldr	r2, [r7, #4]
 8002e62:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002e64:	4610      	mov	r0, r2
 8002e66:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e68:	e00e      	b.n	8002e88 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f000 f99a 	bl	80031a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e70:	e00a      	b.n	8002e88 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f000 f996 	bl	80031a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e78:	e006      	b.n	8002e88 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f000 f992 	bl	80031a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2200      	movs	r2, #0
 8002e84:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002e86:	e170      	b.n	800316a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e88:	bf00      	nop
    return;
 8002e8a:	e16e      	b.n	800316a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	f040 814a 	bne.w	800312a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002e96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e9a:	f003 0310 	and.w	r3, r3, #16
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	f000 8143 	beq.w	800312a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002ea4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ea8:	f003 0310 	and.w	r3, r3, #16
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	f000 813c 	beq.w	800312a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	60bb      	str	r3, [r7, #8]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	60bb      	str	r3, [r7, #8]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	60bb      	str	r3, [r7, #8]
 8002ec6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	695b      	ldr	r3, [r3, #20]
 8002ece:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ed2:	2b40      	cmp	r3, #64	; 0x40
 8002ed4:	f040 80b4 	bne.w	8003040 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002ee4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	f000 8140 	beq.w	800316e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002ef2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	f080 8139 	bcs.w	800316e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002f02:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f08:	69db      	ldr	r3, [r3, #28]
 8002f0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f0e:	f000 8088 	beq.w	8003022 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	330c      	adds	r3, #12
 8002f18:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f1c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002f20:	e853 3f00 	ldrex	r3, [r3]
 8002f24:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002f28:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002f2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f30:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	330c      	adds	r3, #12
 8002f3a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002f3e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002f42:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f46:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002f4a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002f4e:	e841 2300 	strex	r3, r2, [r1]
 8002f52:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002f56:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d1d9      	bne.n	8002f12 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	3314      	adds	r3, #20
 8002f64:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f68:	e853 3f00 	ldrex	r3, [r3]
 8002f6c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002f6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f70:	f023 0301 	bic.w	r3, r3, #1
 8002f74:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	3314      	adds	r3, #20
 8002f7e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002f82:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002f86:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f88:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002f8a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002f8e:	e841 2300 	strex	r3, r2, [r1]
 8002f92:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002f94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d1e1      	bne.n	8002f5e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	3314      	adds	r3, #20
 8002fa0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fa2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002fa4:	e853 3f00 	ldrex	r3, [r3]
 8002fa8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002faa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002fb0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	3314      	adds	r3, #20
 8002fba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002fbe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002fc0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fc2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002fc4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002fc6:	e841 2300 	strex	r3, r2, [r1]
 8002fca:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002fcc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d1e3      	bne.n	8002f9a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2220      	movs	r2, #32
 8002fd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	330c      	adds	r3, #12
 8002fe6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fe8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fea:	e853 3f00 	ldrex	r3, [r3]
 8002fee:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002ff0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ff2:	f023 0310 	bic.w	r3, r3, #16
 8002ff6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	330c      	adds	r3, #12
 8003000:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003004:	65ba      	str	r2, [r7, #88]	; 0x58
 8003006:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003008:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800300a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800300c:	e841 2300 	strex	r3, r2, [r1]
 8003010:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003012:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003014:	2b00      	cmp	r3, #0
 8003016:	d1e3      	bne.n	8002fe0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800301c:	4618      	mov	r0, r3
 800301e:	f7fe fa44 	bl	80014aa <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800302a:	b29b      	uxth	r3, r3
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	b29b      	uxth	r3, r3
 8003030:	4619      	mov	r1, r3
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f000 f8c0 	bl	80031b8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003038:	e099      	b.n	800316e <HAL_UART_IRQHandler+0x50e>
 800303a:	bf00      	nop
 800303c:	0800330b 	.word	0x0800330b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003048:	b29b      	uxth	r3, r3
 800304a:	1ad3      	subs	r3, r2, r3
 800304c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003054:	b29b      	uxth	r3, r3
 8003056:	2b00      	cmp	r3, #0
 8003058:	f000 808b 	beq.w	8003172 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800305c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003060:	2b00      	cmp	r3, #0
 8003062:	f000 8086 	beq.w	8003172 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	330c      	adds	r3, #12
 800306c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800306e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003070:	e853 3f00 	ldrex	r3, [r3]
 8003074:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003076:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003078:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800307c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	330c      	adds	r3, #12
 8003086:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800308a:	647a      	str	r2, [r7, #68]	; 0x44
 800308c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800308e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003090:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003092:	e841 2300 	strex	r3, r2, [r1]
 8003096:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003098:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800309a:	2b00      	cmp	r3, #0
 800309c:	d1e3      	bne.n	8003066 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	3314      	adds	r3, #20
 80030a4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a8:	e853 3f00 	ldrex	r3, [r3]
 80030ac:	623b      	str	r3, [r7, #32]
   return(result);
 80030ae:	6a3b      	ldr	r3, [r7, #32]
 80030b0:	f023 0301 	bic.w	r3, r3, #1
 80030b4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	3314      	adds	r3, #20
 80030be:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80030c2:	633a      	str	r2, [r7, #48]	; 0x30
 80030c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80030c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030ca:	e841 2300 	strex	r3, r2, [r1]
 80030ce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80030d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d1e3      	bne.n	800309e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2220      	movs	r2, #32
 80030da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2200      	movs	r2, #0
 80030e2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	330c      	adds	r3, #12
 80030ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	e853 3f00 	ldrex	r3, [r3]
 80030f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	f023 0310 	bic.w	r3, r3, #16
 80030fa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	330c      	adds	r3, #12
 8003104:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003108:	61fa      	str	r2, [r7, #28]
 800310a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800310c:	69b9      	ldr	r1, [r7, #24]
 800310e:	69fa      	ldr	r2, [r7, #28]
 8003110:	e841 2300 	strex	r3, r2, [r1]
 8003114:	617b      	str	r3, [r7, #20]
   return(result);
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d1e3      	bne.n	80030e4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800311c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003120:	4619      	mov	r1, r3
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f000 f848 	bl	80031b8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003128:	e023      	b.n	8003172 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800312a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800312e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003132:	2b00      	cmp	r3, #0
 8003134:	d009      	beq.n	800314a <HAL_UART_IRQHandler+0x4ea>
 8003136:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800313a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800313e:	2b00      	cmp	r3, #0
 8003140:	d003      	beq.n	800314a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f000 f8f5 	bl	8003332 <UART_Transmit_IT>
    return;
 8003148:	e014      	b.n	8003174 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800314a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800314e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003152:	2b00      	cmp	r3, #0
 8003154:	d00e      	beq.n	8003174 <HAL_UART_IRQHandler+0x514>
 8003156:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800315a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800315e:	2b00      	cmp	r3, #0
 8003160:	d008      	beq.n	8003174 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f000 f935 	bl	80033d2 <UART_EndTransmit_IT>
    return;
 8003168:	e004      	b.n	8003174 <HAL_UART_IRQHandler+0x514>
    return;
 800316a:	bf00      	nop
 800316c:	e002      	b.n	8003174 <HAL_UART_IRQHandler+0x514>
      return;
 800316e:	bf00      	nop
 8003170:	e000      	b.n	8003174 <HAL_UART_IRQHandler+0x514>
      return;
 8003172:	bf00      	nop
  }
}
 8003174:	37e8      	adds	r7, #232	; 0xe8
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}
 800317a:	bf00      	nop

0800317c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800317c:	b480      	push	{r7}
 800317e:	b083      	sub	sp, #12
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003184:	bf00      	nop
 8003186:	370c      	adds	r7, #12
 8003188:	46bd      	mov	sp, r7
 800318a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318e:	4770      	bx	lr

08003190 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003190:	b480      	push	{r7}
 8003192:	b083      	sub	sp, #12
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003198:	bf00      	nop
 800319a:	370c      	adds	r7, #12
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr

080031a4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b083      	sub	sp, #12
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80031ac:	bf00      	nop
 80031ae:	370c      	adds	r7, #12
 80031b0:	46bd      	mov	sp, r7
 80031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b6:	4770      	bx	lr

080031b8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b083      	sub	sp, #12
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
 80031c0:	460b      	mov	r3, r1
 80031c2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80031c4:	bf00      	nop
 80031c6:	370c      	adds	r7, #12
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr

080031d0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b085      	sub	sp, #20
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	60f8      	str	r0, [r7, #12]
 80031d8:	60b9      	str	r1, [r7, #8]
 80031da:	4613      	mov	r3, r2
 80031dc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	68ba      	ldr	r2, [r7, #8]
 80031e2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	88fa      	ldrh	r2, [r7, #6]
 80031e8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	88fa      	ldrh	r2, [r7, #6]
 80031ee:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2200      	movs	r2, #0
 80031f4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2222      	movs	r2, #34	; 0x22
 80031fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2200      	movs	r2, #0
 8003202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	68da      	ldr	r2, [r3, #12]
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003214:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	695a      	ldr	r2, [r3, #20]
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f042 0201 	orr.w	r2, r2, #1
 8003224:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	68da      	ldr	r2, [r3, #12]
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f042 0220 	orr.w	r2, r2, #32
 8003234:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003236:	2300      	movs	r3, #0
}
 8003238:	4618      	mov	r0, r3
 800323a:	3714      	adds	r7, #20
 800323c:	46bd      	mov	sp, r7
 800323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003242:	4770      	bx	lr

08003244 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003244:	b480      	push	{r7}
 8003246:	b095      	sub	sp, #84	; 0x54
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	330c      	adds	r3, #12
 8003252:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003254:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003256:	e853 3f00 	ldrex	r3, [r3]
 800325a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800325c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800325e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003262:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	330c      	adds	r3, #12
 800326a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800326c:	643a      	str	r2, [r7, #64]	; 0x40
 800326e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003270:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003272:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003274:	e841 2300 	strex	r3, r2, [r1]
 8003278:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800327a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800327c:	2b00      	cmp	r3, #0
 800327e:	d1e5      	bne.n	800324c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	3314      	adds	r3, #20
 8003286:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003288:	6a3b      	ldr	r3, [r7, #32]
 800328a:	e853 3f00 	ldrex	r3, [r3]
 800328e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003290:	69fb      	ldr	r3, [r7, #28]
 8003292:	f023 0301 	bic.w	r3, r3, #1
 8003296:	64bb      	str	r3, [r7, #72]	; 0x48
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	3314      	adds	r3, #20
 800329e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80032a0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80032a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80032a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032a8:	e841 2300 	strex	r3, r2, [r1]
 80032ac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80032ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d1e5      	bne.n	8003280 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d119      	bne.n	80032f0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	330c      	adds	r3, #12
 80032c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	e853 3f00 	ldrex	r3, [r3]
 80032ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	f023 0310 	bic.w	r3, r3, #16
 80032d2:	647b      	str	r3, [r7, #68]	; 0x44
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	330c      	adds	r3, #12
 80032da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80032dc:	61ba      	str	r2, [r7, #24]
 80032de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032e0:	6979      	ldr	r1, [r7, #20]
 80032e2:	69ba      	ldr	r2, [r7, #24]
 80032e4:	e841 2300 	strex	r3, r2, [r1]
 80032e8:	613b      	str	r3, [r7, #16]
   return(result);
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d1e5      	bne.n	80032bc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2220      	movs	r2, #32
 80032f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2200      	movs	r2, #0
 80032fc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80032fe:	bf00      	nop
 8003300:	3754      	adds	r7, #84	; 0x54
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr

0800330a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800330a:	b580      	push	{r7, lr}
 800330c:	b084      	sub	sp, #16
 800330e:	af00      	add	r7, sp, #0
 8003310:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003316:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2200      	movs	r2, #0
 800331c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2200      	movs	r2, #0
 8003322:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003324:	68f8      	ldr	r0, [r7, #12]
 8003326:	f7ff ff3d 	bl	80031a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800332a:	bf00      	nop
 800332c:	3710      	adds	r7, #16
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}

08003332 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003332:	b480      	push	{r7}
 8003334:	b085      	sub	sp, #20
 8003336:	af00      	add	r7, sp, #0
 8003338:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003340:	b2db      	uxtb	r3, r3
 8003342:	2b21      	cmp	r3, #33	; 0x21
 8003344:	d13e      	bne.n	80033c4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800334e:	d114      	bne.n	800337a <UART_Transmit_IT+0x48>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	691b      	ldr	r3, [r3, #16]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d110      	bne.n	800337a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6a1b      	ldr	r3, [r3, #32]
 800335c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	881b      	ldrh	r3, [r3, #0]
 8003362:	461a      	mov	r2, r3
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800336c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6a1b      	ldr	r3, [r3, #32]
 8003372:	1c9a      	adds	r2, r3, #2
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	621a      	str	r2, [r3, #32]
 8003378:	e008      	b.n	800338c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6a1b      	ldr	r3, [r3, #32]
 800337e:	1c59      	adds	r1, r3, #1
 8003380:	687a      	ldr	r2, [r7, #4]
 8003382:	6211      	str	r1, [r2, #32]
 8003384:	781a      	ldrb	r2, [r3, #0]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003390:	b29b      	uxth	r3, r3
 8003392:	3b01      	subs	r3, #1
 8003394:	b29b      	uxth	r3, r3
 8003396:	687a      	ldr	r2, [r7, #4]
 8003398:	4619      	mov	r1, r3
 800339a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800339c:	2b00      	cmp	r3, #0
 800339e:	d10f      	bne.n	80033c0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	68da      	ldr	r2, [r3, #12]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80033ae:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	68da      	ldr	r2, [r3, #12]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80033be:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80033c0:	2300      	movs	r3, #0
 80033c2:	e000      	b.n	80033c6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80033c4:	2302      	movs	r3, #2
  }
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3714      	adds	r7, #20
 80033ca:	46bd      	mov	sp, r7
 80033cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d0:	4770      	bx	lr

080033d2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80033d2:	b580      	push	{r7, lr}
 80033d4:	b082      	sub	sp, #8
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	68da      	ldr	r2, [r3, #12]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033e8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2220      	movs	r2, #32
 80033ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f7ff fec2 	bl	800317c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80033f8:	2300      	movs	r3, #0
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3708      	adds	r7, #8
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}

08003402 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003402:	b580      	push	{r7, lr}
 8003404:	b08c      	sub	sp, #48	; 0x30
 8003406:	af00      	add	r7, sp, #0
 8003408:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003410:	b2db      	uxtb	r3, r3
 8003412:	2b22      	cmp	r3, #34	; 0x22
 8003414:	f040 80ab 	bne.w	800356e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003420:	d117      	bne.n	8003452 <UART_Receive_IT+0x50>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	691b      	ldr	r3, [r3, #16]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d113      	bne.n	8003452 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800342a:	2300      	movs	r3, #0
 800342c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003432:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	b29b      	uxth	r3, r3
 800343c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003440:	b29a      	uxth	r2, r3
 8003442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003444:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800344a:	1c9a      	adds	r2, r3, #2
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	629a      	str	r2, [r3, #40]	; 0x28
 8003450:	e026      	b.n	80034a0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003456:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003458:	2300      	movs	r3, #0
 800345a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003464:	d007      	beq.n	8003476 <UART_Receive_IT+0x74>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d10a      	bne.n	8003484 <UART_Receive_IT+0x82>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	691b      	ldr	r3, [r3, #16]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d106      	bne.n	8003484 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	b2da      	uxtb	r2, r3
 800347e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003480:	701a      	strb	r2, [r3, #0]
 8003482:	e008      	b.n	8003496 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	b2db      	uxtb	r3, r3
 800348c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003490:	b2da      	uxtb	r2, r3
 8003492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003494:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800349a:	1c5a      	adds	r2, r3, #1
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80034a4:	b29b      	uxth	r3, r3
 80034a6:	3b01      	subs	r3, #1
 80034a8:	b29b      	uxth	r3, r3
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	4619      	mov	r1, r3
 80034ae:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d15a      	bne.n	800356a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	68da      	ldr	r2, [r3, #12]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f022 0220 	bic.w	r2, r2, #32
 80034c2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	68da      	ldr	r2, [r3, #12]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80034d2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	695a      	ldr	r2, [r3, #20]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f022 0201 	bic.w	r2, r2, #1
 80034e2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2220      	movs	r2, #32
 80034e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d135      	bne.n	8003560 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2200      	movs	r2, #0
 80034f8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	330c      	adds	r3, #12
 8003500:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	e853 3f00 	ldrex	r3, [r3]
 8003508:	613b      	str	r3, [r7, #16]
   return(result);
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	f023 0310 	bic.w	r3, r3, #16
 8003510:	627b      	str	r3, [r7, #36]	; 0x24
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	330c      	adds	r3, #12
 8003518:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800351a:	623a      	str	r2, [r7, #32]
 800351c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800351e:	69f9      	ldr	r1, [r7, #28]
 8003520:	6a3a      	ldr	r2, [r7, #32]
 8003522:	e841 2300 	strex	r3, r2, [r1]
 8003526:	61bb      	str	r3, [r7, #24]
   return(result);
 8003528:	69bb      	ldr	r3, [r7, #24]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d1e5      	bne.n	80034fa <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f003 0310 	and.w	r3, r3, #16
 8003538:	2b10      	cmp	r3, #16
 800353a:	d10a      	bne.n	8003552 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800353c:	2300      	movs	r3, #0
 800353e:	60fb      	str	r3, [r7, #12]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	60fb      	str	r3, [r7, #12]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	60fb      	str	r3, [r7, #12]
 8003550:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003556:	4619      	mov	r1, r3
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	f7ff fe2d 	bl	80031b8 <HAL_UARTEx_RxEventCallback>
 800355e:	e002      	b.n	8003566 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003560:	6878      	ldr	r0, [r7, #4]
 8003562:	f7ff fe15 	bl	8003190 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003566:	2300      	movs	r3, #0
 8003568:	e002      	b.n	8003570 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800356a:	2300      	movs	r3, #0
 800356c:	e000      	b.n	8003570 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800356e:	2302      	movs	r3, #2
  }
}
 8003570:	4618      	mov	r0, r3
 8003572:	3730      	adds	r7, #48	; 0x30
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}

08003578 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800357c:	b09f      	sub	sp, #124	; 0x7c
 800357e:	af00      	add	r7, sp, #0
 8003580:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003582:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	691b      	ldr	r3, [r3, #16]
 8003588:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800358c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800358e:	68d9      	ldr	r1, [r3, #12]
 8003590:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	ea40 0301 	orr.w	r3, r0, r1
 8003598:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800359a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800359c:	689a      	ldr	r2, [r3, #8]
 800359e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035a0:	691b      	ldr	r3, [r3, #16]
 80035a2:	431a      	orrs	r2, r3
 80035a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035a6:	695b      	ldr	r3, [r3, #20]
 80035a8:	431a      	orrs	r2, r3
 80035aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035ac:	69db      	ldr	r3, [r3, #28]
 80035ae:	4313      	orrs	r3, r2
 80035b0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80035b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80035bc:	f021 010c 	bic.w	r1, r1, #12
 80035c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80035c6:	430b      	orrs	r3, r1
 80035c8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80035ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	695b      	ldr	r3, [r3, #20]
 80035d0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80035d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035d6:	6999      	ldr	r1, [r3, #24]
 80035d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	ea40 0301 	orr.w	r3, r0, r1
 80035e0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80035e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	4bc5      	ldr	r3, [pc, #788]	; (80038fc <UART_SetConfig+0x384>)
 80035e8:	429a      	cmp	r2, r3
 80035ea:	d004      	beq.n	80035f6 <UART_SetConfig+0x7e>
 80035ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	4bc3      	ldr	r3, [pc, #780]	; (8003900 <UART_SetConfig+0x388>)
 80035f2:	429a      	cmp	r2, r3
 80035f4:	d103      	bne.n	80035fe <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80035f6:	f7fe fdd5 	bl	80021a4 <HAL_RCC_GetPCLK2Freq>
 80035fa:	6778      	str	r0, [r7, #116]	; 0x74
 80035fc:	e002      	b.n	8003604 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80035fe:	f7fe fdbd 	bl	800217c <HAL_RCC_GetPCLK1Freq>
 8003602:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003604:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003606:	69db      	ldr	r3, [r3, #28]
 8003608:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800360c:	f040 80b6 	bne.w	800377c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003610:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003612:	461c      	mov	r4, r3
 8003614:	f04f 0500 	mov.w	r5, #0
 8003618:	4622      	mov	r2, r4
 800361a:	462b      	mov	r3, r5
 800361c:	1891      	adds	r1, r2, r2
 800361e:	6439      	str	r1, [r7, #64]	; 0x40
 8003620:	415b      	adcs	r3, r3
 8003622:	647b      	str	r3, [r7, #68]	; 0x44
 8003624:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003628:	1912      	adds	r2, r2, r4
 800362a:	eb45 0303 	adc.w	r3, r5, r3
 800362e:	f04f 0000 	mov.w	r0, #0
 8003632:	f04f 0100 	mov.w	r1, #0
 8003636:	00d9      	lsls	r1, r3, #3
 8003638:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800363c:	00d0      	lsls	r0, r2, #3
 800363e:	4602      	mov	r2, r0
 8003640:	460b      	mov	r3, r1
 8003642:	1911      	adds	r1, r2, r4
 8003644:	6639      	str	r1, [r7, #96]	; 0x60
 8003646:	416b      	adcs	r3, r5
 8003648:	667b      	str	r3, [r7, #100]	; 0x64
 800364a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	461a      	mov	r2, r3
 8003650:	f04f 0300 	mov.w	r3, #0
 8003654:	1891      	adds	r1, r2, r2
 8003656:	63b9      	str	r1, [r7, #56]	; 0x38
 8003658:	415b      	adcs	r3, r3
 800365a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800365c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003660:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003664:	f7fc fdb0 	bl	80001c8 <__aeabi_uldivmod>
 8003668:	4602      	mov	r2, r0
 800366a:	460b      	mov	r3, r1
 800366c:	4ba5      	ldr	r3, [pc, #660]	; (8003904 <UART_SetConfig+0x38c>)
 800366e:	fba3 2302 	umull	r2, r3, r3, r2
 8003672:	095b      	lsrs	r3, r3, #5
 8003674:	011e      	lsls	r6, r3, #4
 8003676:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003678:	461c      	mov	r4, r3
 800367a:	f04f 0500 	mov.w	r5, #0
 800367e:	4622      	mov	r2, r4
 8003680:	462b      	mov	r3, r5
 8003682:	1891      	adds	r1, r2, r2
 8003684:	6339      	str	r1, [r7, #48]	; 0x30
 8003686:	415b      	adcs	r3, r3
 8003688:	637b      	str	r3, [r7, #52]	; 0x34
 800368a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800368e:	1912      	adds	r2, r2, r4
 8003690:	eb45 0303 	adc.w	r3, r5, r3
 8003694:	f04f 0000 	mov.w	r0, #0
 8003698:	f04f 0100 	mov.w	r1, #0
 800369c:	00d9      	lsls	r1, r3, #3
 800369e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80036a2:	00d0      	lsls	r0, r2, #3
 80036a4:	4602      	mov	r2, r0
 80036a6:	460b      	mov	r3, r1
 80036a8:	1911      	adds	r1, r2, r4
 80036aa:	65b9      	str	r1, [r7, #88]	; 0x58
 80036ac:	416b      	adcs	r3, r5
 80036ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 80036b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	461a      	mov	r2, r3
 80036b6:	f04f 0300 	mov.w	r3, #0
 80036ba:	1891      	adds	r1, r2, r2
 80036bc:	62b9      	str	r1, [r7, #40]	; 0x28
 80036be:	415b      	adcs	r3, r3
 80036c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036c2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80036c6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80036ca:	f7fc fd7d 	bl	80001c8 <__aeabi_uldivmod>
 80036ce:	4602      	mov	r2, r0
 80036d0:	460b      	mov	r3, r1
 80036d2:	4b8c      	ldr	r3, [pc, #560]	; (8003904 <UART_SetConfig+0x38c>)
 80036d4:	fba3 1302 	umull	r1, r3, r3, r2
 80036d8:	095b      	lsrs	r3, r3, #5
 80036da:	2164      	movs	r1, #100	; 0x64
 80036dc:	fb01 f303 	mul.w	r3, r1, r3
 80036e0:	1ad3      	subs	r3, r2, r3
 80036e2:	00db      	lsls	r3, r3, #3
 80036e4:	3332      	adds	r3, #50	; 0x32
 80036e6:	4a87      	ldr	r2, [pc, #540]	; (8003904 <UART_SetConfig+0x38c>)
 80036e8:	fba2 2303 	umull	r2, r3, r2, r3
 80036ec:	095b      	lsrs	r3, r3, #5
 80036ee:	005b      	lsls	r3, r3, #1
 80036f0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80036f4:	441e      	add	r6, r3
 80036f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036f8:	4618      	mov	r0, r3
 80036fa:	f04f 0100 	mov.w	r1, #0
 80036fe:	4602      	mov	r2, r0
 8003700:	460b      	mov	r3, r1
 8003702:	1894      	adds	r4, r2, r2
 8003704:	623c      	str	r4, [r7, #32]
 8003706:	415b      	adcs	r3, r3
 8003708:	627b      	str	r3, [r7, #36]	; 0x24
 800370a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800370e:	1812      	adds	r2, r2, r0
 8003710:	eb41 0303 	adc.w	r3, r1, r3
 8003714:	f04f 0400 	mov.w	r4, #0
 8003718:	f04f 0500 	mov.w	r5, #0
 800371c:	00dd      	lsls	r5, r3, #3
 800371e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003722:	00d4      	lsls	r4, r2, #3
 8003724:	4622      	mov	r2, r4
 8003726:	462b      	mov	r3, r5
 8003728:	1814      	adds	r4, r2, r0
 800372a:	653c      	str	r4, [r7, #80]	; 0x50
 800372c:	414b      	adcs	r3, r1
 800372e:	657b      	str	r3, [r7, #84]	; 0x54
 8003730:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	461a      	mov	r2, r3
 8003736:	f04f 0300 	mov.w	r3, #0
 800373a:	1891      	adds	r1, r2, r2
 800373c:	61b9      	str	r1, [r7, #24]
 800373e:	415b      	adcs	r3, r3
 8003740:	61fb      	str	r3, [r7, #28]
 8003742:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003746:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800374a:	f7fc fd3d 	bl	80001c8 <__aeabi_uldivmod>
 800374e:	4602      	mov	r2, r0
 8003750:	460b      	mov	r3, r1
 8003752:	4b6c      	ldr	r3, [pc, #432]	; (8003904 <UART_SetConfig+0x38c>)
 8003754:	fba3 1302 	umull	r1, r3, r3, r2
 8003758:	095b      	lsrs	r3, r3, #5
 800375a:	2164      	movs	r1, #100	; 0x64
 800375c:	fb01 f303 	mul.w	r3, r1, r3
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	00db      	lsls	r3, r3, #3
 8003764:	3332      	adds	r3, #50	; 0x32
 8003766:	4a67      	ldr	r2, [pc, #412]	; (8003904 <UART_SetConfig+0x38c>)
 8003768:	fba2 2303 	umull	r2, r3, r2, r3
 800376c:	095b      	lsrs	r3, r3, #5
 800376e:	f003 0207 	and.w	r2, r3, #7
 8003772:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4432      	add	r2, r6
 8003778:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800377a:	e0b9      	b.n	80038f0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800377c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800377e:	461c      	mov	r4, r3
 8003780:	f04f 0500 	mov.w	r5, #0
 8003784:	4622      	mov	r2, r4
 8003786:	462b      	mov	r3, r5
 8003788:	1891      	adds	r1, r2, r2
 800378a:	6139      	str	r1, [r7, #16]
 800378c:	415b      	adcs	r3, r3
 800378e:	617b      	str	r3, [r7, #20]
 8003790:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003794:	1912      	adds	r2, r2, r4
 8003796:	eb45 0303 	adc.w	r3, r5, r3
 800379a:	f04f 0000 	mov.w	r0, #0
 800379e:	f04f 0100 	mov.w	r1, #0
 80037a2:	00d9      	lsls	r1, r3, #3
 80037a4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80037a8:	00d0      	lsls	r0, r2, #3
 80037aa:	4602      	mov	r2, r0
 80037ac:	460b      	mov	r3, r1
 80037ae:	eb12 0804 	adds.w	r8, r2, r4
 80037b2:	eb43 0905 	adc.w	r9, r3, r5
 80037b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	4618      	mov	r0, r3
 80037bc:	f04f 0100 	mov.w	r1, #0
 80037c0:	f04f 0200 	mov.w	r2, #0
 80037c4:	f04f 0300 	mov.w	r3, #0
 80037c8:	008b      	lsls	r3, r1, #2
 80037ca:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80037ce:	0082      	lsls	r2, r0, #2
 80037d0:	4640      	mov	r0, r8
 80037d2:	4649      	mov	r1, r9
 80037d4:	f7fc fcf8 	bl	80001c8 <__aeabi_uldivmod>
 80037d8:	4602      	mov	r2, r0
 80037da:	460b      	mov	r3, r1
 80037dc:	4b49      	ldr	r3, [pc, #292]	; (8003904 <UART_SetConfig+0x38c>)
 80037de:	fba3 2302 	umull	r2, r3, r3, r2
 80037e2:	095b      	lsrs	r3, r3, #5
 80037e4:	011e      	lsls	r6, r3, #4
 80037e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037e8:	4618      	mov	r0, r3
 80037ea:	f04f 0100 	mov.w	r1, #0
 80037ee:	4602      	mov	r2, r0
 80037f0:	460b      	mov	r3, r1
 80037f2:	1894      	adds	r4, r2, r2
 80037f4:	60bc      	str	r4, [r7, #8]
 80037f6:	415b      	adcs	r3, r3
 80037f8:	60fb      	str	r3, [r7, #12]
 80037fa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80037fe:	1812      	adds	r2, r2, r0
 8003800:	eb41 0303 	adc.w	r3, r1, r3
 8003804:	f04f 0400 	mov.w	r4, #0
 8003808:	f04f 0500 	mov.w	r5, #0
 800380c:	00dd      	lsls	r5, r3, #3
 800380e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003812:	00d4      	lsls	r4, r2, #3
 8003814:	4622      	mov	r2, r4
 8003816:	462b      	mov	r3, r5
 8003818:	1814      	adds	r4, r2, r0
 800381a:	64bc      	str	r4, [r7, #72]	; 0x48
 800381c:	414b      	adcs	r3, r1
 800381e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003820:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	4618      	mov	r0, r3
 8003826:	f04f 0100 	mov.w	r1, #0
 800382a:	f04f 0200 	mov.w	r2, #0
 800382e:	f04f 0300 	mov.w	r3, #0
 8003832:	008b      	lsls	r3, r1, #2
 8003834:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003838:	0082      	lsls	r2, r0, #2
 800383a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800383e:	f7fc fcc3 	bl	80001c8 <__aeabi_uldivmod>
 8003842:	4602      	mov	r2, r0
 8003844:	460b      	mov	r3, r1
 8003846:	4b2f      	ldr	r3, [pc, #188]	; (8003904 <UART_SetConfig+0x38c>)
 8003848:	fba3 1302 	umull	r1, r3, r3, r2
 800384c:	095b      	lsrs	r3, r3, #5
 800384e:	2164      	movs	r1, #100	; 0x64
 8003850:	fb01 f303 	mul.w	r3, r1, r3
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	011b      	lsls	r3, r3, #4
 8003858:	3332      	adds	r3, #50	; 0x32
 800385a:	4a2a      	ldr	r2, [pc, #168]	; (8003904 <UART_SetConfig+0x38c>)
 800385c:	fba2 2303 	umull	r2, r3, r2, r3
 8003860:	095b      	lsrs	r3, r3, #5
 8003862:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003866:	441e      	add	r6, r3
 8003868:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800386a:	4618      	mov	r0, r3
 800386c:	f04f 0100 	mov.w	r1, #0
 8003870:	4602      	mov	r2, r0
 8003872:	460b      	mov	r3, r1
 8003874:	1894      	adds	r4, r2, r2
 8003876:	603c      	str	r4, [r7, #0]
 8003878:	415b      	adcs	r3, r3
 800387a:	607b      	str	r3, [r7, #4]
 800387c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003880:	1812      	adds	r2, r2, r0
 8003882:	eb41 0303 	adc.w	r3, r1, r3
 8003886:	f04f 0400 	mov.w	r4, #0
 800388a:	f04f 0500 	mov.w	r5, #0
 800388e:	00dd      	lsls	r5, r3, #3
 8003890:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003894:	00d4      	lsls	r4, r2, #3
 8003896:	4622      	mov	r2, r4
 8003898:	462b      	mov	r3, r5
 800389a:	eb12 0a00 	adds.w	sl, r2, r0
 800389e:	eb43 0b01 	adc.w	fp, r3, r1
 80038a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	4618      	mov	r0, r3
 80038a8:	f04f 0100 	mov.w	r1, #0
 80038ac:	f04f 0200 	mov.w	r2, #0
 80038b0:	f04f 0300 	mov.w	r3, #0
 80038b4:	008b      	lsls	r3, r1, #2
 80038b6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80038ba:	0082      	lsls	r2, r0, #2
 80038bc:	4650      	mov	r0, sl
 80038be:	4659      	mov	r1, fp
 80038c0:	f7fc fc82 	bl	80001c8 <__aeabi_uldivmod>
 80038c4:	4602      	mov	r2, r0
 80038c6:	460b      	mov	r3, r1
 80038c8:	4b0e      	ldr	r3, [pc, #56]	; (8003904 <UART_SetConfig+0x38c>)
 80038ca:	fba3 1302 	umull	r1, r3, r3, r2
 80038ce:	095b      	lsrs	r3, r3, #5
 80038d0:	2164      	movs	r1, #100	; 0x64
 80038d2:	fb01 f303 	mul.w	r3, r1, r3
 80038d6:	1ad3      	subs	r3, r2, r3
 80038d8:	011b      	lsls	r3, r3, #4
 80038da:	3332      	adds	r3, #50	; 0x32
 80038dc:	4a09      	ldr	r2, [pc, #36]	; (8003904 <UART_SetConfig+0x38c>)
 80038de:	fba2 2303 	umull	r2, r3, r2, r3
 80038e2:	095b      	lsrs	r3, r3, #5
 80038e4:	f003 020f 	and.w	r2, r3, #15
 80038e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4432      	add	r2, r6
 80038ee:	609a      	str	r2, [r3, #8]
}
 80038f0:	bf00      	nop
 80038f2:	377c      	adds	r7, #124	; 0x7c
 80038f4:	46bd      	mov	sp, r7
 80038f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80038fa:	bf00      	nop
 80038fc:	40011000 	.word	0x40011000
 8003900:	40011400 	.word	0x40011400
 8003904:	51eb851f 	.word	0x51eb851f

08003908 <atoi>:
 8003908:	220a      	movs	r2, #10
 800390a:	2100      	movs	r1, #0
 800390c:	f000 b8b6 	b.w	8003a7c <strtol>

08003910 <__errno>:
 8003910:	4b01      	ldr	r3, [pc, #4]	; (8003918 <__errno+0x8>)
 8003912:	6818      	ldr	r0, [r3, #0]
 8003914:	4770      	bx	lr
 8003916:	bf00      	nop
 8003918:	2000000c 	.word	0x2000000c

0800391c <__libc_init_array>:
 800391c:	b570      	push	{r4, r5, r6, lr}
 800391e:	4d0d      	ldr	r5, [pc, #52]	; (8003954 <__libc_init_array+0x38>)
 8003920:	4c0d      	ldr	r4, [pc, #52]	; (8003958 <__libc_init_array+0x3c>)
 8003922:	1b64      	subs	r4, r4, r5
 8003924:	10a4      	asrs	r4, r4, #2
 8003926:	2600      	movs	r6, #0
 8003928:	42a6      	cmp	r6, r4
 800392a:	d109      	bne.n	8003940 <__libc_init_array+0x24>
 800392c:	4d0b      	ldr	r5, [pc, #44]	; (800395c <__libc_init_array+0x40>)
 800392e:	4c0c      	ldr	r4, [pc, #48]	; (8003960 <__libc_init_array+0x44>)
 8003930:	f000 f8ae 	bl	8003a90 <_init>
 8003934:	1b64      	subs	r4, r4, r5
 8003936:	10a4      	asrs	r4, r4, #2
 8003938:	2600      	movs	r6, #0
 800393a:	42a6      	cmp	r6, r4
 800393c:	d105      	bne.n	800394a <__libc_init_array+0x2e>
 800393e:	bd70      	pop	{r4, r5, r6, pc}
 8003940:	f855 3b04 	ldr.w	r3, [r5], #4
 8003944:	4798      	blx	r3
 8003946:	3601      	adds	r6, #1
 8003948:	e7ee      	b.n	8003928 <__libc_init_array+0xc>
 800394a:	f855 3b04 	ldr.w	r3, [r5], #4
 800394e:	4798      	blx	r3
 8003950:	3601      	adds	r6, #1
 8003952:	e7f2      	b.n	800393a <__libc_init_array+0x1e>
 8003954:	08003bcc 	.word	0x08003bcc
 8003958:	08003bcc 	.word	0x08003bcc
 800395c:	08003bcc 	.word	0x08003bcc
 8003960:	08003bd0 	.word	0x08003bd0

08003964 <memset>:
 8003964:	4402      	add	r2, r0
 8003966:	4603      	mov	r3, r0
 8003968:	4293      	cmp	r3, r2
 800396a:	d100      	bne.n	800396e <memset+0xa>
 800396c:	4770      	bx	lr
 800396e:	f803 1b01 	strb.w	r1, [r3], #1
 8003972:	e7f9      	b.n	8003968 <memset+0x4>

08003974 <_strtol_l.isra.0>:
 8003974:	2b01      	cmp	r3, #1
 8003976:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800397a:	d001      	beq.n	8003980 <_strtol_l.isra.0+0xc>
 800397c:	2b24      	cmp	r3, #36	; 0x24
 800397e:	d906      	bls.n	800398e <_strtol_l.isra.0+0x1a>
 8003980:	f7ff ffc6 	bl	8003910 <__errno>
 8003984:	2316      	movs	r3, #22
 8003986:	6003      	str	r3, [r0, #0]
 8003988:	2000      	movs	r0, #0
 800398a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800398e:	4f3a      	ldr	r7, [pc, #232]	; (8003a78 <_strtol_l.isra.0+0x104>)
 8003990:	468e      	mov	lr, r1
 8003992:	4676      	mov	r6, lr
 8003994:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8003998:	5de5      	ldrb	r5, [r4, r7]
 800399a:	f015 0508 	ands.w	r5, r5, #8
 800399e:	d1f8      	bne.n	8003992 <_strtol_l.isra.0+0x1e>
 80039a0:	2c2d      	cmp	r4, #45	; 0x2d
 80039a2:	d134      	bne.n	8003a0e <_strtol_l.isra.0+0x9a>
 80039a4:	f89e 4000 	ldrb.w	r4, [lr]
 80039a8:	f04f 0801 	mov.w	r8, #1
 80039ac:	f106 0e02 	add.w	lr, r6, #2
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d05c      	beq.n	8003a6e <_strtol_l.isra.0+0xfa>
 80039b4:	2b10      	cmp	r3, #16
 80039b6:	d10c      	bne.n	80039d2 <_strtol_l.isra.0+0x5e>
 80039b8:	2c30      	cmp	r4, #48	; 0x30
 80039ba:	d10a      	bne.n	80039d2 <_strtol_l.isra.0+0x5e>
 80039bc:	f89e 4000 	ldrb.w	r4, [lr]
 80039c0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80039c4:	2c58      	cmp	r4, #88	; 0x58
 80039c6:	d14d      	bne.n	8003a64 <_strtol_l.isra.0+0xf0>
 80039c8:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80039cc:	2310      	movs	r3, #16
 80039ce:	f10e 0e02 	add.w	lr, lr, #2
 80039d2:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80039d6:	f10c 3cff 	add.w	ip, ip, #4294967295
 80039da:	2600      	movs	r6, #0
 80039dc:	fbbc f9f3 	udiv	r9, ip, r3
 80039e0:	4635      	mov	r5, r6
 80039e2:	fb03 ca19 	mls	sl, r3, r9, ip
 80039e6:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80039ea:	2f09      	cmp	r7, #9
 80039ec:	d818      	bhi.n	8003a20 <_strtol_l.isra.0+0xac>
 80039ee:	463c      	mov	r4, r7
 80039f0:	42a3      	cmp	r3, r4
 80039f2:	dd24      	ble.n	8003a3e <_strtol_l.isra.0+0xca>
 80039f4:	2e00      	cmp	r6, #0
 80039f6:	db1f      	blt.n	8003a38 <_strtol_l.isra.0+0xc4>
 80039f8:	45a9      	cmp	r9, r5
 80039fa:	d31d      	bcc.n	8003a38 <_strtol_l.isra.0+0xc4>
 80039fc:	d101      	bne.n	8003a02 <_strtol_l.isra.0+0x8e>
 80039fe:	45a2      	cmp	sl, r4
 8003a00:	db1a      	blt.n	8003a38 <_strtol_l.isra.0+0xc4>
 8003a02:	fb05 4503 	mla	r5, r5, r3, r4
 8003a06:	2601      	movs	r6, #1
 8003a08:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8003a0c:	e7eb      	b.n	80039e6 <_strtol_l.isra.0+0x72>
 8003a0e:	2c2b      	cmp	r4, #43	; 0x2b
 8003a10:	bf08      	it	eq
 8003a12:	f89e 4000 	ldrbeq.w	r4, [lr]
 8003a16:	46a8      	mov	r8, r5
 8003a18:	bf08      	it	eq
 8003a1a:	f106 0e02 	addeq.w	lr, r6, #2
 8003a1e:	e7c7      	b.n	80039b0 <_strtol_l.isra.0+0x3c>
 8003a20:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8003a24:	2f19      	cmp	r7, #25
 8003a26:	d801      	bhi.n	8003a2c <_strtol_l.isra.0+0xb8>
 8003a28:	3c37      	subs	r4, #55	; 0x37
 8003a2a:	e7e1      	b.n	80039f0 <_strtol_l.isra.0+0x7c>
 8003a2c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8003a30:	2f19      	cmp	r7, #25
 8003a32:	d804      	bhi.n	8003a3e <_strtol_l.isra.0+0xca>
 8003a34:	3c57      	subs	r4, #87	; 0x57
 8003a36:	e7db      	b.n	80039f0 <_strtol_l.isra.0+0x7c>
 8003a38:	f04f 36ff 	mov.w	r6, #4294967295
 8003a3c:	e7e4      	b.n	8003a08 <_strtol_l.isra.0+0x94>
 8003a3e:	2e00      	cmp	r6, #0
 8003a40:	da05      	bge.n	8003a4e <_strtol_l.isra.0+0xda>
 8003a42:	2322      	movs	r3, #34	; 0x22
 8003a44:	6003      	str	r3, [r0, #0]
 8003a46:	4665      	mov	r5, ip
 8003a48:	b942      	cbnz	r2, 8003a5c <_strtol_l.isra.0+0xe8>
 8003a4a:	4628      	mov	r0, r5
 8003a4c:	e79d      	b.n	800398a <_strtol_l.isra.0+0x16>
 8003a4e:	f1b8 0f00 	cmp.w	r8, #0
 8003a52:	d000      	beq.n	8003a56 <_strtol_l.isra.0+0xe2>
 8003a54:	426d      	negs	r5, r5
 8003a56:	2a00      	cmp	r2, #0
 8003a58:	d0f7      	beq.n	8003a4a <_strtol_l.isra.0+0xd6>
 8003a5a:	b10e      	cbz	r6, 8003a60 <_strtol_l.isra.0+0xec>
 8003a5c:	f10e 31ff 	add.w	r1, lr, #4294967295
 8003a60:	6011      	str	r1, [r2, #0]
 8003a62:	e7f2      	b.n	8003a4a <_strtol_l.isra.0+0xd6>
 8003a64:	2430      	movs	r4, #48	; 0x30
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d1b3      	bne.n	80039d2 <_strtol_l.isra.0+0x5e>
 8003a6a:	2308      	movs	r3, #8
 8003a6c:	e7b1      	b.n	80039d2 <_strtol_l.isra.0+0x5e>
 8003a6e:	2c30      	cmp	r4, #48	; 0x30
 8003a70:	d0a4      	beq.n	80039bc <_strtol_l.isra.0+0x48>
 8003a72:	230a      	movs	r3, #10
 8003a74:	e7ad      	b.n	80039d2 <_strtol_l.isra.0+0x5e>
 8003a76:	bf00      	nop
 8003a78:	08003ac1 	.word	0x08003ac1

08003a7c <strtol>:
 8003a7c:	4613      	mov	r3, r2
 8003a7e:	460a      	mov	r2, r1
 8003a80:	4601      	mov	r1, r0
 8003a82:	4802      	ldr	r0, [pc, #8]	; (8003a8c <strtol+0x10>)
 8003a84:	6800      	ldr	r0, [r0, #0]
 8003a86:	f7ff bf75 	b.w	8003974 <_strtol_l.isra.0>
 8003a8a:	bf00      	nop
 8003a8c:	2000000c 	.word	0x2000000c

08003a90 <_init>:
 8003a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a92:	bf00      	nop
 8003a94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a96:	bc08      	pop	{r3}
 8003a98:	469e      	mov	lr, r3
 8003a9a:	4770      	bx	lr

08003a9c <_fini>:
 8003a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a9e:	bf00      	nop
 8003aa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003aa2:	bc08      	pop	{r3}
 8003aa4:	469e      	mov	lr, r3
 8003aa6:	4770      	bx	lr
