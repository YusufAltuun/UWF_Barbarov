
HAL_LIB_Barbarov_Finalv3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c50  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  08003dd8  08003dd8  00013dd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ef4  08003ef4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003ef4  08003ef4  00013ef4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003efc  08003efc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003efc  08003efc  00013efc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003f00  08003f00  00013f00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003f04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000108  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000178  20000178  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000dead  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b31  00000000  00000000  0002df4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c70  00000000  00000000  0002fa80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000bd8  00000000  00000000  000306f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002098d  00000000  00000000  000312c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000dd60  00000000  00000000  00051c55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ca062  00000000  00000000  0005f9b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00129a17  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000350c  00000000  00000000  00129a6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003dc0 	.word	0x08003dc0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	08003dc0 	.word	0x08003dc0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <dur1>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void dur1(){
 80004c0:	b480      	push	{r7}
 80004c2:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 1500);
 80004c4:	4b11      	ldr	r3, [pc, #68]	; (800050c <dur1+0x4c>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80004cc:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 1500);
 80004ce:	4b0f      	ldr	r3, [pc, #60]	; (800050c <dur1+0x4c>)
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80004d6:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 1500);
 80004d8:	4b0c      	ldr	r3, [pc, #48]	; (800050c <dur1+0x4c>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80004e0:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 1500);
 80004e2:	4b0a      	ldr	r3, [pc, #40]	; (800050c <dur1+0x4c>)
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80004ea:	641a      	str	r2, [r3, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 1500);
 80004ec:	4b08      	ldr	r3, [pc, #32]	; (8000510 <dur1+0x50>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80004f4:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 1500);
 80004f6:	4b06      	ldr	r3, [pc, #24]	; (8000510 <dur1+0x50>)
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80004fe:	639a      	str	r2, [r3, #56]	; 0x38
	}
 8000500:	bf00      	nop
 8000502:	46bd      	mov	sp, r7
 8000504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop
 800050c:	200000d4 	.word	0x200000d4
 8000510:	2000008c 	.word	0x2000008c

08000514 <ilr1>:
void ilr1(){
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
	donusum = atoi(gelen);
 8000518:	481b      	ldr	r0, [pc, #108]	; (8000588 <ilr1+0x74>)
 800051a:	f003 fb8d 	bl	8003c38 <atoi>
 800051e:	4603      	mov	r3, r0
 8000520:	4a1a      	ldr	r2, [pc, #104]	; (800058c <ilr1+0x78>)
 8000522:	6013      	str	r3, [r2, #0]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 1500-abs(1500-donusum));
 8000524:	4b19      	ldr	r3, [pc, #100]	; (800058c <ilr1+0x78>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	f5c3 63bb 	rsb	r3, r3, #1496	; 0x5d8
 800052c:	3304      	adds	r3, #4
 800052e:	2b00      	cmp	r3, #0
 8000530:	bfb8      	it	lt
 8000532:	425b      	neglt	r3, r3
 8000534:	f5c3 63bb 	rsb	r3, r3, #1496	; 0x5d8
 8000538:	3304      	adds	r3, #4
 800053a:	4a15      	ldr	r2, [pc, #84]	; (8000590 <ilr1+0x7c>)
 800053c:	6812      	ldr	r2, [r2, #0]
 800053e:	6353      	str	r3, [r2, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, donusum);
 8000540:	4b12      	ldr	r3, [pc, #72]	; (800058c <ilr1+0x78>)
 8000542:	681a      	ldr	r2, [r3, #0]
 8000544:	4b12      	ldr	r3, [pc, #72]	; (8000590 <ilr1+0x7c>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 1500-abs(1500-donusum));
 800054a:	4b10      	ldr	r3, [pc, #64]	; (800058c <ilr1+0x78>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	f5c3 63bb 	rsb	r3, r3, #1496	; 0x5d8
 8000552:	3304      	adds	r3, #4
 8000554:	2b00      	cmp	r3, #0
 8000556:	bfb8      	it	lt
 8000558:	425b      	neglt	r3, r3
 800055a:	f5c3 63bb 	rsb	r3, r3, #1496	; 0x5d8
 800055e:	3304      	adds	r3, #4
 8000560:	4a0b      	ldr	r2, [pc, #44]	; (8000590 <ilr1+0x7c>)
 8000562:	6812      	ldr	r2, [r2, #0]
 8000564:	63d3      	str	r3, [r2, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, donusum);
 8000566:	4b09      	ldr	r3, [pc, #36]	; (800058c <ilr1+0x78>)
 8000568:	681a      	ldr	r2, [r3, #0]
 800056a:	4b09      	ldr	r3, [pc, #36]	; (8000590 <ilr1+0x7c>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	641a      	str	r2, [r3, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 1500);
 8000570:	4b08      	ldr	r3, [pc, #32]	; (8000594 <ilr1+0x80>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000578:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 1500);
 800057a:	4b06      	ldr	r3, [pc, #24]	; (8000594 <ilr1+0x80>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000582:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000584:	bf00      	nop
 8000586:	bd80      	pop	{r7, pc}
 8000588:	20000120 	.word	0x20000120
 800058c:	20000170 	.word	0x20000170
 8000590:	200000d4 	.word	0x200000d4
 8000594:	2000008c 	.word	0x2000008c

08000598 <ger1>:
void ger1(){
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
	donusum = atoi(gelen);
 800059c:	481b      	ldr	r0, [pc, #108]	; (800060c <ger1+0x74>)
 800059e:	f003 fb4b 	bl	8003c38 <atoi>
 80005a2:	4603      	mov	r3, r0
 80005a4:	4a1a      	ldr	r2, [pc, #104]	; (8000610 <ger1+0x78>)
 80005a6:	6013      	str	r3, [r2, #0]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, donusum);
 80005a8:	4b19      	ldr	r3, [pc, #100]	; (8000610 <ger1+0x78>)
 80005aa:	681a      	ldr	r2, [r3, #0]
 80005ac:	4b19      	ldr	r3, [pc, #100]	; (8000614 <ger1+0x7c>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 1500-abs(1500-donusum));
 80005b2:	4b17      	ldr	r3, [pc, #92]	; (8000610 <ger1+0x78>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	f5c3 63bb 	rsb	r3, r3, #1496	; 0x5d8
 80005ba:	3304      	adds	r3, #4
 80005bc:	2b00      	cmp	r3, #0
 80005be:	bfb8      	it	lt
 80005c0:	425b      	neglt	r3, r3
 80005c2:	f5c3 63bb 	rsb	r3, r3, #1496	; 0x5d8
 80005c6:	3304      	adds	r3, #4
 80005c8:	4a12      	ldr	r2, [pc, #72]	; (8000614 <ger1+0x7c>)
 80005ca:	6812      	ldr	r2, [r2, #0]
 80005cc:	6393      	str	r3, [r2, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, donusum);
 80005ce:	4b10      	ldr	r3, [pc, #64]	; (8000610 <ger1+0x78>)
 80005d0:	681a      	ldr	r2, [r3, #0]
 80005d2:	4b10      	ldr	r3, [pc, #64]	; (8000614 <ger1+0x7c>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 1500-abs(1500-donusum));
 80005d8:	4b0d      	ldr	r3, [pc, #52]	; (8000610 <ger1+0x78>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	f5c3 63bb 	rsb	r3, r3, #1496	; 0x5d8
 80005e0:	3304      	adds	r3, #4
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	bfb8      	it	lt
 80005e6:	425b      	neglt	r3, r3
 80005e8:	f5c3 63bb 	rsb	r3, r3, #1496	; 0x5d8
 80005ec:	3304      	adds	r3, #4
 80005ee:	4a09      	ldr	r2, [pc, #36]	; (8000614 <ger1+0x7c>)
 80005f0:	6812      	ldr	r2, [r2, #0]
 80005f2:	6413      	str	r3, [r2, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 1500);
 80005f4:	4b08      	ldr	r3, [pc, #32]	; (8000618 <ger1+0x80>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80005fc:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 1500);
 80005fe:	4b06      	ldr	r3, [pc, #24]	; (8000618 <ger1+0x80>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000606:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000608:	bf00      	nop
 800060a:	bd80      	pop	{r7, pc}
 800060c:	20000120 	.word	0x20000120
 8000610:	20000170 	.word	0x20000170
 8000614:	200000d4 	.word	0x200000d4
 8000618:	2000008c 	.word	0x2000008c

0800061c <ykr1>:
void ykr1(){
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
	donusum = atoi(gelen);
 8000620:	481b      	ldr	r0, [pc, #108]	; (8000690 <ykr1+0x74>)
 8000622:	f003 fb09 	bl	8003c38 <atoi>
 8000626:	4603      	mov	r3, r0
 8000628:	4a1a      	ldr	r2, [pc, #104]	; (8000694 <ykr1+0x78>)
 800062a:	6013      	str	r3, [r2, #0]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 1500);
 800062c:	4b1a      	ldr	r3, [pc, #104]	; (8000698 <ykr1+0x7c>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000634:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 1500);
 8000636:	4b18      	ldr	r3, [pc, #96]	; (8000698 <ykr1+0x7c>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800063e:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 1500);
 8000640:	4b15      	ldr	r3, [pc, #84]	; (8000698 <ykr1+0x7c>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000648:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 1500);
 800064a:	4b13      	ldr	r3, [pc, #76]	; (8000698 <ykr1+0x7c>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000652:	641a      	str	r2, [r3, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 1500-abs(1500-donusum));
 8000654:	4b0f      	ldr	r3, [pc, #60]	; (8000694 <ykr1+0x78>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	f5c3 63bb 	rsb	r3, r3, #1496	; 0x5d8
 800065c:	3304      	adds	r3, #4
 800065e:	2b00      	cmp	r3, #0
 8000660:	bfb8      	it	lt
 8000662:	425b      	neglt	r3, r3
 8000664:	f5c3 63bb 	rsb	r3, r3, #1496	; 0x5d8
 8000668:	3304      	adds	r3, #4
 800066a:	4a0c      	ldr	r2, [pc, #48]	; (800069c <ykr1+0x80>)
 800066c:	6812      	ldr	r2, [r2, #0]
 800066e:	6353      	str	r3, [r2, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 1500-abs(1500-donusum));
 8000670:	4b08      	ldr	r3, [pc, #32]	; (8000694 <ykr1+0x78>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	f5c3 63bb 	rsb	r3, r3, #1496	; 0x5d8
 8000678:	3304      	adds	r3, #4
 800067a:	2b00      	cmp	r3, #0
 800067c:	bfb8      	it	lt
 800067e:	425b      	neglt	r3, r3
 8000680:	f5c3 63bb 	rsb	r3, r3, #1496	; 0x5d8
 8000684:	3304      	adds	r3, #4
 8000686:	4a05      	ldr	r2, [pc, #20]	; (800069c <ykr1+0x80>)
 8000688:	6812      	ldr	r2, [r2, #0]
 800068a:	6393      	str	r3, [r2, #56]	; 0x38
}
 800068c:	bf00      	nop
 800068e:	bd80      	pop	{r7, pc}
 8000690:	20000120 	.word	0x20000120
 8000694:	20000170 	.word	0x20000170
 8000698:	200000d4 	.word	0x200000d4
 800069c:	2000008c 	.word	0x2000008c

080006a0 <asg1>:
void asg1(){
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
	donusum = atoi(gelen);
 80006a4:	4812      	ldr	r0, [pc, #72]	; (80006f0 <asg1+0x50>)
 80006a6:	f003 fac7 	bl	8003c38 <atoi>
 80006aa:	4603      	mov	r3, r0
 80006ac:	4a11      	ldr	r2, [pc, #68]	; (80006f4 <asg1+0x54>)
 80006ae:	6013      	str	r3, [r2, #0]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 1500);
 80006b0:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <asg1+0x58>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80006b8:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 1500);
 80006ba:	4b0f      	ldr	r3, [pc, #60]	; (80006f8 <asg1+0x58>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80006c2:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 1500);
 80006c4:	4b0c      	ldr	r3, [pc, #48]	; (80006f8 <asg1+0x58>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80006cc:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 1500);
 80006ce:	4b0a      	ldr	r3, [pc, #40]	; (80006f8 <asg1+0x58>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80006d6:	641a      	str	r2, [r3, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, donusum);
 80006d8:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <asg1+0x54>)
 80006da:	681a      	ldr	r2, [r3, #0]
 80006dc:	4b07      	ldr	r3, [pc, #28]	; (80006fc <asg1+0x5c>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, donusum);
 80006e2:	4b04      	ldr	r3, [pc, #16]	; (80006f4 <asg1+0x54>)
 80006e4:	681a      	ldr	r2, [r3, #0]
 80006e6:	4b05      	ldr	r3, [pc, #20]	; (80006fc <asg1+0x5c>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	639a      	str	r2, [r3, #56]	; 0x38
}
 80006ec:	bf00      	nop
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	20000120 	.word	0x20000120
 80006f4:	20000170 	.word	0x20000170
 80006f8:	200000d4 	.word	0x200000d4
 80006fc:	2000008c 	.word	0x2000008c

08000700 <sag1>:
void sag1(){
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
	donusum = atoi(gelen);
 8000704:	481b      	ldr	r0, [pc, #108]	; (8000774 <sag1+0x74>)
 8000706:	f003 fa97 	bl	8003c38 <atoi>
 800070a:	4603      	mov	r3, r0
 800070c:	4a1a      	ldr	r2, [pc, #104]	; (8000778 <sag1+0x78>)
 800070e:	6013      	str	r3, [r2, #0]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, donusum);
 8000710:	4b19      	ldr	r3, [pc, #100]	; (8000778 <sag1+0x78>)
 8000712:	681a      	ldr	r2, [r3, #0]
 8000714:	4b19      	ldr	r3, [pc, #100]	; (800077c <sag1+0x7c>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, donusum);
 800071a:	4b17      	ldr	r3, [pc, #92]	; (8000778 <sag1+0x78>)
 800071c:	681a      	ldr	r2, [r3, #0]
 800071e:	4b17      	ldr	r3, [pc, #92]	; (800077c <sag1+0x7c>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 1500-abs(1500-donusum));
 8000724:	4b14      	ldr	r3, [pc, #80]	; (8000778 <sag1+0x78>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	f5c3 63bb 	rsb	r3, r3, #1496	; 0x5d8
 800072c:	3304      	adds	r3, #4
 800072e:	2b00      	cmp	r3, #0
 8000730:	bfb8      	it	lt
 8000732:	425b      	neglt	r3, r3
 8000734:	f5c3 63bb 	rsb	r3, r3, #1496	; 0x5d8
 8000738:	3304      	adds	r3, #4
 800073a:	4a10      	ldr	r2, [pc, #64]	; (800077c <sag1+0x7c>)
 800073c:	6812      	ldr	r2, [r2, #0]
 800073e:	63d3      	str	r3, [r2, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 1500-abs(1500-donusum));
 8000740:	4b0d      	ldr	r3, [pc, #52]	; (8000778 <sag1+0x78>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	f5c3 63bb 	rsb	r3, r3, #1496	; 0x5d8
 8000748:	3304      	adds	r3, #4
 800074a:	2b00      	cmp	r3, #0
 800074c:	bfb8      	it	lt
 800074e:	425b      	neglt	r3, r3
 8000750:	f5c3 63bb 	rsb	r3, r3, #1496	; 0x5d8
 8000754:	3304      	adds	r3, #4
 8000756:	4a09      	ldr	r2, [pc, #36]	; (800077c <sag1+0x7c>)
 8000758:	6812      	ldr	r2, [r2, #0]
 800075a:	6413      	str	r3, [r2, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 1500);
 800075c:	4b08      	ldr	r3, [pc, #32]	; (8000780 <sag1+0x80>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000764:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 1500);
 8000766:	4b06      	ldr	r3, [pc, #24]	; (8000780 <sag1+0x80>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800076e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000770:	bf00      	nop
 8000772:	bd80      	pop	{r7, pc}
 8000774:	20000120 	.word	0x20000120
 8000778:	20000170 	.word	0x20000170
 800077c:	200000d4 	.word	0x200000d4
 8000780:	2000008c 	.word	0x2000008c

08000784 <sol1>:
void sol1(){
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
	donusum = atoi(gelen);
 8000788:	481b      	ldr	r0, [pc, #108]	; (80007f8 <sol1+0x74>)
 800078a:	f003 fa55 	bl	8003c38 <atoi>
 800078e:	4603      	mov	r3, r0
 8000790:	4a1a      	ldr	r2, [pc, #104]	; (80007fc <sol1+0x78>)
 8000792:	6013      	str	r3, [r2, #0]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 1500-abs(1500-donusum));
 8000794:	4b19      	ldr	r3, [pc, #100]	; (80007fc <sol1+0x78>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	f5c3 63bb 	rsb	r3, r3, #1496	; 0x5d8
 800079c:	3304      	adds	r3, #4
 800079e:	2b00      	cmp	r3, #0
 80007a0:	bfb8      	it	lt
 80007a2:	425b      	neglt	r3, r3
 80007a4:	f5c3 63bb 	rsb	r3, r3, #1496	; 0x5d8
 80007a8:	3304      	adds	r3, #4
 80007aa:	4a15      	ldr	r2, [pc, #84]	; (8000800 <sol1+0x7c>)
 80007ac:	6812      	ldr	r2, [r2, #0]
 80007ae:	6353      	str	r3, [r2, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 1500-abs(1500-donusum));
 80007b0:	4b12      	ldr	r3, [pc, #72]	; (80007fc <sol1+0x78>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	f5c3 63bb 	rsb	r3, r3, #1496	; 0x5d8
 80007b8:	3304      	adds	r3, #4
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	bfb8      	it	lt
 80007be:	425b      	neglt	r3, r3
 80007c0:	f5c3 63bb 	rsb	r3, r3, #1496	; 0x5d8
 80007c4:	3304      	adds	r3, #4
 80007c6:	4a0e      	ldr	r2, [pc, #56]	; (8000800 <sol1+0x7c>)
 80007c8:	6812      	ldr	r2, [r2, #0]
 80007ca:	6393      	str	r3, [r2, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, donusum);
 80007cc:	4b0b      	ldr	r3, [pc, #44]	; (80007fc <sol1+0x78>)
 80007ce:	681a      	ldr	r2, [r3, #0]
 80007d0:	4b0b      	ldr	r3, [pc, #44]	; (8000800 <sol1+0x7c>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, donusum);
 80007d6:	4b09      	ldr	r3, [pc, #36]	; (80007fc <sol1+0x78>)
 80007d8:	681a      	ldr	r2, [r3, #0]
 80007da:	4b09      	ldr	r3, [pc, #36]	; (8000800 <sol1+0x7c>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	641a      	str	r2, [r3, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 1500);
 80007e0:	4b08      	ldr	r3, [pc, #32]	; (8000804 <sol1+0x80>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80007e8:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 1500);
 80007ea:	4b06      	ldr	r3, [pc, #24]	; (8000804 <sol1+0x80>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80007f2:	639a      	str	r2, [r3, #56]	; 0x38
}
 80007f4:	bf00      	nop
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	20000120 	.word	0x20000120
 80007fc:	20000170 	.word	0x20000170
 8000800:	200000d4 	.word	0x200000d4
 8000804:	2000008c 	.word	0x2000008c

08000808 <dur2>:
void dur2(){
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 1500);
 800080c:	4b11      	ldr	r3, [pc, #68]	; (8000854 <dur2+0x4c>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000814:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 1500);
 8000816:	4b0f      	ldr	r3, [pc, #60]	; (8000854 <dur2+0x4c>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800081e:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 1500);
 8000820:	4b0c      	ldr	r3, [pc, #48]	; (8000854 <dur2+0x4c>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000828:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 1500);
 800082a:	4b0a      	ldr	r3, [pc, #40]	; (8000854 <dur2+0x4c>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000832:	641a      	str	r2, [r3, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 1500);
 8000834:	4b08      	ldr	r3, [pc, #32]	; (8000858 <dur2+0x50>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800083c:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 1500);
 800083e:	4b06      	ldr	r3, [pc, #24]	; (8000858 <dur2+0x50>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000846:	639a      	str	r2, [r3, #56]	; 0x38
	}
 8000848:	bf00      	nop
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	200000d4 	.word	0x200000d4
 8000858:	2000008c 	.word	0x2000008c

0800085c <ilr2>:
void ilr2(){
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
	donusum = atoi(gelen);
 8000860:	481b      	ldr	r0, [pc, #108]	; (80008d0 <ilr2+0x74>)
 8000862:	f003 f9e9 	bl	8003c38 <atoi>
 8000866:	4603      	mov	r3, r0
 8000868:	4a1a      	ldr	r2, [pc, #104]	; (80008d4 <ilr2+0x78>)
 800086a:	6013      	str	r3, [r2, #0]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 1500-abs(1500-donusum));
 800086c:	4b19      	ldr	r3, [pc, #100]	; (80008d4 <ilr2+0x78>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	f5c3 63bb 	rsb	r3, r3, #1496	; 0x5d8
 8000874:	3304      	adds	r3, #4
 8000876:	2b00      	cmp	r3, #0
 8000878:	bfb8      	it	lt
 800087a:	425b      	neglt	r3, r3
 800087c:	f5c3 63bb 	rsb	r3, r3, #1496	; 0x5d8
 8000880:	3304      	adds	r3, #4
 8000882:	4a15      	ldr	r2, [pc, #84]	; (80008d8 <ilr2+0x7c>)
 8000884:	6812      	ldr	r2, [r2, #0]
 8000886:	6353      	str	r3, [r2, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, donusum);
 8000888:	4b12      	ldr	r3, [pc, #72]	; (80008d4 <ilr2+0x78>)
 800088a:	681a      	ldr	r2, [r3, #0]
 800088c:	4b12      	ldr	r3, [pc, #72]	; (80008d8 <ilr2+0x7c>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 1500-abs(1500-donusum));
 8000892:	4b10      	ldr	r3, [pc, #64]	; (80008d4 <ilr2+0x78>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	f5c3 63bb 	rsb	r3, r3, #1496	; 0x5d8
 800089a:	3304      	adds	r3, #4
 800089c:	2b00      	cmp	r3, #0
 800089e:	bfb8      	it	lt
 80008a0:	425b      	neglt	r3, r3
 80008a2:	f5c3 63bb 	rsb	r3, r3, #1496	; 0x5d8
 80008a6:	3304      	adds	r3, #4
 80008a8:	4a0b      	ldr	r2, [pc, #44]	; (80008d8 <ilr2+0x7c>)
 80008aa:	6812      	ldr	r2, [r2, #0]
 80008ac:	63d3      	str	r3, [r2, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, donusum);
 80008ae:	4b09      	ldr	r3, [pc, #36]	; (80008d4 <ilr2+0x78>)
 80008b0:	681a      	ldr	r2, [r3, #0]
 80008b2:	4b09      	ldr	r3, [pc, #36]	; (80008d8 <ilr2+0x7c>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	641a      	str	r2, [r3, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 1550);
 80008b8:	4b08      	ldr	r3, [pc, #32]	; (80008dc <ilr2+0x80>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	f240 620e 	movw	r2, #1550	; 0x60e
 80008c0:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 1550);
 80008c2:	4b06      	ldr	r3, [pc, #24]	; (80008dc <ilr2+0x80>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	f240 620e 	movw	r2, #1550	; 0x60e
 80008ca:	639a      	str	r2, [r3, #56]	; 0x38
}
 80008cc:	bf00      	nop
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	20000120 	.word	0x20000120
 80008d4:	20000170 	.word	0x20000170
 80008d8:	200000d4 	.word	0x200000d4
 80008dc:	2000008c 	.word	0x2000008c

080008e0 <ger2>:
void ger2(){
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
	donusum = atoi(gelen);
 80008e4:	481b      	ldr	r0, [pc, #108]	; (8000954 <ger2+0x74>)
 80008e6:	f003 f9a7 	bl	8003c38 <atoi>
 80008ea:	4603      	mov	r3, r0
 80008ec:	4a1a      	ldr	r2, [pc, #104]	; (8000958 <ger2+0x78>)
 80008ee:	6013      	str	r3, [r2, #0]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, donusum);
 80008f0:	4b19      	ldr	r3, [pc, #100]	; (8000958 <ger2+0x78>)
 80008f2:	681a      	ldr	r2, [r3, #0]
 80008f4:	4b19      	ldr	r3, [pc, #100]	; (800095c <ger2+0x7c>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 1500-abs(1500-donusum));
 80008fa:	4b17      	ldr	r3, [pc, #92]	; (8000958 <ger2+0x78>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	f5c3 63bb 	rsb	r3, r3, #1496	; 0x5d8
 8000902:	3304      	adds	r3, #4
 8000904:	2b00      	cmp	r3, #0
 8000906:	bfb8      	it	lt
 8000908:	425b      	neglt	r3, r3
 800090a:	f5c3 63bb 	rsb	r3, r3, #1496	; 0x5d8
 800090e:	3304      	adds	r3, #4
 8000910:	4a12      	ldr	r2, [pc, #72]	; (800095c <ger2+0x7c>)
 8000912:	6812      	ldr	r2, [r2, #0]
 8000914:	6393      	str	r3, [r2, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, donusum);
 8000916:	4b10      	ldr	r3, [pc, #64]	; (8000958 <ger2+0x78>)
 8000918:	681a      	ldr	r2, [r3, #0]
 800091a:	4b10      	ldr	r3, [pc, #64]	; (800095c <ger2+0x7c>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 1500-abs(1500-donusum));
 8000920:	4b0d      	ldr	r3, [pc, #52]	; (8000958 <ger2+0x78>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	f5c3 63bb 	rsb	r3, r3, #1496	; 0x5d8
 8000928:	3304      	adds	r3, #4
 800092a:	2b00      	cmp	r3, #0
 800092c:	bfb8      	it	lt
 800092e:	425b      	neglt	r3, r3
 8000930:	f5c3 63bb 	rsb	r3, r3, #1496	; 0x5d8
 8000934:	3304      	adds	r3, #4
 8000936:	4a09      	ldr	r2, [pc, #36]	; (800095c <ger2+0x7c>)
 8000938:	6812      	ldr	r2, [r2, #0]
 800093a:	6413      	str	r3, [r2, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 1550);
 800093c:	4b08      	ldr	r3, [pc, #32]	; (8000960 <ger2+0x80>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	f240 620e 	movw	r2, #1550	; 0x60e
 8000944:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 1550);
 8000946:	4b06      	ldr	r3, [pc, #24]	; (8000960 <ger2+0x80>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	f240 620e 	movw	r2, #1550	; 0x60e
 800094e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000950:	bf00      	nop
 8000952:	bd80      	pop	{r7, pc}
 8000954:	20000120 	.word	0x20000120
 8000958:	20000170 	.word	0x20000170
 800095c:	200000d4 	.word	0x200000d4
 8000960:	2000008c 	.word	0x2000008c

08000964 <ykr2>:
void ykr2(){
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
	donusum = atoi(gelen);
 8000968:	481b      	ldr	r0, [pc, #108]	; (80009d8 <ykr2+0x74>)
 800096a:	f003 f965 	bl	8003c38 <atoi>
 800096e:	4603      	mov	r3, r0
 8000970:	4a1a      	ldr	r2, [pc, #104]	; (80009dc <ykr2+0x78>)
 8000972:	6013      	str	r3, [r2, #0]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 1500);
 8000974:	4b1a      	ldr	r3, [pc, #104]	; (80009e0 <ykr2+0x7c>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800097c:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 1500);
 800097e:	4b18      	ldr	r3, [pc, #96]	; (80009e0 <ykr2+0x7c>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000986:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 1500);
 8000988:	4b15      	ldr	r3, [pc, #84]	; (80009e0 <ykr2+0x7c>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000990:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 1500);
 8000992:	4b13      	ldr	r3, [pc, #76]	; (80009e0 <ykr2+0x7c>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800099a:	641a      	str	r2, [r3, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 1500-abs(1500-donusum));
 800099c:	4b0f      	ldr	r3, [pc, #60]	; (80009dc <ykr2+0x78>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	f5c3 63bb 	rsb	r3, r3, #1496	; 0x5d8
 80009a4:	3304      	adds	r3, #4
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	bfb8      	it	lt
 80009aa:	425b      	neglt	r3, r3
 80009ac:	f5c3 63bb 	rsb	r3, r3, #1496	; 0x5d8
 80009b0:	3304      	adds	r3, #4
 80009b2:	4a0c      	ldr	r2, [pc, #48]	; (80009e4 <ykr2+0x80>)
 80009b4:	6812      	ldr	r2, [r2, #0]
 80009b6:	6353      	str	r3, [r2, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 1500-abs(1500-donusum));
 80009b8:	4b08      	ldr	r3, [pc, #32]	; (80009dc <ykr2+0x78>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	f5c3 63bb 	rsb	r3, r3, #1496	; 0x5d8
 80009c0:	3304      	adds	r3, #4
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	bfb8      	it	lt
 80009c6:	425b      	neglt	r3, r3
 80009c8:	f5c3 63bb 	rsb	r3, r3, #1496	; 0x5d8
 80009cc:	3304      	adds	r3, #4
 80009ce:	4a05      	ldr	r2, [pc, #20]	; (80009e4 <ykr2+0x80>)
 80009d0:	6812      	ldr	r2, [r2, #0]
 80009d2:	6393      	str	r3, [r2, #56]	; 0x38
}
 80009d4:	bf00      	nop
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	20000120 	.word	0x20000120
 80009dc:	20000170 	.word	0x20000170
 80009e0:	200000d4 	.word	0x200000d4
 80009e4:	2000008c 	.word	0x2000008c

080009e8 <asg2>:
void asg2(){
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
	donusum = atoi(gelen);
 80009ec:	4812      	ldr	r0, [pc, #72]	; (8000a38 <asg2+0x50>)
 80009ee:	f003 f923 	bl	8003c38 <atoi>
 80009f2:	4603      	mov	r3, r0
 80009f4:	4a11      	ldr	r2, [pc, #68]	; (8000a3c <asg2+0x54>)
 80009f6:	6013      	str	r3, [r2, #0]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 1500);
 80009f8:	4b11      	ldr	r3, [pc, #68]	; (8000a40 <asg2+0x58>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000a00:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 1500);
 8000a02:	4b0f      	ldr	r3, [pc, #60]	; (8000a40 <asg2+0x58>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000a0a:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 1500);
 8000a0c:	4b0c      	ldr	r3, [pc, #48]	; (8000a40 <asg2+0x58>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000a14:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 1500);
 8000a16:	4b0a      	ldr	r3, [pc, #40]	; (8000a40 <asg2+0x58>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000a1e:	641a      	str	r2, [r3, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, donusum);
 8000a20:	4b06      	ldr	r3, [pc, #24]	; (8000a3c <asg2+0x54>)
 8000a22:	681a      	ldr	r2, [r3, #0]
 8000a24:	4b07      	ldr	r3, [pc, #28]	; (8000a44 <asg2+0x5c>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, donusum);
 8000a2a:	4b04      	ldr	r3, [pc, #16]	; (8000a3c <asg2+0x54>)
 8000a2c:	681a      	ldr	r2, [r3, #0]
 8000a2e:	4b05      	ldr	r3, [pc, #20]	; (8000a44 <asg2+0x5c>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000a34:	bf00      	nop
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	20000120 	.word	0x20000120
 8000a3c:	20000170 	.word	0x20000170
 8000a40:	200000d4 	.word	0x200000d4
 8000a44:	2000008c 	.word	0x2000008c

08000a48 <sag2>:
void sag2(){
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
	donusum = atoi(gelen);
 8000a4c:	481b      	ldr	r0, [pc, #108]	; (8000abc <sag2+0x74>)
 8000a4e:	f003 f8f3 	bl	8003c38 <atoi>
 8000a52:	4603      	mov	r3, r0
 8000a54:	4a1a      	ldr	r2, [pc, #104]	; (8000ac0 <sag2+0x78>)
 8000a56:	6013      	str	r3, [r2, #0]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, donusum);
 8000a58:	4b19      	ldr	r3, [pc, #100]	; (8000ac0 <sag2+0x78>)
 8000a5a:	681a      	ldr	r2, [r3, #0]
 8000a5c:	4b19      	ldr	r3, [pc, #100]	; (8000ac4 <sag2+0x7c>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, donusum);
 8000a62:	4b17      	ldr	r3, [pc, #92]	; (8000ac0 <sag2+0x78>)
 8000a64:	681a      	ldr	r2, [r3, #0]
 8000a66:	4b17      	ldr	r3, [pc, #92]	; (8000ac4 <sag2+0x7c>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 1500-abs(1500-donusum));
 8000a6c:	4b14      	ldr	r3, [pc, #80]	; (8000ac0 <sag2+0x78>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	f5c3 63bb 	rsb	r3, r3, #1496	; 0x5d8
 8000a74:	3304      	adds	r3, #4
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	bfb8      	it	lt
 8000a7a:	425b      	neglt	r3, r3
 8000a7c:	f5c3 63bb 	rsb	r3, r3, #1496	; 0x5d8
 8000a80:	3304      	adds	r3, #4
 8000a82:	4a10      	ldr	r2, [pc, #64]	; (8000ac4 <sag2+0x7c>)
 8000a84:	6812      	ldr	r2, [r2, #0]
 8000a86:	63d3      	str	r3, [r2, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 1500-abs(1500-donusum));
 8000a88:	4b0d      	ldr	r3, [pc, #52]	; (8000ac0 <sag2+0x78>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	f5c3 63bb 	rsb	r3, r3, #1496	; 0x5d8
 8000a90:	3304      	adds	r3, #4
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	bfb8      	it	lt
 8000a96:	425b      	neglt	r3, r3
 8000a98:	f5c3 63bb 	rsb	r3, r3, #1496	; 0x5d8
 8000a9c:	3304      	adds	r3, #4
 8000a9e:	4a09      	ldr	r2, [pc, #36]	; (8000ac4 <sag2+0x7c>)
 8000aa0:	6812      	ldr	r2, [r2, #0]
 8000aa2:	6413      	str	r3, [r2, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 1550);
 8000aa4:	4b08      	ldr	r3, [pc, #32]	; (8000ac8 <sag2+0x80>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	f240 620e 	movw	r2, #1550	; 0x60e
 8000aac:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 1550);
 8000aae:	4b06      	ldr	r3, [pc, #24]	; (8000ac8 <sag2+0x80>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	f240 620e 	movw	r2, #1550	; 0x60e
 8000ab6:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000ab8:	bf00      	nop
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	20000120 	.word	0x20000120
 8000ac0:	20000170 	.word	0x20000170
 8000ac4:	200000d4 	.word	0x200000d4
 8000ac8:	2000008c 	.word	0x2000008c

08000acc <sol2>:
void sol2(){
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
	donusum = atoi(gelen);
 8000ad0:	481b      	ldr	r0, [pc, #108]	; (8000b40 <sol2+0x74>)
 8000ad2:	f003 f8b1 	bl	8003c38 <atoi>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	4a1a      	ldr	r2, [pc, #104]	; (8000b44 <sol2+0x78>)
 8000ada:	6013      	str	r3, [r2, #0]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 1500-abs(1500-donusum));
 8000adc:	4b19      	ldr	r3, [pc, #100]	; (8000b44 <sol2+0x78>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	f5c3 63bb 	rsb	r3, r3, #1496	; 0x5d8
 8000ae4:	3304      	adds	r3, #4
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	bfb8      	it	lt
 8000aea:	425b      	neglt	r3, r3
 8000aec:	f5c3 63bb 	rsb	r3, r3, #1496	; 0x5d8
 8000af0:	3304      	adds	r3, #4
 8000af2:	4a15      	ldr	r2, [pc, #84]	; (8000b48 <sol2+0x7c>)
 8000af4:	6812      	ldr	r2, [r2, #0]
 8000af6:	6353      	str	r3, [r2, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 1500-abs(1500-donusum));
 8000af8:	4b12      	ldr	r3, [pc, #72]	; (8000b44 <sol2+0x78>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	f5c3 63bb 	rsb	r3, r3, #1496	; 0x5d8
 8000b00:	3304      	adds	r3, #4
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	bfb8      	it	lt
 8000b06:	425b      	neglt	r3, r3
 8000b08:	f5c3 63bb 	rsb	r3, r3, #1496	; 0x5d8
 8000b0c:	3304      	adds	r3, #4
 8000b0e:	4a0e      	ldr	r2, [pc, #56]	; (8000b48 <sol2+0x7c>)
 8000b10:	6812      	ldr	r2, [r2, #0]
 8000b12:	6393      	str	r3, [r2, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, donusum);
 8000b14:	4b0b      	ldr	r3, [pc, #44]	; (8000b44 <sol2+0x78>)
 8000b16:	681a      	ldr	r2, [r3, #0]
 8000b18:	4b0b      	ldr	r3, [pc, #44]	; (8000b48 <sol2+0x7c>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, donusum);
 8000b1e:	4b09      	ldr	r3, [pc, #36]	; (8000b44 <sol2+0x78>)
 8000b20:	681a      	ldr	r2, [r3, #0]
 8000b22:	4b09      	ldr	r3, [pc, #36]	; (8000b48 <sol2+0x7c>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	641a      	str	r2, [r3, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 1550);
 8000b28:	4b08      	ldr	r3, [pc, #32]	; (8000b4c <sol2+0x80>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	f240 620e 	movw	r2, #1550	; 0x60e
 8000b30:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 1550);
 8000b32:	4b06      	ldr	r3, [pc, #24]	; (8000b4c <sol2+0x80>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	f240 620e 	movw	r2, #1550	; 0x60e
 8000b3a:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000b3c:	bf00      	nop
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	20000120 	.word	0x20000120
 8000b44:	20000170 	.word	0x20000170
 8000b48:	200000d4 	.word	0x200000d4
 8000b4c:	2000008c 	.word	0x2000008c

08000b50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b54:	f000 fcb4 	bl	80014c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b58:	f000 f962 	bl	8000e20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b5c:	f000 fad2 	bl	8001104 <MX_GPIO_Init>
  MX_TIM3_Init();
 8000b60:	f000 f9c8 	bl	8000ef4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000b64:	f000 fa40 	bl	8000fe8 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8000b68:	f000 faa2 	bl	80010b0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  //NVIC_SystemReset();
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	489a      	ldr	r0, [pc, #616]	; (8000dd8 <main+0x288>)
 8000b70:	f001 fd14 	bl	800259c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000b74:	2104      	movs	r1, #4
 8000b76:	4898      	ldr	r0, [pc, #608]	; (8000dd8 <main+0x288>)
 8000b78:	f001 fd10 	bl	800259c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000b7c:	2108      	movs	r1, #8
 8000b7e:	4896      	ldr	r0, [pc, #600]	; (8000dd8 <main+0x288>)
 8000b80:	f001 fd0c 	bl	800259c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8000b84:	210c      	movs	r1, #12
 8000b86:	4894      	ldr	r0, [pc, #592]	; (8000dd8 <main+0x288>)
 8000b88:	f001 fd08 	bl	800259c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	4893      	ldr	r0, [pc, #588]	; (8000ddc <main+0x28c>)
 8000b90:	f001 fd04 	bl	800259c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000b94:	2104      	movs	r1, #4
 8000b96:	4891      	ldr	r0, [pc, #580]	; (8000ddc <main+0x28c>)
 8000b98:	f001 fd00 	bl	800259c <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 1500);
 8000b9c:	4b8e      	ldr	r3, [pc, #568]	; (8000dd8 <main+0x288>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000ba4:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 1500);
 8000ba6:	4b8c      	ldr	r3, [pc, #560]	; (8000dd8 <main+0x288>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000bae:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 1500);
 8000bb0:	4b89      	ldr	r3, [pc, #548]	; (8000dd8 <main+0x288>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000bb8:	63da      	str	r2, [r3, #60]	; 0x3c
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 1500);
 8000bba:	4b87      	ldr	r3, [pc, #540]	; (8000dd8 <main+0x288>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000bc2:	641a      	str	r2, [r3, #64]	; 0x40
  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 1500);
 8000bc4:	4b85      	ldr	r3, [pc, #532]	; (8000ddc <main+0x28c>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000bcc:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 1500);
 8000bce:	4b83      	ldr	r3, [pc, #524]	; (8000ddc <main+0x28c>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000bd6:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_Delay(7000);
 8000bd8:	f641 3058 	movw	r0, #7000	; 0x1b58
 8000bdc:	f000 fce2 	bl	80015a4 <HAL_Delay>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_UART_Receive_IT(&huart1, (uint8_t*) gelen, 8);
 8000be0:	2208      	movs	r2, #8
 8000be2:	497f      	ldr	r1, [pc, #508]	; (8000de0 <main+0x290>)
 8000be4:	487f      	ldr	r0, [pc, #508]	; (8000de4 <main+0x294>)
 8000be6:	f002 f9a2 	bl	8002f2e <HAL_UART_Receive_IT>
	  degisken = atoi(gelen);
 8000bea:	487d      	ldr	r0, [pc, #500]	; (8000de0 <main+0x290>)
 8000bec:	f003 f824 	bl	8003c38 <atoi>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	4a7d      	ldr	r2, [pc, #500]	; (8000de8 <main+0x298>)
 8000bf4:	6013      	str	r3, [r2, #0]
	  while(degisken == 1000){
 8000bf6:	e079      	b.n	8000cec <main+0x19c>
		  HAL_UART_Receive_IT(&huart1, (uint8_t *)gelen, 8);
 8000bf8:	2208      	movs	r2, #8
 8000bfa:	4979      	ldr	r1, [pc, #484]	; (8000de0 <main+0x290>)
 8000bfc:	4879      	ldr	r0, [pc, #484]	; (8000de4 <main+0x294>)
 8000bfe:	f002 f996 	bl	8002f2e <HAL_UART_Receive_IT>
		  if(gelen[5] == 'd' && gelen[6] == 'u' && gelen[7] == 'r'){
 8000c02:	4b77      	ldr	r3, [pc, #476]	; (8000de0 <main+0x290>)
 8000c04:	795b      	ldrb	r3, [r3, #5]
 8000c06:	2b64      	cmp	r3, #100	; 0x64
 8000c08:	d10a      	bne.n	8000c20 <main+0xd0>
 8000c0a:	4b75      	ldr	r3, [pc, #468]	; (8000de0 <main+0x290>)
 8000c0c:	799b      	ldrb	r3, [r3, #6]
 8000c0e:	2b75      	cmp	r3, #117	; 0x75
 8000c10:	d106      	bne.n	8000c20 <main+0xd0>
 8000c12:	4b73      	ldr	r3, [pc, #460]	; (8000de0 <main+0x290>)
 8000c14:	79db      	ldrb	r3, [r3, #7]
 8000c16:	2b72      	cmp	r3, #114	; 0x72
 8000c18:	d102      	bne.n	8000c20 <main+0xd0>
			  dur1();
 8000c1a:	f7ff fc51 	bl	80004c0 <dur1>
 8000c1e:	e065      	b.n	8000cec <main+0x19c>
		  }
		  else if(gelen[5] == 'i' && gelen[6] == 'l' && gelen[7] == 'r') {
 8000c20:	4b6f      	ldr	r3, [pc, #444]	; (8000de0 <main+0x290>)
 8000c22:	795b      	ldrb	r3, [r3, #5]
 8000c24:	2b69      	cmp	r3, #105	; 0x69
 8000c26:	d10a      	bne.n	8000c3e <main+0xee>
 8000c28:	4b6d      	ldr	r3, [pc, #436]	; (8000de0 <main+0x290>)
 8000c2a:	799b      	ldrb	r3, [r3, #6]
 8000c2c:	2b6c      	cmp	r3, #108	; 0x6c
 8000c2e:	d106      	bne.n	8000c3e <main+0xee>
 8000c30:	4b6b      	ldr	r3, [pc, #428]	; (8000de0 <main+0x290>)
 8000c32:	79db      	ldrb	r3, [r3, #7]
 8000c34:	2b72      	cmp	r3, #114	; 0x72
 8000c36:	d102      	bne.n	8000c3e <main+0xee>
			  ilr1();
 8000c38:	f7ff fc6c 	bl	8000514 <ilr1>
 8000c3c:	e056      	b.n	8000cec <main+0x19c>
		  }
		  else if(gelen[5] == 'g' && gelen[6] == 'e' && gelen[7] == 'r') {
 8000c3e:	4b68      	ldr	r3, [pc, #416]	; (8000de0 <main+0x290>)
 8000c40:	795b      	ldrb	r3, [r3, #5]
 8000c42:	2b67      	cmp	r3, #103	; 0x67
 8000c44:	d10a      	bne.n	8000c5c <main+0x10c>
 8000c46:	4b66      	ldr	r3, [pc, #408]	; (8000de0 <main+0x290>)
 8000c48:	799b      	ldrb	r3, [r3, #6]
 8000c4a:	2b65      	cmp	r3, #101	; 0x65
 8000c4c:	d106      	bne.n	8000c5c <main+0x10c>
 8000c4e:	4b64      	ldr	r3, [pc, #400]	; (8000de0 <main+0x290>)
 8000c50:	79db      	ldrb	r3, [r3, #7]
 8000c52:	2b72      	cmp	r3, #114	; 0x72
 8000c54:	d102      	bne.n	8000c5c <main+0x10c>
			  ger1();
 8000c56:	f7ff fc9f 	bl	8000598 <ger1>
 8000c5a:	e047      	b.n	8000cec <main+0x19c>
		  }
		  else if(gelen[5] == 'y' && gelen[6] == 'k' && gelen[7] == 'r') {
 8000c5c:	4b60      	ldr	r3, [pc, #384]	; (8000de0 <main+0x290>)
 8000c5e:	795b      	ldrb	r3, [r3, #5]
 8000c60:	2b79      	cmp	r3, #121	; 0x79
 8000c62:	d10a      	bne.n	8000c7a <main+0x12a>
 8000c64:	4b5e      	ldr	r3, [pc, #376]	; (8000de0 <main+0x290>)
 8000c66:	799b      	ldrb	r3, [r3, #6]
 8000c68:	2b6b      	cmp	r3, #107	; 0x6b
 8000c6a:	d106      	bne.n	8000c7a <main+0x12a>
 8000c6c:	4b5c      	ldr	r3, [pc, #368]	; (8000de0 <main+0x290>)
 8000c6e:	79db      	ldrb	r3, [r3, #7]
 8000c70:	2b72      	cmp	r3, #114	; 0x72
 8000c72:	d102      	bne.n	8000c7a <main+0x12a>
			  ykr1();
 8000c74:	f7ff fcd2 	bl	800061c <ykr1>
 8000c78:	e038      	b.n	8000cec <main+0x19c>
		  }
		  else if(gelen[5] == 'a' && gelen[6] == 's' && gelen[7] == 'g') {
 8000c7a:	4b59      	ldr	r3, [pc, #356]	; (8000de0 <main+0x290>)
 8000c7c:	795b      	ldrb	r3, [r3, #5]
 8000c7e:	2b61      	cmp	r3, #97	; 0x61
 8000c80:	d10a      	bne.n	8000c98 <main+0x148>
 8000c82:	4b57      	ldr	r3, [pc, #348]	; (8000de0 <main+0x290>)
 8000c84:	799b      	ldrb	r3, [r3, #6]
 8000c86:	2b73      	cmp	r3, #115	; 0x73
 8000c88:	d106      	bne.n	8000c98 <main+0x148>
 8000c8a:	4b55      	ldr	r3, [pc, #340]	; (8000de0 <main+0x290>)
 8000c8c:	79db      	ldrb	r3, [r3, #7]
 8000c8e:	2b67      	cmp	r3, #103	; 0x67
 8000c90:	d102      	bne.n	8000c98 <main+0x148>
			  asg1();
 8000c92:	f7ff fd05 	bl	80006a0 <asg1>
 8000c96:	e029      	b.n	8000cec <main+0x19c>
		  }
		  else if(gelen[5] == 's' && gelen[6] == 'a' && gelen[7] == 'g') {
 8000c98:	4b51      	ldr	r3, [pc, #324]	; (8000de0 <main+0x290>)
 8000c9a:	795b      	ldrb	r3, [r3, #5]
 8000c9c:	2b73      	cmp	r3, #115	; 0x73
 8000c9e:	d10a      	bne.n	8000cb6 <main+0x166>
 8000ca0:	4b4f      	ldr	r3, [pc, #316]	; (8000de0 <main+0x290>)
 8000ca2:	799b      	ldrb	r3, [r3, #6]
 8000ca4:	2b61      	cmp	r3, #97	; 0x61
 8000ca6:	d106      	bne.n	8000cb6 <main+0x166>
 8000ca8:	4b4d      	ldr	r3, [pc, #308]	; (8000de0 <main+0x290>)
 8000caa:	79db      	ldrb	r3, [r3, #7]
 8000cac:	2b67      	cmp	r3, #103	; 0x67
 8000cae:	d102      	bne.n	8000cb6 <main+0x166>
			  sag1();
 8000cb0:	f7ff fd26 	bl	8000700 <sag1>
 8000cb4:	e01a      	b.n	8000cec <main+0x19c>
		  }
		  else if(gelen[5] == 's' && gelen[6] == 'o' && gelen[7] == 'l') {
 8000cb6:	4b4a      	ldr	r3, [pc, #296]	; (8000de0 <main+0x290>)
 8000cb8:	795b      	ldrb	r3, [r3, #5]
 8000cba:	2b73      	cmp	r3, #115	; 0x73
 8000cbc:	d10a      	bne.n	8000cd4 <main+0x184>
 8000cbe:	4b48      	ldr	r3, [pc, #288]	; (8000de0 <main+0x290>)
 8000cc0:	799b      	ldrb	r3, [r3, #6]
 8000cc2:	2b6f      	cmp	r3, #111	; 0x6f
 8000cc4:	d106      	bne.n	8000cd4 <main+0x184>
 8000cc6:	4b46      	ldr	r3, [pc, #280]	; (8000de0 <main+0x290>)
 8000cc8:	79db      	ldrb	r3, [r3, #7]
 8000cca:	2b6c      	cmp	r3, #108	; 0x6c
 8000ccc:	d102      	bne.n	8000cd4 <main+0x184>
			  sol1();
 8000cce:	f7ff fd59 	bl	8000784 <sol1>
 8000cd2:	e00b      	b.n	8000cec <main+0x19c>
		  }
		  else if(gelen[5] == 'c' && gelen[6] == 'i' && gelen[7] == 'k'){
 8000cd4:	4b42      	ldr	r3, [pc, #264]	; (8000de0 <main+0x290>)
 8000cd6:	795b      	ldrb	r3, [r3, #5]
 8000cd8:	2b63      	cmp	r3, #99	; 0x63
 8000cda:	d107      	bne.n	8000cec <main+0x19c>
 8000cdc:	4b40      	ldr	r3, [pc, #256]	; (8000de0 <main+0x290>)
 8000cde:	799b      	ldrb	r3, [r3, #6]
 8000ce0:	2b69      	cmp	r3, #105	; 0x69
 8000ce2:	d103      	bne.n	8000cec <main+0x19c>
 8000ce4:	4b3e      	ldr	r3, [pc, #248]	; (8000de0 <main+0x290>)
 8000ce6:	79db      	ldrb	r3, [r3, #7]
 8000ce8:	2b6b      	cmp	r3, #107	; 0x6b
 8000cea:	d005      	beq.n	8000cf8 <main+0x1a8>
	  while(degisken == 1000){
 8000cec:	4b3e      	ldr	r3, [pc, #248]	; (8000de8 <main+0x298>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000cf4:	d080      	beq.n	8000bf8 <main+0xa8>
 8000cf6:	e085      	b.n	8000e04 <main+0x2b4>
			  break;
 8000cf8:	bf00      	nop
		  }
	  }

	  while(degisken == 2000){
 8000cfa:	e083      	b.n	8000e04 <main+0x2b4>
		  HAL_UART_Receive_IT(&huart1, (uint8_t *)gelen, 8);
 8000cfc:	2208      	movs	r2, #8
 8000cfe:	4938      	ldr	r1, [pc, #224]	; (8000de0 <main+0x290>)
 8000d00:	4838      	ldr	r0, [pc, #224]	; (8000de4 <main+0x294>)
 8000d02:	f002 f914 	bl	8002f2e <HAL_UART_Receive_IT>
		  if(gelen[5] == 'd' && gelen[6] == 'u' && gelen[7] == 'r'){
 8000d06:	4b36      	ldr	r3, [pc, #216]	; (8000de0 <main+0x290>)
 8000d08:	795b      	ldrb	r3, [r3, #5]
 8000d0a:	2b64      	cmp	r3, #100	; 0x64
 8000d0c:	d10a      	bne.n	8000d24 <main+0x1d4>
 8000d0e:	4b34      	ldr	r3, [pc, #208]	; (8000de0 <main+0x290>)
 8000d10:	799b      	ldrb	r3, [r3, #6]
 8000d12:	2b75      	cmp	r3, #117	; 0x75
 8000d14:	d106      	bne.n	8000d24 <main+0x1d4>
 8000d16:	4b32      	ldr	r3, [pc, #200]	; (8000de0 <main+0x290>)
 8000d18:	79db      	ldrb	r3, [r3, #7]
 8000d1a:	2b72      	cmp	r3, #114	; 0x72
 8000d1c:	d102      	bne.n	8000d24 <main+0x1d4>
			  dur2();
 8000d1e:	f7ff fd73 	bl	8000808 <dur2>
 8000d22:	e06f      	b.n	8000e04 <main+0x2b4>
		  }
		  else if(gelen[5] == 'i' && gelen[6] == 'l' && gelen[7] == 'r') {
 8000d24:	4b2e      	ldr	r3, [pc, #184]	; (8000de0 <main+0x290>)
 8000d26:	795b      	ldrb	r3, [r3, #5]
 8000d28:	2b69      	cmp	r3, #105	; 0x69
 8000d2a:	d10a      	bne.n	8000d42 <main+0x1f2>
 8000d2c:	4b2c      	ldr	r3, [pc, #176]	; (8000de0 <main+0x290>)
 8000d2e:	799b      	ldrb	r3, [r3, #6]
 8000d30:	2b6c      	cmp	r3, #108	; 0x6c
 8000d32:	d106      	bne.n	8000d42 <main+0x1f2>
 8000d34:	4b2a      	ldr	r3, [pc, #168]	; (8000de0 <main+0x290>)
 8000d36:	79db      	ldrb	r3, [r3, #7]
 8000d38:	2b72      	cmp	r3, #114	; 0x72
 8000d3a:	d102      	bne.n	8000d42 <main+0x1f2>
			  ilr2();
 8000d3c:	f7ff fd8e 	bl	800085c <ilr2>
 8000d40:	e060      	b.n	8000e04 <main+0x2b4>
		  }
		  else if(gelen[5] == 'g' && gelen[6] == 'e' && gelen[7] == 'r') {
 8000d42:	4b27      	ldr	r3, [pc, #156]	; (8000de0 <main+0x290>)
 8000d44:	795b      	ldrb	r3, [r3, #5]
 8000d46:	2b67      	cmp	r3, #103	; 0x67
 8000d48:	d10a      	bne.n	8000d60 <main+0x210>
 8000d4a:	4b25      	ldr	r3, [pc, #148]	; (8000de0 <main+0x290>)
 8000d4c:	799b      	ldrb	r3, [r3, #6]
 8000d4e:	2b65      	cmp	r3, #101	; 0x65
 8000d50:	d106      	bne.n	8000d60 <main+0x210>
 8000d52:	4b23      	ldr	r3, [pc, #140]	; (8000de0 <main+0x290>)
 8000d54:	79db      	ldrb	r3, [r3, #7]
 8000d56:	2b72      	cmp	r3, #114	; 0x72
 8000d58:	d102      	bne.n	8000d60 <main+0x210>
			  ger2();
 8000d5a:	f7ff fdc1 	bl	80008e0 <ger2>
 8000d5e:	e051      	b.n	8000e04 <main+0x2b4>
		  }
		  else if(gelen[5] == 'y' && gelen[6] == 'k' && gelen[7] == 'r') {
 8000d60:	4b1f      	ldr	r3, [pc, #124]	; (8000de0 <main+0x290>)
 8000d62:	795b      	ldrb	r3, [r3, #5]
 8000d64:	2b79      	cmp	r3, #121	; 0x79
 8000d66:	d10a      	bne.n	8000d7e <main+0x22e>
 8000d68:	4b1d      	ldr	r3, [pc, #116]	; (8000de0 <main+0x290>)
 8000d6a:	799b      	ldrb	r3, [r3, #6]
 8000d6c:	2b6b      	cmp	r3, #107	; 0x6b
 8000d6e:	d106      	bne.n	8000d7e <main+0x22e>
 8000d70:	4b1b      	ldr	r3, [pc, #108]	; (8000de0 <main+0x290>)
 8000d72:	79db      	ldrb	r3, [r3, #7]
 8000d74:	2b72      	cmp	r3, #114	; 0x72
 8000d76:	d102      	bne.n	8000d7e <main+0x22e>
			  ykr2();
 8000d78:	f7ff fdf4 	bl	8000964 <ykr2>
 8000d7c:	e042      	b.n	8000e04 <main+0x2b4>
		  }
		  else if(gelen[5] == 'a' && gelen[6] == 's' && gelen[7] == 'g') {
 8000d7e:	4b18      	ldr	r3, [pc, #96]	; (8000de0 <main+0x290>)
 8000d80:	795b      	ldrb	r3, [r3, #5]
 8000d82:	2b61      	cmp	r3, #97	; 0x61
 8000d84:	d10a      	bne.n	8000d9c <main+0x24c>
 8000d86:	4b16      	ldr	r3, [pc, #88]	; (8000de0 <main+0x290>)
 8000d88:	799b      	ldrb	r3, [r3, #6]
 8000d8a:	2b73      	cmp	r3, #115	; 0x73
 8000d8c:	d106      	bne.n	8000d9c <main+0x24c>
 8000d8e:	4b14      	ldr	r3, [pc, #80]	; (8000de0 <main+0x290>)
 8000d90:	79db      	ldrb	r3, [r3, #7]
 8000d92:	2b67      	cmp	r3, #103	; 0x67
 8000d94:	d102      	bne.n	8000d9c <main+0x24c>
			  asg2();
 8000d96:	f7ff fe27 	bl	80009e8 <asg2>
 8000d9a:	e033      	b.n	8000e04 <main+0x2b4>
		  }
		  else if(gelen[5] == 's' && gelen[6] == 'a' && gelen[7] == 'g') {
 8000d9c:	4b10      	ldr	r3, [pc, #64]	; (8000de0 <main+0x290>)
 8000d9e:	795b      	ldrb	r3, [r3, #5]
 8000da0:	2b73      	cmp	r3, #115	; 0x73
 8000da2:	d10a      	bne.n	8000dba <main+0x26a>
 8000da4:	4b0e      	ldr	r3, [pc, #56]	; (8000de0 <main+0x290>)
 8000da6:	799b      	ldrb	r3, [r3, #6]
 8000da8:	2b61      	cmp	r3, #97	; 0x61
 8000daa:	d106      	bne.n	8000dba <main+0x26a>
 8000dac:	4b0c      	ldr	r3, [pc, #48]	; (8000de0 <main+0x290>)
 8000dae:	79db      	ldrb	r3, [r3, #7]
 8000db0:	2b67      	cmp	r3, #103	; 0x67
 8000db2:	d102      	bne.n	8000dba <main+0x26a>
			  sag2();
 8000db4:	f7ff fe48 	bl	8000a48 <sag2>
 8000db8:	e024      	b.n	8000e04 <main+0x2b4>
		  }
		  else if(gelen[5] == 's' && gelen[6] == 'o' && gelen[7] == 'l') {
 8000dba:	4b09      	ldr	r3, [pc, #36]	; (8000de0 <main+0x290>)
 8000dbc:	795b      	ldrb	r3, [r3, #5]
 8000dbe:	2b73      	cmp	r3, #115	; 0x73
 8000dc0:	d114      	bne.n	8000dec <main+0x29c>
 8000dc2:	4b07      	ldr	r3, [pc, #28]	; (8000de0 <main+0x290>)
 8000dc4:	799b      	ldrb	r3, [r3, #6]
 8000dc6:	2b6f      	cmp	r3, #111	; 0x6f
 8000dc8:	d110      	bne.n	8000dec <main+0x29c>
 8000dca:	4b05      	ldr	r3, [pc, #20]	; (8000de0 <main+0x290>)
 8000dcc:	79db      	ldrb	r3, [r3, #7]
 8000dce:	2b6c      	cmp	r3, #108	; 0x6c
 8000dd0:	d10c      	bne.n	8000dec <main+0x29c>
			  sol2();
 8000dd2:	f7ff fe7b 	bl	8000acc <sol2>
 8000dd6:	e015      	b.n	8000e04 <main+0x2b4>
 8000dd8:	200000d4 	.word	0x200000d4
 8000ddc:	2000008c 	.word	0x2000008c
 8000de0:	20000120 	.word	0x20000120
 8000de4:	2000012c 	.word	0x2000012c
 8000de8:	2000011c 	.word	0x2000011c
		  }
		  else if(gelen[5] == 'c' && gelen[6] == 'i' && gelen[7] == 'k'){
 8000dec:	4b0a      	ldr	r3, [pc, #40]	; (8000e18 <main+0x2c8>)
 8000dee:	795b      	ldrb	r3, [r3, #5]
 8000df0:	2b63      	cmp	r3, #99	; 0x63
 8000df2:	d107      	bne.n	8000e04 <main+0x2b4>
 8000df4:	4b08      	ldr	r3, [pc, #32]	; (8000e18 <main+0x2c8>)
 8000df6:	799b      	ldrb	r3, [r3, #6]
 8000df8:	2b69      	cmp	r3, #105	; 0x69
 8000dfa:	d103      	bne.n	8000e04 <main+0x2b4>
 8000dfc:	4b06      	ldr	r3, [pc, #24]	; (8000e18 <main+0x2c8>)
 8000dfe:	79db      	ldrb	r3, [r3, #7]
 8000e00:	2b6b      	cmp	r3, #107	; 0x6b
 8000e02:	d006      	beq.n	8000e12 <main+0x2c2>
	  while(degisken == 2000){
 8000e04:	4b05      	ldr	r3, [pc, #20]	; (8000e1c <main+0x2cc>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000e0c:	f43f af76 	beq.w	8000cfc <main+0x1ac>
 8000e10:	e6e6      	b.n	8000be0 <main+0x90>
			  break;
 8000e12:	bf00      	nop
	  HAL_UART_Receive_IT(&huart1, (uint8_t*) gelen, 8);
 8000e14:	e6e4      	b.n	8000be0 <main+0x90>
 8000e16:	bf00      	nop
 8000e18:	20000120 	.word	0x20000120
 8000e1c:	2000011c 	.word	0x2000011c

08000e20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b094      	sub	sp, #80	; 0x50
 8000e24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e26:	f107 0320 	add.w	r3, r7, #32
 8000e2a:	2230      	movs	r2, #48	; 0x30
 8000e2c:	2100      	movs	r1, #0
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f002 ff30 	bl	8003c94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e34:	f107 030c 	add.w	r3, r7, #12
 8000e38:	2200      	movs	r2, #0
 8000e3a:	601a      	str	r2, [r3, #0]
 8000e3c:	605a      	str	r2, [r3, #4]
 8000e3e:	609a      	str	r2, [r3, #8]
 8000e40:	60da      	str	r2, [r3, #12]
 8000e42:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e44:	2300      	movs	r3, #0
 8000e46:	60bb      	str	r3, [r7, #8]
 8000e48:	4b28      	ldr	r3, [pc, #160]	; (8000eec <SystemClock_Config+0xcc>)
 8000e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e4c:	4a27      	ldr	r2, [pc, #156]	; (8000eec <SystemClock_Config+0xcc>)
 8000e4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e52:	6413      	str	r3, [r2, #64]	; 0x40
 8000e54:	4b25      	ldr	r3, [pc, #148]	; (8000eec <SystemClock_Config+0xcc>)
 8000e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e5c:	60bb      	str	r3, [r7, #8]
 8000e5e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e60:	2300      	movs	r3, #0
 8000e62:	607b      	str	r3, [r7, #4]
 8000e64:	4b22      	ldr	r3, [pc, #136]	; (8000ef0 <SystemClock_Config+0xd0>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a21      	ldr	r2, [pc, #132]	; (8000ef0 <SystemClock_Config+0xd0>)
 8000e6a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e6e:	6013      	str	r3, [r2, #0]
 8000e70:	4b1f      	ldr	r3, [pc, #124]	; (8000ef0 <SystemClock_Config+0xd0>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e78:	607b      	str	r3, [r7, #4]
 8000e7a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e7c:	2302      	movs	r3, #2
 8000e7e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e80:	2301      	movs	r3, #1
 8000e82:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e84:	2310      	movs	r3, #16
 8000e86:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e88:	2302      	movs	r3, #2
 8000e8a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000e90:	2308      	movs	r3, #8
 8000e92:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000e94:	23a8      	movs	r3, #168	; 0xa8
 8000e96:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e98:	2302      	movs	r3, #2
 8000e9a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000e9c:	2304      	movs	r3, #4
 8000e9e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ea0:	f107 0320 	add.w	r3, r7, #32
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f000 fee1 	bl	8001c6c <HAL_RCC_OscConfig>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d001      	beq.n	8000eb4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000eb0:	f000 f95e 	bl	8001170 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000eb4:	230f      	movs	r3, #15
 8000eb6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000eb8:	2302      	movs	r3, #2
 8000eba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ec0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ec4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ec6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000eca:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ecc:	f107 030c 	add.w	r3, r7, #12
 8000ed0:	2105      	movs	r1, #5
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f001 f942 	bl	800215c <HAL_RCC_ClockConfig>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000ede:	f000 f947 	bl	8001170 <Error_Handler>
  }
}
 8000ee2:	bf00      	nop
 8000ee4:	3750      	adds	r7, #80	; 0x50
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	40023800 	.word	0x40023800
 8000ef0:	40007000 	.word	0x40007000

08000ef4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b08a      	sub	sp, #40	; 0x28
 8000ef8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000efa:	f107 0320 	add.w	r3, r7, #32
 8000efe:	2200      	movs	r2, #0
 8000f00:	601a      	str	r2, [r3, #0]
 8000f02:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f04:	1d3b      	adds	r3, r7, #4
 8000f06:	2200      	movs	r2, #0
 8000f08:	601a      	str	r2, [r3, #0]
 8000f0a:	605a      	str	r2, [r3, #4]
 8000f0c:	609a      	str	r2, [r3, #8]
 8000f0e:	60da      	str	r2, [r3, #12]
 8000f10:	611a      	str	r2, [r3, #16]
 8000f12:	615a      	str	r2, [r3, #20]
 8000f14:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f16:	4b32      	ldr	r3, [pc, #200]	; (8000fe0 <MX_TIM3_Init+0xec>)
 8000f18:	4a32      	ldr	r2, [pc, #200]	; (8000fe4 <MX_TIM3_Init+0xf0>)
 8000f1a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 8000f1c:	4b30      	ldr	r3, [pc, #192]	; (8000fe0 <MX_TIM3_Init+0xec>)
 8000f1e:	2253      	movs	r2, #83	; 0x53
 8000f20:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f22:	4b2f      	ldr	r3, [pc, #188]	; (8000fe0 <MX_TIM3_Init+0xec>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 8000f28:	4b2d      	ldr	r3, [pc, #180]	; (8000fe0 <MX_TIM3_Init+0xec>)
 8000f2a:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000f2e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f30:	4b2b      	ldr	r3, [pc, #172]	; (8000fe0 <MX_TIM3_Init+0xec>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f36:	4b2a      	ldr	r3, [pc, #168]	; (8000fe0 <MX_TIM3_Init+0xec>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000f3c:	4828      	ldr	r0, [pc, #160]	; (8000fe0 <MX_TIM3_Init+0xec>)
 8000f3e:	f001 fadd 	bl	80024fc <HAL_TIM_PWM_Init>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000f48:	f000 f912 	bl	8001170 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f50:	2300      	movs	r3, #0
 8000f52:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f54:	f107 0320 	add.w	r3, r7, #32
 8000f58:	4619      	mov	r1, r3
 8000f5a:	4821      	ldr	r0, [pc, #132]	; (8000fe0 <MX_TIM3_Init+0xec>)
 8000f5c:	f001 ff1e 	bl	8002d9c <HAL_TIMEx_MasterConfigSynchronization>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000f66:	f000 f903 	bl	8001170 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f6a:	2360      	movs	r3, #96	; 0x60
 8000f6c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f72:	2300      	movs	r3, #0
 8000f74:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f76:	2300      	movs	r3, #0
 8000f78:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f7a:	1d3b      	adds	r3, r7, #4
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	4619      	mov	r1, r3
 8000f80:	4817      	ldr	r0, [pc, #92]	; (8000fe0 <MX_TIM3_Init+0xec>)
 8000f82:	f001 fbd3 	bl	800272c <HAL_TIM_PWM_ConfigChannel>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000f8c:	f000 f8f0 	bl	8001170 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f90:	1d3b      	adds	r3, r7, #4
 8000f92:	2204      	movs	r2, #4
 8000f94:	4619      	mov	r1, r3
 8000f96:	4812      	ldr	r0, [pc, #72]	; (8000fe0 <MX_TIM3_Init+0xec>)
 8000f98:	f001 fbc8 	bl	800272c <HAL_TIM_PWM_ConfigChannel>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000fa2:	f000 f8e5 	bl	8001170 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000fa6:	1d3b      	adds	r3, r7, #4
 8000fa8:	2208      	movs	r2, #8
 8000faa:	4619      	mov	r1, r3
 8000fac:	480c      	ldr	r0, [pc, #48]	; (8000fe0 <MX_TIM3_Init+0xec>)
 8000fae:	f001 fbbd 	bl	800272c <HAL_TIM_PWM_ConfigChannel>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8000fb8:	f000 f8da 	bl	8001170 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000fbc:	1d3b      	adds	r3, r7, #4
 8000fbe:	220c      	movs	r2, #12
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	4807      	ldr	r0, [pc, #28]	; (8000fe0 <MX_TIM3_Init+0xec>)
 8000fc4:	f001 fbb2 	bl	800272c <HAL_TIM_PWM_ConfigChannel>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 8000fce:	f000 f8cf 	bl	8001170 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000fd2:	4803      	ldr	r0, [pc, #12]	; (8000fe0 <MX_TIM3_Init+0xec>)
 8000fd4:	f000 f932 	bl	800123c <HAL_TIM_MspPostInit>

}
 8000fd8:	bf00      	nop
 8000fda:	3728      	adds	r7, #40	; 0x28
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	200000d4 	.word	0x200000d4
 8000fe4:	40000400 	.word	0x40000400

08000fe8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b08a      	sub	sp, #40	; 0x28
 8000fec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fee:	f107 0320 	add.w	r3, r7, #32
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	601a      	str	r2, [r3, #0]
 8000ff6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ff8:	1d3b      	adds	r3, r7, #4
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	601a      	str	r2, [r3, #0]
 8000ffe:	605a      	str	r2, [r3, #4]
 8001000:	609a      	str	r2, [r3, #8]
 8001002:	60da      	str	r2, [r3, #12]
 8001004:	611a      	str	r2, [r3, #16]
 8001006:	615a      	str	r2, [r3, #20]
 8001008:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800100a:	4b27      	ldr	r3, [pc, #156]	; (80010a8 <MX_TIM4_Init+0xc0>)
 800100c:	4a27      	ldr	r2, [pc, #156]	; (80010ac <MX_TIM4_Init+0xc4>)
 800100e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 8001010:	4b25      	ldr	r3, [pc, #148]	; (80010a8 <MX_TIM4_Init+0xc0>)
 8001012:	2253      	movs	r2, #83	; 0x53
 8001014:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001016:	4b24      	ldr	r3, [pc, #144]	; (80010a8 <MX_TIM4_Init+0xc0>)
 8001018:	2200      	movs	r2, #0
 800101a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 19999;
 800101c:	4b22      	ldr	r3, [pc, #136]	; (80010a8 <MX_TIM4_Init+0xc0>)
 800101e:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001022:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001024:	4b20      	ldr	r3, [pc, #128]	; (80010a8 <MX_TIM4_Init+0xc0>)
 8001026:	2200      	movs	r2, #0
 8001028:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800102a:	4b1f      	ldr	r3, [pc, #124]	; (80010a8 <MX_TIM4_Init+0xc0>)
 800102c:	2200      	movs	r2, #0
 800102e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001030:	481d      	ldr	r0, [pc, #116]	; (80010a8 <MX_TIM4_Init+0xc0>)
 8001032:	f001 fa63 	bl	80024fc <HAL_TIM_PWM_Init>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 800103c:	f000 f898 	bl	8001170 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001040:	2300      	movs	r3, #0
 8001042:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001044:	2300      	movs	r3, #0
 8001046:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001048:	f107 0320 	add.w	r3, r7, #32
 800104c:	4619      	mov	r1, r3
 800104e:	4816      	ldr	r0, [pc, #88]	; (80010a8 <MX_TIM4_Init+0xc0>)
 8001050:	f001 fea4 	bl	8002d9c <HAL_TIMEx_MasterConfigSynchronization>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 800105a:	f000 f889 	bl	8001170 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800105e:	2360      	movs	r3, #96	; 0x60
 8001060:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001062:	2300      	movs	r3, #0
 8001064:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001066:	2300      	movs	r3, #0
 8001068:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800106a:	2300      	movs	r3, #0
 800106c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800106e:	1d3b      	adds	r3, r7, #4
 8001070:	2200      	movs	r2, #0
 8001072:	4619      	mov	r1, r3
 8001074:	480c      	ldr	r0, [pc, #48]	; (80010a8 <MX_TIM4_Init+0xc0>)
 8001076:	f001 fb59 	bl	800272c <HAL_TIM_PWM_ConfigChannel>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8001080:	f000 f876 	bl	8001170 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001084:	1d3b      	adds	r3, r7, #4
 8001086:	2204      	movs	r2, #4
 8001088:	4619      	mov	r1, r3
 800108a:	4807      	ldr	r0, [pc, #28]	; (80010a8 <MX_TIM4_Init+0xc0>)
 800108c:	f001 fb4e 	bl	800272c <HAL_TIM_PWM_ConfigChannel>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001096:	f000 f86b 	bl	8001170 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800109a:	4803      	ldr	r0, [pc, #12]	; (80010a8 <MX_TIM4_Init+0xc0>)
 800109c:	f000 f8ce 	bl	800123c <HAL_TIM_MspPostInit>

}
 80010a0:	bf00      	nop
 80010a2:	3728      	adds	r7, #40	; 0x28
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	2000008c 	.word	0x2000008c
 80010ac:	40000800 	.word	0x40000800

080010b0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80010b4:	4b11      	ldr	r3, [pc, #68]	; (80010fc <MX_USART1_UART_Init+0x4c>)
 80010b6:	4a12      	ldr	r2, [pc, #72]	; (8001100 <MX_USART1_UART_Init+0x50>)
 80010b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80010ba:	4b10      	ldr	r3, [pc, #64]	; (80010fc <MX_USART1_UART_Init+0x4c>)
 80010bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80010c2:	4b0e      	ldr	r3, [pc, #56]	; (80010fc <MX_USART1_UART_Init+0x4c>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80010c8:	4b0c      	ldr	r3, [pc, #48]	; (80010fc <MX_USART1_UART_Init+0x4c>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80010ce:	4b0b      	ldr	r3, [pc, #44]	; (80010fc <MX_USART1_UART_Init+0x4c>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80010d4:	4b09      	ldr	r3, [pc, #36]	; (80010fc <MX_USART1_UART_Init+0x4c>)
 80010d6:	220c      	movs	r2, #12
 80010d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010da:	4b08      	ldr	r3, [pc, #32]	; (80010fc <MX_USART1_UART_Init+0x4c>)
 80010dc:	2200      	movs	r2, #0
 80010de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80010e0:	4b06      	ldr	r3, [pc, #24]	; (80010fc <MX_USART1_UART_Init+0x4c>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80010e6:	4805      	ldr	r0, [pc, #20]	; (80010fc <MX_USART1_UART_Init+0x4c>)
 80010e8:	f001 fed4 	bl	8002e94 <HAL_UART_Init>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80010f2:	f000 f83d 	bl	8001170 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80010f6:	bf00      	nop
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	2000012c 	.word	0x2000012c
 8001100:	40011000 	.word	0x40011000

08001104 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001104:	b480      	push	{r7}
 8001106:	b085      	sub	sp, #20
 8001108:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800110a:	2300      	movs	r3, #0
 800110c:	60fb      	str	r3, [r7, #12]
 800110e:	4b17      	ldr	r3, [pc, #92]	; (800116c <MX_GPIO_Init+0x68>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001112:	4a16      	ldr	r2, [pc, #88]	; (800116c <MX_GPIO_Init+0x68>)
 8001114:	f043 0301 	orr.w	r3, r3, #1
 8001118:	6313      	str	r3, [r2, #48]	; 0x30
 800111a:	4b14      	ldr	r3, [pc, #80]	; (800116c <MX_GPIO_Init+0x68>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111e:	f003 0301 	and.w	r3, r3, #1
 8001122:	60fb      	str	r3, [r7, #12]
 8001124:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001126:	2300      	movs	r3, #0
 8001128:	60bb      	str	r3, [r7, #8]
 800112a:	4b10      	ldr	r3, [pc, #64]	; (800116c <MX_GPIO_Init+0x68>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112e:	4a0f      	ldr	r2, [pc, #60]	; (800116c <MX_GPIO_Init+0x68>)
 8001130:	f043 0302 	orr.w	r3, r3, #2
 8001134:	6313      	str	r3, [r2, #48]	; 0x30
 8001136:	4b0d      	ldr	r3, [pc, #52]	; (800116c <MX_GPIO_Init+0x68>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113a:	f003 0302 	and.w	r3, r3, #2
 800113e:	60bb      	str	r3, [r7, #8]
 8001140:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001142:	2300      	movs	r3, #0
 8001144:	607b      	str	r3, [r7, #4]
 8001146:	4b09      	ldr	r3, [pc, #36]	; (800116c <MX_GPIO_Init+0x68>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114a:	4a08      	ldr	r2, [pc, #32]	; (800116c <MX_GPIO_Init+0x68>)
 800114c:	f043 0308 	orr.w	r3, r3, #8
 8001150:	6313      	str	r3, [r2, #48]	; 0x30
 8001152:	4b06      	ldr	r3, [pc, #24]	; (800116c <MX_GPIO_Init+0x68>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	f003 0308 	and.w	r3, r3, #8
 800115a:	607b      	str	r3, [r7, #4]
 800115c:	687b      	ldr	r3, [r7, #4]

}
 800115e:	bf00      	nop
 8001160:	3714      	adds	r7, #20
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	40023800 	.word	0x40023800

08001170 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001174:	b672      	cpsid	i
}
 8001176:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001178:	e7fe      	b.n	8001178 <Error_Handler+0x8>
	...

0800117c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001182:	2300      	movs	r3, #0
 8001184:	607b      	str	r3, [r7, #4]
 8001186:	4b10      	ldr	r3, [pc, #64]	; (80011c8 <HAL_MspInit+0x4c>)
 8001188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800118a:	4a0f      	ldr	r2, [pc, #60]	; (80011c8 <HAL_MspInit+0x4c>)
 800118c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001190:	6453      	str	r3, [r2, #68]	; 0x44
 8001192:	4b0d      	ldr	r3, [pc, #52]	; (80011c8 <HAL_MspInit+0x4c>)
 8001194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001196:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800119a:	607b      	str	r3, [r7, #4]
 800119c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800119e:	2300      	movs	r3, #0
 80011a0:	603b      	str	r3, [r7, #0]
 80011a2:	4b09      	ldr	r3, [pc, #36]	; (80011c8 <HAL_MspInit+0x4c>)
 80011a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a6:	4a08      	ldr	r2, [pc, #32]	; (80011c8 <HAL_MspInit+0x4c>)
 80011a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011ac:	6413      	str	r3, [r2, #64]	; 0x40
 80011ae:	4b06      	ldr	r3, [pc, #24]	; (80011c8 <HAL_MspInit+0x4c>)
 80011b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011b6:	603b      	str	r3, [r7, #0]
 80011b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011ba:	bf00      	nop
 80011bc:	370c      	adds	r7, #12
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop
 80011c8:	40023800 	.word	0x40023800

080011cc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b085      	sub	sp, #20
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a15      	ldr	r2, [pc, #84]	; (8001230 <HAL_TIM_PWM_MspInit+0x64>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d10e      	bne.n	80011fc <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80011de:	2300      	movs	r3, #0
 80011e0:	60fb      	str	r3, [r7, #12]
 80011e2:	4b14      	ldr	r3, [pc, #80]	; (8001234 <HAL_TIM_PWM_MspInit+0x68>)
 80011e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e6:	4a13      	ldr	r2, [pc, #76]	; (8001234 <HAL_TIM_PWM_MspInit+0x68>)
 80011e8:	f043 0302 	orr.w	r3, r3, #2
 80011ec:	6413      	str	r3, [r2, #64]	; 0x40
 80011ee:	4b11      	ldr	r3, [pc, #68]	; (8001234 <HAL_TIM_PWM_MspInit+0x68>)
 80011f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f2:	f003 0302 	and.w	r3, r3, #2
 80011f6:	60fb      	str	r3, [r7, #12]
 80011f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80011fa:	e012      	b.n	8001222 <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM4)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a0d      	ldr	r2, [pc, #52]	; (8001238 <HAL_TIM_PWM_MspInit+0x6c>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d10d      	bne.n	8001222 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001206:	2300      	movs	r3, #0
 8001208:	60bb      	str	r3, [r7, #8]
 800120a:	4b0a      	ldr	r3, [pc, #40]	; (8001234 <HAL_TIM_PWM_MspInit+0x68>)
 800120c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120e:	4a09      	ldr	r2, [pc, #36]	; (8001234 <HAL_TIM_PWM_MspInit+0x68>)
 8001210:	f043 0304 	orr.w	r3, r3, #4
 8001214:	6413      	str	r3, [r2, #64]	; 0x40
 8001216:	4b07      	ldr	r3, [pc, #28]	; (8001234 <HAL_TIM_PWM_MspInit+0x68>)
 8001218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121a:	f003 0304 	and.w	r3, r3, #4
 800121e:	60bb      	str	r3, [r7, #8]
 8001220:	68bb      	ldr	r3, [r7, #8]
}
 8001222:	bf00      	nop
 8001224:	3714      	adds	r7, #20
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	40000400 	.word	0x40000400
 8001234:	40023800 	.word	0x40023800
 8001238:	40000800 	.word	0x40000800

0800123c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b08a      	sub	sp, #40	; 0x28
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001244:	f107 0314 	add.w	r3, r7, #20
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]
 800124c:	605a      	str	r2, [r3, #4]
 800124e:	609a      	str	r2, [r3, #8]
 8001250:	60da      	str	r2, [r3, #12]
 8001252:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a33      	ldr	r2, [pc, #204]	; (8001328 <HAL_TIM_MspPostInit+0xec>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d13c      	bne.n	80012d8 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800125e:	2300      	movs	r3, #0
 8001260:	613b      	str	r3, [r7, #16]
 8001262:	4b32      	ldr	r3, [pc, #200]	; (800132c <HAL_TIM_MspPostInit+0xf0>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001266:	4a31      	ldr	r2, [pc, #196]	; (800132c <HAL_TIM_MspPostInit+0xf0>)
 8001268:	f043 0301 	orr.w	r3, r3, #1
 800126c:	6313      	str	r3, [r2, #48]	; 0x30
 800126e:	4b2f      	ldr	r3, [pc, #188]	; (800132c <HAL_TIM_MspPostInit+0xf0>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001272:	f003 0301 	and.w	r3, r3, #1
 8001276:	613b      	str	r3, [r7, #16]
 8001278:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800127a:	2300      	movs	r3, #0
 800127c:	60fb      	str	r3, [r7, #12]
 800127e:	4b2b      	ldr	r3, [pc, #172]	; (800132c <HAL_TIM_MspPostInit+0xf0>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001282:	4a2a      	ldr	r2, [pc, #168]	; (800132c <HAL_TIM_MspPostInit+0xf0>)
 8001284:	f043 0302 	orr.w	r3, r3, #2
 8001288:	6313      	str	r3, [r2, #48]	; 0x30
 800128a:	4b28      	ldr	r3, [pc, #160]	; (800132c <HAL_TIM_MspPostInit+0xf0>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128e:	f003 0302 	and.w	r3, r3, #2
 8001292:	60fb      	str	r3, [r7, #12]
 8001294:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001296:	23c0      	movs	r3, #192	; 0xc0
 8001298:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800129a:	2302      	movs	r3, #2
 800129c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129e:	2300      	movs	r3, #0
 80012a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a2:	2300      	movs	r3, #0
 80012a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80012a6:	2302      	movs	r3, #2
 80012a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012aa:	f107 0314 	add.w	r3, r7, #20
 80012ae:	4619      	mov	r1, r3
 80012b0:	481f      	ldr	r0, [pc, #124]	; (8001330 <HAL_TIM_MspPostInit+0xf4>)
 80012b2:	f000 fb3f 	bl	8001934 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80012b6:	2303      	movs	r3, #3
 80012b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ba:	2302      	movs	r3, #2
 80012bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012be:	2300      	movs	r3, #0
 80012c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c2:	2300      	movs	r3, #0
 80012c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80012c6:	2302      	movs	r3, #2
 80012c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ca:	f107 0314 	add.w	r3, r7, #20
 80012ce:	4619      	mov	r1, r3
 80012d0:	4818      	ldr	r0, [pc, #96]	; (8001334 <HAL_TIM_MspPostInit+0xf8>)
 80012d2:	f000 fb2f 	bl	8001934 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80012d6:	e023      	b.n	8001320 <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM4)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a16      	ldr	r2, [pc, #88]	; (8001338 <HAL_TIM_MspPostInit+0xfc>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d11e      	bne.n	8001320 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012e2:	2300      	movs	r3, #0
 80012e4:	60bb      	str	r3, [r7, #8]
 80012e6:	4b11      	ldr	r3, [pc, #68]	; (800132c <HAL_TIM_MspPostInit+0xf0>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ea:	4a10      	ldr	r2, [pc, #64]	; (800132c <HAL_TIM_MspPostInit+0xf0>)
 80012ec:	f043 0308 	orr.w	r3, r3, #8
 80012f0:	6313      	str	r3, [r2, #48]	; 0x30
 80012f2:	4b0e      	ldr	r3, [pc, #56]	; (800132c <HAL_TIM_MspPostInit+0xf0>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f6:	f003 0308 	and.w	r3, r3, #8
 80012fa:	60bb      	str	r3, [r7, #8]
 80012fc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80012fe:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001302:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001304:	2302      	movs	r3, #2
 8001306:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001308:	2300      	movs	r3, #0
 800130a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800130c:	2300      	movs	r3, #0
 800130e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001310:	2302      	movs	r3, #2
 8001312:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001314:	f107 0314 	add.w	r3, r7, #20
 8001318:	4619      	mov	r1, r3
 800131a:	4808      	ldr	r0, [pc, #32]	; (800133c <HAL_TIM_MspPostInit+0x100>)
 800131c:	f000 fb0a 	bl	8001934 <HAL_GPIO_Init>
}
 8001320:	bf00      	nop
 8001322:	3728      	adds	r7, #40	; 0x28
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	40000400 	.word	0x40000400
 800132c:	40023800 	.word	0x40023800
 8001330:	40020000 	.word	0x40020000
 8001334:	40020400 	.word	0x40020400
 8001338:	40000800 	.word	0x40000800
 800133c:	40020c00 	.word	0x40020c00

08001340 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b08a      	sub	sp, #40	; 0x28
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001348:	f107 0314 	add.w	r3, r7, #20
 800134c:	2200      	movs	r2, #0
 800134e:	601a      	str	r2, [r3, #0]
 8001350:	605a      	str	r2, [r3, #4]
 8001352:	609a      	str	r2, [r3, #8]
 8001354:	60da      	str	r2, [r3, #12]
 8001356:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a1d      	ldr	r2, [pc, #116]	; (80013d4 <HAL_UART_MspInit+0x94>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d134      	bne.n	80013cc <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001362:	2300      	movs	r3, #0
 8001364:	613b      	str	r3, [r7, #16]
 8001366:	4b1c      	ldr	r3, [pc, #112]	; (80013d8 <HAL_UART_MspInit+0x98>)
 8001368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800136a:	4a1b      	ldr	r2, [pc, #108]	; (80013d8 <HAL_UART_MspInit+0x98>)
 800136c:	f043 0310 	orr.w	r3, r3, #16
 8001370:	6453      	str	r3, [r2, #68]	; 0x44
 8001372:	4b19      	ldr	r3, [pc, #100]	; (80013d8 <HAL_UART_MspInit+0x98>)
 8001374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001376:	f003 0310 	and.w	r3, r3, #16
 800137a:	613b      	str	r3, [r7, #16]
 800137c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800137e:	2300      	movs	r3, #0
 8001380:	60fb      	str	r3, [r7, #12]
 8001382:	4b15      	ldr	r3, [pc, #84]	; (80013d8 <HAL_UART_MspInit+0x98>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001386:	4a14      	ldr	r2, [pc, #80]	; (80013d8 <HAL_UART_MspInit+0x98>)
 8001388:	f043 0301 	orr.w	r3, r3, #1
 800138c:	6313      	str	r3, [r2, #48]	; 0x30
 800138e:	4b12      	ldr	r3, [pc, #72]	; (80013d8 <HAL_UART_MspInit+0x98>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001392:	f003 0301 	and.w	r3, r3, #1
 8001396:	60fb      	str	r3, [r7, #12]
 8001398:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800139a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800139e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a0:	2302      	movs	r3, #2
 80013a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a4:	2300      	movs	r3, #0
 80013a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013a8:	2303      	movs	r3, #3
 80013aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80013ac:	2307      	movs	r3, #7
 80013ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b0:	f107 0314 	add.w	r3, r7, #20
 80013b4:	4619      	mov	r1, r3
 80013b6:	4809      	ldr	r0, [pc, #36]	; (80013dc <HAL_UART_MspInit+0x9c>)
 80013b8:	f000 fabc 	bl	8001934 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80013bc:	2200      	movs	r2, #0
 80013be:	2100      	movs	r1, #0
 80013c0:	2025      	movs	r0, #37	; 0x25
 80013c2:	f000 f9ee 	bl	80017a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80013c6:	2025      	movs	r0, #37	; 0x25
 80013c8:	f000 fa07 	bl	80017da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80013cc:	bf00      	nop
 80013ce:	3728      	adds	r7, #40	; 0x28
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	40011000 	.word	0x40011000
 80013d8:	40023800 	.word	0x40023800
 80013dc:	40020000 	.word	0x40020000

080013e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013e4:	e7fe      	b.n	80013e4 <NMI_Handler+0x4>

080013e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013e6:	b480      	push	{r7}
 80013e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013ea:	e7fe      	b.n	80013ea <HardFault_Handler+0x4>

080013ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013f0:	e7fe      	b.n	80013f0 <MemManage_Handler+0x4>

080013f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013f2:	b480      	push	{r7}
 80013f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013f6:	e7fe      	b.n	80013f6 <BusFault_Handler+0x4>

080013f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013fc:	e7fe      	b.n	80013fc <UsageFault_Handler+0x4>

080013fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013fe:	b480      	push	{r7}
 8001400:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001402:	bf00      	nop
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr

0800140c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001410:	bf00      	nop
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr

0800141a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800141a:	b480      	push	{r7}
 800141c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800141e:	bf00      	nop
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr

08001428 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800142c:	f000 f89a 	bl	8001564 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001430:	bf00      	nop
 8001432:	bd80      	pop	{r7, pc}

08001434 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001438:	4802      	ldr	r0, [pc, #8]	; (8001444 <USART1_IRQHandler+0x10>)
 800143a:	f001 fda9 	bl	8002f90 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800143e:	bf00      	nop
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	2000012c 	.word	0x2000012c

08001448 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800144c:	4b06      	ldr	r3, [pc, #24]	; (8001468 <SystemInit+0x20>)
 800144e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001452:	4a05      	ldr	r2, [pc, #20]	; (8001468 <SystemInit+0x20>)
 8001454:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001458:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800145c:	bf00      	nop
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	e000ed00 	.word	0xe000ed00

0800146c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800146c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014a4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001470:	480d      	ldr	r0, [pc, #52]	; (80014a8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001472:	490e      	ldr	r1, [pc, #56]	; (80014ac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001474:	4a0e      	ldr	r2, [pc, #56]	; (80014b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001476:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001478:	e002      	b.n	8001480 <LoopCopyDataInit>

0800147a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800147a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800147c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800147e:	3304      	adds	r3, #4

08001480 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001480:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001482:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001484:	d3f9      	bcc.n	800147a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001486:	4a0b      	ldr	r2, [pc, #44]	; (80014b4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001488:	4c0b      	ldr	r4, [pc, #44]	; (80014b8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800148a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800148c:	e001      	b.n	8001492 <LoopFillZerobss>

0800148e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800148e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001490:	3204      	adds	r2, #4

08001492 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001492:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001494:	d3fb      	bcc.n	800148e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001496:	f7ff ffd7 	bl	8001448 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800149a:	f002 fbd7 	bl	8003c4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800149e:	f7ff fb57 	bl	8000b50 <main>
  bx  lr    
 80014a2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80014a4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80014a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014ac:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80014b0:	08003f04 	.word	0x08003f04
  ldr r2, =_sbss
 80014b4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80014b8:	20000178 	.word	0x20000178

080014bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014bc:	e7fe      	b.n	80014bc <ADC_IRQHandler>
	...

080014c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80014c4:	4b0e      	ldr	r3, [pc, #56]	; (8001500 <HAL_Init+0x40>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a0d      	ldr	r2, [pc, #52]	; (8001500 <HAL_Init+0x40>)
 80014ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80014d0:	4b0b      	ldr	r3, [pc, #44]	; (8001500 <HAL_Init+0x40>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a0a      	ldr	r2, [pc, #40]	; (8001500 <HAL_Init+0x40>)
 80014d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014dc:	4b08      	ldr	r3, [pc, #32]	; (8001500 <HAL_Init+0x40>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a07      	ldr	r2, [pc, #28]	; (8001500 <HAL_Init+0x40>)
 80014e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014e8:	2003      	movs	r0, #3
 80014ea:	f000 f94f 	bl	800178c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014ee:	200f      	movs	r0, #15
 80014f0:	f000 f808 	bl	8001504 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014f4:	f7ff fe42 	bl	800117c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014f8:	2300      	movs	r3, #0
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	40023c00 	.word	0x40023c00

08001504 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800150c:	4b12      	ldr	r3, [pc, #72]	; (8001558 <HAL_InitTick+0x54>)
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	4b12      	ldr	r3, [pc, #72]	; (800155c <HAL_InitTick+0x58>)
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	4619      	mov	r1, r3
 8001516:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800151a:	fbb3 f3f1 	udiv	r3, r3, r1
 800151e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001522:	4618      	mov	r0, r3
 8001524:	f000 f967 	bl	80017f6 <HAL_SYSTICK_Config>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	e00e      	b.n	8001550 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2b0f      	cmp	r3, #15
 8001536:	d80a      	bhi.n	800154e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001538:	2200      	movs	r2, #0
 800153a:	6879      	ldr	r1, [r7, #4]
 800153c:	f04f 30ff 	mov.w	r0, #4294967295
 8001540:	f000 f92f 	bl	80017a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001544:	4a06      	ldr	r2, [pc, #24]	; (8001560 <HAL_InitTick+0x5c>)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800154a:	2300      	movs	r3, #0
 800154c:	e000      	b.n	8001550 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
}
 8001550:	4618      	mov	r0, r3
 8001552:	3708      	adds	r7, #8
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	20000000 	.word	0x20000000
 800155c:	20000008 	.word	0x20000008
 8001560:	20000004 	.word	0x20000004

08001564 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001568:	4b06      	ldr	r3, [pc, #24]	; (8001584 <HAL_IncTick+0x20>)
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	461a      	mov	r2, r3
 800156e:	4b06      	ldr	r3, [pc, #24]	; (8001588 <HAL_IncTick+0x24>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4413      	add	r3, r2
 8001574:	4a04      	ldr	r2, [pc, #16]	; (8001588 <HAL_IncTick+0x24>)
 8001576:	6013      	str	r3, [r2, #0]
}
 8001578:	bf00      	nop
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	20000008 	.word	0x20000008
 8001588:	20000174 	.word	0x20000174

0800158c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  return uwTick;
 8001590:	4b03      	ldr	r3, [pc, #12]	; (80015a0 <HAL_GetTick+0x14>)
 8001592:	681b      	ldr	r3, [r3, #0]
}
 8001594:	4618      	mov	r0, r3
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr
 800159e:	bf00      	nop
 80015a0:	20000174 	.word	0x20000174

080015a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b084      	sub	sp, #16
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015ac:	f7ff ffee 	bl	800158c <HAL_GetTick>
 80015b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015bc:	d005      	beq.n	80015ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015be:	4b0a      	ldr	r3, [pc, #40]	; (80015e8 <HAL_Delay+0x44>)
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	461a      	mov	r2, r3
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	4413      	add	r3, r2
 80015c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80015ca:	bf00      	nop
 80015cc:	f7ff ffde 	bl	800158c <HAL_GetTick>
 80015d0:	4602      	mov	r2, r0
 80015d2:	68bb      	ldr	r3, [r7, #8]
 80015d4:	1ad3      	subs	r3, r2, r3
 80015d6:	68fa      	ldr	r2, [r7, #12]
 80015d8:	429a      	cmp	r2, r3
 80015da:	d8f7      	bhi.n	80015cc <HAL_Delay+0x28>
  {
  }
}
 80015dc:	bf00      	nop
 80015de:	bf00      	nop
 80015e0:	3710      	adds	r7, #16
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	20000008 	.word	0x20000008

080015ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b085      	sub	sp, #20
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	f003 0307 	and.w	r3, r3, #7
 80015fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015fc:	4b0c      	ldr	r3, [pc, #48]	; (8001630 <__NVIC_SetPriorityGrouping+0x44>)
 80015fe:	68db      	ldr	r3, [r3, #12]
 8001600:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001602:	68ba      	ldr	r2, [r7, #8]
 8001604:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001608:	4013      	ands	r3, r2
 800160a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001614:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001618:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800161c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800161e:	4a04      	ldr	r2, [pc, #16]	; (8001630 <__NVIC_SetPriorityGrouping+0x44>)
 8001620:	68bb      	ldr	r3, [r7, #8]
 8001622:	60d3      	str	r3, [r2, #12]
}
 8001624:	bf00      	nop
 8001626:	3714      	adds	r7, #20
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr
 8001630:	e000ed00 	.word	0xe000ed00

08001634 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001638:	4b04      	ldr	r3, [pc, #16]	; (800164c <__NVIC_GetPriorityGrouping+0x18>)
 800163a:	68db      	ldr	r3, [r3, #12]
 800163c:	0a1b      	lsrs	r3, r3, #8
 800163e:	f003 0307 	and.w	r3, r3, #7
}
 8001642:	4618      	mov	r0, r3
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr
 800164c:	e000ed00 	.word	0xe000ed00

08001650 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001650:	b480      	push	{r7}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0
 8001656:	4603      	mov	r3, r0
 8001658:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800165a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800165e:	2b00      	cmp	r3, #0
 8001660:	db0b      	blt.n	800167a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001662:	79fb      	ldrb	r3, [r7, #7]
 8001664:	f003 021f 	and.w	r2, r3, #31
 8001668:	4907      	ldr	r1, [pc, #28]	; (8001688 <__NVIC_EnableIRQ+0x38>)
 800166a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800166e:	095b      	lsrs	r3, r3, #5
 8001670:	2001      	movs	r0, #1
 8001672:	fa00 f202 	lsl.w	r2, r0, r2
 8001676:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800167a:	bf00      	nop
 800167c:	370c      	adds	r7, #12
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop
 8001688:	e000e100 	.word	0xe000e100

0800168c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
 8001692:	4603      	mov	r3, r0
 8001694:	6039      	str	r1, [r7, #0]
 8001696:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001698:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800169c:	2b00      	cmp	r3, #0
 800169e:	db0a      	blt.n	80016b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	b2da      	uxtb	r2, r3
 80016a4:	490c      	ldr	r1, [pc, #48]	; (80016d8 <__NVIC_SetPriority+0x4c>)
 80016a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016aa:	0112      	lsls	r2, r2, #4
 80016ac:	b2d2      	uxtb	r2, r2
 80016ae:	440b      	add	r3, r1
 80016b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016b4:	e00a      	b.n	80016cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	b2da      	uxtb	r2, r3
 80016ba:	4908      	ldr	r1, [pc, #32]	; (80016dc <__NVIC_SetPriority+0x50>)
 80016bc:	79fb      	ldrb	r3, [r7, #7]
 80016be:	f003 030f 	and.w	r3, r3, #15
 80016c2:	3b04      	subs	r3, #4
 80016c4:	0112      	lsls	r2, r2, #4
 80016c6:	b2d2      	uxtb	r2, r2
 80016c8:	440b      	add	r3, r1
 80016ca:	761a      	strb	r2, [r3, #24]
}
 80016cc:	bf00      	nop
 80016ce:	370c      	adds	r7, #12
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr
 80016d8:	e000e100 	.word	0xe000e100
 80016dc:	e000ed00 	.word	0xe000ed00

080016e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b089      	sub	sp, #36	; 0x24
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	60f8      	str	r0, [r7, #12]
 80016e8:	60b9      	str	r1, [r7, #8]
 80016ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	f003 0307 	and.w	r3, r3, #7
 80016f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016f4:	69fb      	ldr	r3, [r7, #28]
 80016f6:	f1c3 0307 	rsb	r3, r3, #7
 80016fa:	2b04      	cmp	r3, #4
 80016fc:	bf28      	it	cs
 80016fe:	2304      	movcs	r3, #4
 8001700:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001702:	69fb      	ldr	r3, [r7, #28]
 8001704:	3304      	adds	r3, #4
 8001706:	2b06      	cmp	r3, #6
 8001708:	d902      	bls.n	8001710 <NVIC_EncodePriority+0x30>
 800170a:	69fb      	ldr	r3, [r7, #28]
 800170c:	3b03      	subs	r3, #3
 800170e:	e000      	b.n	8001712 <NVIC_EncodePriority+0x32>
 8001710:	2300      	movs	r3, #0
 8001712:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001714:	f04f 32ff 	mov.w	r2, #4294967295
 8001718:	69bb      	ldr	r3, [r7, #24]
 800171a:	fa02 f303 	lsl.w	r3, r2, r3
 800171e:	43da      	mvns	r2, r3
 8001720:	68bb      	ldr	r3, [r7, #8]
 8001722:	401a      	ands	r2, r3
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001728:	f04f 31ff 	mov.w	r1, #4294967295
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	fa01 f303 	lsl.w	r3, r1, r3
 8001732:	43d9      	mvns	r1, r3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001738:	4313      	orrs	r3, r2
         );
}
 800173a:	4618      	mov	r0, r3
 800173c:	3724      	adds	r7, #36	; 0x24
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr
	...

08001748 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	3b01      	subs	r3, #1
 8001754:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001758:	d301      	bcc.n	800175e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800175a:	2301      	movs	r3, #1
 800175c:	e00f      	b.n	800177e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800175e:	4a0a      	ldr	r2, [pc, #40]	; (8001788 <SysTick_Config+0x40>)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	3b01      	subs	r3, #1
 8001764:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001766:	210f      	movs	r1, #15
 8001768:	f04f 30ff 	mov.w	r0, #4294967295
 800176c:	f7ff ff8e 	bl	800168c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001770:	4b05      	ldr	r3, [pc, #20]	; (8001788 <SysTick_Config+0x40>)
 8001772:	2200      	movs	r2, #0
 8001774:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001776:	4b04      	ldr	r3, [pc, #16]	; (8001788 <SysTick_Config+0x40>)
 8001778:	2207      	movs	r2, #7
 800177a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800177c:	2300      	movs	r3, #0
}
 800177e:	4618      	mov	r0, r3
 8001780:	3708      	adds	r7, #8
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	e000e010 	.word	0xe000e010

0800178c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001794:	6878      	ldr	r0, [r7, #4]
 8001796:	f7ff ff29 	bl	80015ec <__NVIC_SetPriorityGrouping>
}
 800179a:	bf00      	nop
 800179c:	3708      	adds	r7, #8
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}

080017a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017a2:	b580      	push	{r7, lr}
 80017a4:	b086      	sub	sp, #24
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	4603      	mov	r3, r0
 80017aa:	60b9      	str	r1, [r7, #8]
 80017ac:	607a      	str	r2, [r7, #4]
 80017ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017b0:	2300      	movs	r3, #0
 80017b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017b4:	f7ff ff3e 	bl	8001634 <__NVIC_GetPriorityGrouping>
 80017b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017ba:	687a      	ldr	r2, [r7, #4]
 80017bc:	68b9      	ldr	r1, [r7, #8]
 80017be:	6978      	ldr	r0, [r7, #20]
 80017c0:	f7ff ff8e 	bl	80016e0 <NVIC_EncodePriority>
 80017c4:	4602      	mov	r2, r0
 80017c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017ca:	4611      	mov	r1, r2
 80017cc:	4618      	mov	r0, r3
 80017ce:	f7ff ff5d 	bl	800168c <__NVIC_SetPriority>
}
 80017d2:	bf00      	nop
 80017d4:	3718      	adds	r7, #24
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}

080017da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017da:	b580      	push	{r7, lr}
 80017dc:	b082      	sub	sp, #8
 80017de:	af00      	add	r7, sp, #0
 80017e0:	4603      	mov	r3, r0
 80017e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e8:	4618      	mov	r0, r3
 80017ea:	f7ff ff31 	bl	8001650 <__NVIC_EnableIRQ>
}
 80017ee:	bf00      	nop
 80017f0:	3708      	adds	r7, #8
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}

080017f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017f6:	b580      	push	{r7, lr}
 80017f8:	b082      	sub	sp, #8
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017fe:	6878      	ldr	r0, [r7, #4]
 8001800:	f7ff ffa2 	bl	8001748 <SysTick_Config>
 8001804:	4603      	mov	r3, r0
}
 8001806:	4618      	mov	r0, r3
 8001808:	3708      	adds	r7, #8
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}

0800180e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800180e:	b580      	push	{r7, lr}
 8001810:	b084      	sub	sp, #16
 8001812:	af00      	add	r7, sp, #0
 8001814:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800181a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800181c:	f7ff feb6 	bl	800158c <HAL_GetTick>
 8001820:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001828:	b2db      	uxtb	r3, r3
 800182a:	2b02      	cmp	r3, #2
 800182c:	d008      	beq.n	8001840 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2280      	movs	r2, #128	; 0x80
 8001832:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2200      	movs	r2, #0
 8001838:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800183c:	2301      	movs	r3, #1
 800183e:	e052      	b.n	80018e6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f022 0216 	bic.w	r2, r2, #22
 800184e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	695a      	ldr	r2, [r3, #20]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800185e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001864:	2b00      	cmp	r3, #0
 8001866:	d103      	bne.n	8001870 <HAL_DMA_Abort+0x62>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800186c:	2b00      	cmp	r3, #0
 800186e:	d007      	beq.n	8001880 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f022 0208 	bic.w	r2, r2, #8
 800187e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f022 0201 	bic.w	r2, r2, #1
 800188e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001890:	e013      	b.n	80018ba <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001892:	f7ff fe7b 	bl	800158c <HAL_GetTick>
 8001896:	4602      	mov	r2, r0
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	1ad3      	subs	r3, r2, r3
 800189c:	2b05      	cmp	r3, #5
 800189e:	d90c      	bls.n	80018ba <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2220      	movs	r2, #32
 80018a4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2203      	movs	r2, #3
 80018aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2200      	movs	r2, #0
 80018b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80018b6:	2303      	movs	r3, #3
 80018b8:	e015      	b.n	80018e6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f003 0301 	and.w	r3, r3, #1
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d1e4      	bne.n	8001892 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018cc:	223f      	movs	r2, #63	; 0x3f
 80018ce:	409a      	lsls	r2, r3
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2201      	movs	r2, #1
 80018d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2200      	movs	r2, #0
 80018e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80018e4:	2300      	movs	r3, #0
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	3710      	adds	r7, #16
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}

080018ee <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80018ee:	b480      	push	{r7}
 80018f0:	b083      	sub	sp, #12
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	2b02      	cmp	r3, #2
 8001900:	d004      	beq.n	800190c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2280      	movs	r2, #128	; 0x80
 8001906:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001908:	2301      	movs	r3, #1
 800190a:	e00c      	b.n	8001926 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2205      	movs	r2, #5
 8001910:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f022 0201 	bic.w	r2, r2, #1
 8001922:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001924:	2300      	movs	r3, #0
}
 8001926:	4618      	mov	r0, r3
 8001928:	370c      	adds	r7, #12
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr
	...

08001934 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001934:	b480      	push	{r7}
 8001936:	b089      	sub	sp, #36	; 0x24
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
 800193c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800193e:	2300      	movs	r3, #0
 8001940:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001942:	2300      	movs	r3, #0
 8001944:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001946:	2300      	movs	r3, #0
 8001948:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800194a:	2300      	movs	r3, #0
 800194c:	61fb      	str	r3, [r7, #28]
 800194e:	e16b      	b.n	8001c28 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001950:	2201      	movs	r2, #1
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	fa02 f303 	lsl.w	r3, r2, r3
 8001958:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	697a      	ldr	r2, [r7, #20]
 8001960:	4013      	ands	r3, r2
 8001962:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001964:	693a      	ldr	r2, [r7, #16]
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	429a      	cmp	r2, r3
 800196a:	f040 815a 	bne.w	8001c22 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	f003 0303 	and.w	r3, r3, #3
 8001976:	2b01      	cmp	r3, #1
 8001978:	d005      	beq.n	8001986 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001982:	2b02      	cmp	r3, #2
 8001984:	d130      	bne.n	80019e8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800198c:	69fb      	ldr	r3, [r7, #28]
 800198e:	005b      	lsls	r3, r3, #1
 8001990:	2203      	movs	r2, #3
 8001992:	fa02 f303 	lsl.w	r3, r2, r3
 8001996:	43db      	mvns	r3, r3
 8001998:	69ba      	ldr	r2, [r7, #24]
 800199a:	4013      	ands	r3, r2
 800199c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	68da      	ldr	r2, [r3, #12]
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	005b      	lsls	r3, r3, #1
 80019a6:	fa02 f303 	lsl.w	r3, r2, r3
 80019aa:	69ba      	ldr	r2, [r7, #24]
 80019ac:	4313      	orrs	r3, r2
 80019ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	69ba      	ldr	r2, [r7, #24]
 80019b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019bc:	2201      	movs	r2, #1
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	fa02 f303 	lsl.w	r3, r2, r3
 80019c4:	43db      	mvns	r3, r3
 80019c6:	69ba      	ldr	r2, [r7, #24]
 80019c8:	4013      	ands	r3, r2
 80019ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	091b      	lsrs	r3, r3, #4
 80019d2:	f003 0201 	and.w	r2, r3, #1
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	fa02 f303 	lsl.w	r3, r2, r3
 80019dc:	69ba      	ldr	r2, [r7, #24]
 80019de:	4313      	orrs	r3, r2
 80019e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	69ba      	ldr	r2, [r7, #24]
 80019e6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f003 0303 	and.w	r3, r3, #3
 80019f0:	2b03      	cmp	r3, #3
 80019f2:	d017      	beq.n	8001a24 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	005b      	lsls	r3, r3, #1
 80019fe:	2203      	movs	r2, #3
 8001a00:	fa02 f303 	lsl.w	r3, r2, r3
 8001a04:	43db      	mvns	r3, r3
 8001a06:	69ba      	ldr	r2, [r7, #24]
 8001a08:	4013      	ands	r3, r2
 8001a0a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	689a      	ldr	r2, [r3, #8]
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	005b      	lsls	r3, r3, #1
 8001a14:	fa02 f303 	lsl.w	r3, r2, r3
 8001a18:	69ba      	ldr	r2, [r7, #24]
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	69ba      	ldr	r2, [r7, #24]
 8001a22:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f003 0303 	and.w	r3, r3, #3
 8001a2c:	2b02      	cmp	r3, #2
 8001a2e:	d123      	bne.n	8001a78 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a30:	69fb      	ldr	r3, [r7, #28]
 8001a32:	08da      	lsrs	r2, r3, #3
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	3208      	adds	r2, #8
 8001a38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	f003 0307 	and.w	r3, r3, #7
 8001a44:	009b      	lsls	r3, r3, #2
 8001a46:	220f      	movs	r2, #15
 8001a48:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4c:	43db      	mvns	r3, r3
 8001a4e:	69ba      	ldr	r2, [r7, #24]
 8001a50:	4013      	ands	r3, r2
 8001a52:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	691a      	ldr	r2, [r3, #16]
 8001a58:	69fb      	ldr	r3, [r7, #28]
 8001a5a:	f003 0307 	and.w	r3, r3, #7
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	fa02 f303 	lsl.w	r3, r2, r3
 8001a64:	69ba      	ldr	r2, [r7, #24]
 8001a66:	4313      	orrs	r3, r2
 8001a68:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	08da      	lsrs	r2, r3, #3
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	3208      	adds	r2, #8
 8001a72:	69b9      	ldr	r1, [r7, #24]
 8001a74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	005b      	lsls	r3, r3, #1
 8001a82:	2203      	movs	r2, #3
 8001a84:	fa02 f303 	lsl.w	r3, r2, r3
 8001a88:	43db      	mvns	r3, r3
 8001a8a:	69ba      	ldr	r2, [r7, #24]
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	f003 0203 	and.w	r2, r3, #3
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	005b      	lsls	r3, r3, #1
 8001a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa0:	69ba      	ldr	r2, [r7, #24]
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	69ba      	ldr	r2, [r7, #24]
 8001aaa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	f000 80b4 	beq.w	8001c22 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aba:	2300      	movs	r3, #0
 8001abc:	60fb      	str	r3, [r7, #12]
 8001abe:	4b60      	ldr	r3, [pc, #384]	; (8001c40 <HAL_GPIO_Init+0x30c>)
 8001ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ac2:	4a5f      	ldr	r2, [pc, #380]	; (8001c40 <HAL_GPIO_Init+0x30c>)
 8001ac4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ac8:	6453      	str	r3, [r2, #68]	; 0x44
 8001aca:	4b5d      	ldr	r3, [pc, #372]	; (8001c40 <HAL_GPIO_Init+0x30c>)
 8001acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ace:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ad2:	60fb      	str	r3, [r7, #12]
 8001ad4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ad6:	4a5b      	ldr	r2, [pc, #364]	; (8001c44 <HAL_GPIO_Init+0x310>)
 8001ad8:	69fb      	ldr	r3, [r7, #28]
 8001ada:	089b      	lsrs	r3, r3, #2
 8001adc:	3302      	adds	r3, #2
 8001ade:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ae2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ae4:	69fb      	ldr	r3, [r7, #28]
 8001ae6:	f003 0303 	and.w	r3, r3, #3
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	220f      	movs	r2, #15
 8001aee:	fa02 f303 	lsl.w	r3, r2, r3
 8001af2:	43db      	mvns	r3, r3
 8001af4:	69ba      	ldr	r2, [r7, #24]
 8001af6:	4013      	ands	r3, r2
 8001af8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	4a52      	ldr	r2, [pc, #328]	; (8001c48 <HAL_GPIO_Init+0x314>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d02b      	beq.n	8001b5a <HAL_GPIO_Init+0x226>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	4a51      	ldr	r2, [pc, #324]	; (8001c4c <HAL_GPIO_Init+0x318>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d025      	beq.n	8001b56 <HAL_GPIO_Init+0x222>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4a50      	ldr	r2, [pc, #320]	; (8001c50 <HAL_GPIO_Init+0x31c>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d01f      	beq.n	8001b52 <HAL_GPIO_Init+0x21e>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	4a4f      	ldr	r2, [pc, #316]	; (8001c54 <HAL_GPIO_Init+0x320>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d019      	beq.n	8001b4e <HAL_GPIO_Init+0x21a>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	4a4e      	ldr	r2, [pc, #312]	; (8001c58 <HAL_GPIO_Init+0x324>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d013      	beq.n	8001b4a <HAL_GPIO_Init+0x216>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4a4d      	ldr	r2, [pc, #308]	; (8001c5c <HAL_GPIO_Init+0x328>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d00d      	beq.n	8001b46 <HAL_GPIO_Init+0x212>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4a4c      	ldr	r2, [pc, #304]	; (8001c60 <HAL_GPIO_Init+0x32c>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d007      	beq.n	8001b42 <HAL_GPIO_Init+0x20e>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4a4b      	ldr	r2, [pc, #300]	; (8001c64 <HAL_GPIO_Init+0x330>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d101      	bne.n	8001b3e <HAL_GPIO_Init+0x20a>
 8001b3a:	2307      	movs	r3, #7
 8001b3c:	e00e      	b.n	8001b5c <HAL_GPIO_Init+0x228>
 8001b3e:	2308      	movs	r3, #8
 8001b40:	e00c      	b.n	8001b5c <HAL_GPIO_Init+0x228>
 8001b42:	2306      	movs	r3, #6
 8001b44:	e00a      	b.n	8001b5c <HAL_GPIO_Init+0x228>
 8001b46:	2305      	movs	r3, #5
 8001b48:	e008      	b.n	8001b5c <HAL_GPIO_Init+0x228>
 8001b4a:	2304      	movs	r3, #4
 8001b4c:	e006      	b.n	8001b5c <HAL_GPIO_Init+0x228>
 8001b4e:	2303      	movs	r3, #3
 8001b50:	e004      	b.n	8001b5c <HAL_GPIO_Init+0x228>
 8001b52:	2302      	movs	r3, #2
 8001b54:	e002      	b.n	8001b5c <HAL_GPIO_Init+0x228>
 8001b56:	2301      	movs	r3, #1
 8001b58:	e000      	b.n	8001b5c <HAL_GPIO_Init+0x228>
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	69fa      	ldr	r2, [r7, #28]
 8001b5e:	f002 0203 	and.w	r2, r2, #3
 8001b62:	0092      	lsls	r2, r2, #2
 8001b64:	4093      	lsls	r3, r2
 8001b66:	69ba      	ldr	r2, [r7, #24]
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b6c:	4935      	ldr	r1, [pc, #212]	; (8001c44 <HAL_GPIO_Init+0x310>)
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	089b      	lsrs	r3, r3, #2
 8001b72:	3302      	adds	r3, #2
 8001b74:	69ba      	ldr	r2, [r7, #24]
 8001b76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b7a:	4b3b      	ldr	r3, [pc, #236]	; (8001c68 <HAL_GPIO_Init+0x334>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	43db      	mvns	r3, r3
 8001b84:	69ba      	ldr	r2, [r7, #24]
 8001b86:	4013      	ands	r3, r2
 8001b88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d003      	beq.n	8001b9e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001b96:	69ba      	ldr	r2, [r7, #24]
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b9e:	4a32      	ldr	r2, [pc, #200]	; (8001c68 <HAL_GPIO_Init+0x334>)
 8001ba0:	69bb      	ldr	r3, [r7, #24]
 8001ba2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001ba4:	4b30      	ldr	r3, [pc, #192]	; (8001c68 <HAL_GPIO_Init+0x334>)
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	43db      	mvns	r3, r3
 8001bae:	69ba      	ldr	r2, [r7, #24]
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d003      	beq.n	8001bc8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001bc0:	69ba      	ldr	r2, [r7, #24]
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001bc8:	4a27      	ldr	r2, [pc, #156]	; (8001c68 <HAL_GPIO_Init+0x334>)
 8001bca:	69bb      	ldr	r3, [r7, #24]
 8001bcc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bce:	4b26      	ldr	r3, [pc, #152]	; (8001c68 <HAL_GPIO_Init+0x334>)
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	43db      	mvns	r3, r3
 8001bd8:	69ba      	ldr	r2, [r7, #24]
 8001bda:	4013      	ands	r3, r2
 8001bdc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d003      	beq.n	8001bf2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001bea:	69ba      	ldr	r2, [r7, #24]
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001bf2:	4a1d      	ldr	r2, [pc, #116]	; (8001c68 <HAL_GPIO_Init+0x334>)
 8001bf4:	69bb      	ldr	r3, [r7, #24]
 8001bf6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001bf8:	4b1b      	ldr	r3, [pc, #108]	; (8001c68 <HAL_GPIO_Init+0x334>)
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	43db      	mvns	r3, r3
 8001c02:	69ba      	ldr	r2, [r7, #24]
 8001c04:	4013      	ands	r3, r2
 8001c06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d003      	beq.n	8001c1c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001c14:	69ba      	ldr	r2, [r7, #24]
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c1c:	4a12      	ldr	r2, [pc, #72]	; (8001c68 <HAL_GPIO_Init+0x334>)
 8001c1e:	69bb      	ldr	r3, [r7, #24]
 8001c20:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	3301      	adds	r3, #1
 8001c26:	61fb      	str	r3, [r7, #28]
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	2b0f      	cmp	r3, #15
 8001c2c:	f67f ae90 	bls.w	8001950 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c30:	bf00      	nop
 8001c32:	bf00      	nop
 8001c34:	3724      	adds	r7, #36	; 0x24
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	40023800 	.word	0x40023800
 8001c44:	40013800 	.word	0x40013800
 8001c48:	40020000 	.word	0x40020000
 8001c4c:	40020400 	.word	0x40020400
 8001c50:	40020800 	.word	0x40020800
 8001c54:	40020c00 	.word	0x40020c00
 8001c58:	40021000 	.word	0x40021000
 8001c5c:	40021400 	.word	0x40021400
 8001c60:	40021800 	.word	0x40021800
 8001c64:	40021c00 	.word	0x40021c00
 8001c68:	40013c00 	.word	0x40013c00

08001c6c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b086      	sub	sp, #24
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d101      	bne.n	8001c7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e264      	b.n	8002148 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 0301 	and.w	r3, r3, #1
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d075      	beq.n	8001d76 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c8a:	4ba3      	ldr	r3, [pc, #652]	; (8001f18 <HAL_RCC_OscConfig+0x2ac>)
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	f003 030c 	and.w	r3, r3, #12
 8001c92:	2b04      	cmp	r3, #4
 8001c94:	d00c      	beq.n	8001cb0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c96:	4ba0      	ldr	r3, [pc, #640]	; (8001f18 <HAL_RCC_OscConfig+0x2ac>)
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c9e:	2b08      	cmp	r3, #8
 8001ca0:	d112      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ca2:	4b9d      	ldr	r3, [pc, #628]	; (8001f18 <HAL_RCC_OscConfig+0x2ac>)
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001caa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001cae:	d10b      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cb0:	4b99      	ldr	r3, [pc, #612]	; (8001f18 <HAL_RCC_OscConfig+0x2ac>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d05b      	beq.n	8001d74 <HAL_RCC_OscConfig+0x108>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d157      	bne.n	8001d74 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	e23f      	b.n	8002148 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cd0:	d106      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x74>
 8001cd2:	4b91      	ldr	r3, [pc, #580]	; (8001f18 <HAL_RCC_OscConfig+0x2ac>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a90      	ldr	r2, [pc, #576]	; (8001f18 <HAL_RCC_OscConfig+0x2ac>)
 8001cd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cdc:	6013      	str	r3, [r2, #0]
 8001cde:	e01d      	b.n	8001d1c <HAL_RCC_OscConfig+0xb0>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ce8:	d10c      	bne.n	8001d04 <HAL_RCC_OscConfig+0x98>
 8001cea:	4b8b      	ldr	r3, [pc, #556]	; (8001f18 <HAL_RCC_OscConfig+0x2ac>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a8a      	ldr	r2, [pc, #552]	; (8001f18 <HAL_RCC_OscConfig+0x2ac>)
 8001cf0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cf4:	6013      	str	r3, [r2, #0]
 8001cf6:	4b88      	ldr	r3, [pc, #544]	; (8001f18 <HAL_RCC_OscConfig+0x2ac>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a87      	ldr	r2, [pc, #540]	; (8001f18 <HAL_RCC_OscConfig+0x2ac>)
 8001cfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d00:	6013      	str	r3, [r2, #0]
 8001d02:	e00b      	b.n	8001d1c <HAL_RCC_OscConfig+0xb0>
 8001d04:	4b84      	ldr	r3, [pc, #528]	; (8001f18 <HAL_RCC_OscConfig+0x2ac>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a83      	ldr	r2, [pc, #524]	; (8001f18 <HAL_RCC_OscConfig+0x2ac>)
 8001d0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d0e:	6013      	str	r3, [r2, #0]
 8001d10:	4b81      	ldr	r3, [pc, #516]	; (8001f18 <HAL_RCC_OscConfig+0x2ac>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a80      	ldr	r2, [pc, #512]	; (8001f18 <HAL_RCC_OscConfig+0x2ac>)
 8001d16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d013      	beq.n	8001d4c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d24:	f7ff fc32 	bl	800158c <HAL_GetTick>
 8001d28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d2a:	e008      	b.n	8001d3e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d2c:	f7ff fc2e 	bl	800158c <HAL_GetTick>
 8001d30:	4602      	mov	r2, r0
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	2b64      	cmp	r3, #100	; 0x64
 8001d38:	d901      	bls.n	8001d3e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	e204      	b.n	8002148 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d3e:	4b76      	ldr	r3, [pc, #472]	; (8001f18 <HAL_RCC_OscConfig+0x2ac>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d0f0      	beq.n	8001d2c <HAL_RCC_OscConfig+0xc0>
 8001d4a:	e014      	b.n	8001d76 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d4c:	f7ff fc1e 	bl	800158c <HAL_GetTick>
 8001d50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d52:	e008      	b.n	8001d66 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d54:	f7ff fc1a 	bl	800158c <HAL_GetTick>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	1ad3      	subs	r3, r2, r3
 8001d5e:	2b64      	cmp	r3, #100	; 0x64
 8001d60:	d901      	bls.n	8001d66 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d62:	2303      	movs	r3, #3
 8001d64:	e1f0      	b.n	8002148 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d66:	4b6c      	ldr	r3, [pc, #432]	; (8001f18 <HAL_RCC_OscConfig+0x2ac>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d1f0      	bne.n	8001d54 <HAL_RCC_OscConfig+0xe8>
 8001d72:	e000      	b.n	8001d76 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 0302 	and.w	r3, r3, #2
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d063      	beq.n	8001e4a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d82:	4b65      	ldr	r3, [pc, #404]	; (8001f18 <HAL_RCC_OscConfig+0x2ac>)
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	f003 030c 	and.w	r3, r3, #12
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d00b      	beq.n	8001da6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d8e:	4b62      	ldr	r3, [pc, #392]	; (8001f18 <HAL_RCC_OscConfig+0x2ac>)
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d96:	2b08      	cmp	r3, #8
 8001d98:	d11c      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d9a:	4b5f      	ldr	r3, [pc, #380]	; (8001f18 <HAL_RCC_OscConfig+0x2ac>)
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d116      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001da6:	4b5c      	ldr	r3, [pc, #368]	; (8001f18 <HAL_RCC_OscConfig+0x2ac>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 0302 	and.w	r3, r3, #2
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d005      	beq.n	8001dbe <HAL_RCC_OscConfig+0x152>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	68db      	ldr	r3, [r3, #12]
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d001      	beq.n	8001dbe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e1c4      	b.n	8002148 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dbe:	4b56      	ldr	r3, [pc, #344]	; (8001f18 <HAL_RCC_OscConfig+0x2ac>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	691b      	ldr	r3, [r3, #16]
 8001dca:	00db      	lsls	r3, r3, #3
 8001dcc:	4952      	ldr	r1, [pc, #328]	; (8001f18 <HAL_RCC_OscConfig+0x2ac>)
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dd2:	e03a      	b.n	8001e4a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d020      	beq.n	8001e1e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ddc:	4b4f      	ldr	r3, [pc, #316]	; (8001f1c <HAL_RCC_OscConfig+0x2b0>)
 8001dde:	2201      	movs	r2, #1
 8001de0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001de2:	f7ff fbd3 	bl	800158c <HAL_GetTick>
 8001de6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001de8:	e008      	b.n	8001dfc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dea:	f7ff fbcf 	bl	800158c <HAL_GetTick>
 8001dee:	4602      	mov	r2, r0
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	1ad3      	subs	r3, r2, r3
 8001df4:	2b02      	cmp	r3, #2
 8001df6:	d901      	bls.n	8001dfc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001df8:	2303      	movs	r3, #3
 8001dfa:	e1a5      	b.n	8002148 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dfc:	4b46      	ldr	r3, [pc, #280]	; (8001f18 <HAL_RCC_OscConfig+0x2ac>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f003 0302 	and.w	r3, r3, #2
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d0f0      	beq.n	8001dea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e08:	4b43      	ldr	r3, [pc, #268]	; (8001f18 <HAL_RCC_OscConfig+0x2ac>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	691b      	ldr	r3, [r3, #16]
 8001e14:	00db      	lsls	r3, r3, #3
 8001e16:	4940      	ldr	r1, [pc, #256]	; (8001f18 <HAL_RCC_OscConfig+0x2ac>)
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	600b      	str	r3, [r1, #0]
 8001e1c:	e015      	b.n	8001e4a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e1e:	4b3f      	ldr	r3, [pc, #252]	; (8001f1c <HAL_RCC_OscConfig+0x2b0>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e24:	f7ff fbb2 	bl	800158c <HAL_GetTick>
 8001e28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e2a:	e008      	b.n	8001e3e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e2c:	f7ff fbae 	bl	800158c <HAL_GetTick>
 8001e30:	4602      	mov	r2, r0
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	d901      	bls.n	8001e3e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e184      	b.n	8002148 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e3e:	4b36      	ldr	r3, [pc, #216]	; (8001f18 <HAL_RCC_OscConfig+0x2ac>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 0302 	and.w	r3, r3, #2
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d1f0      	bne.n	8001e2c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 0308 	and.w	r3, r3, #8
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d030      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	695b      	ldr	r3, [r3, #20]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d016      	beq.n	8001e8c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e5e:	4b30      	ldr	r3, [pc, #192]	; (8001f20 <HAL_RCC_OscConfig+0x2b4>)
 8001e60:	2201      	movs	r2, #1
 8001e62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e64:	f7ff fb92 	bl	800158c <HAL_GetTick>
 8001e68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e6a:	e008      	b.n	8001e7e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e6c:	f7ff fb8e 	bl	800158c <HAL_GetTick>
 8001e70:	4602      	mov	r2, r0
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	2b02      	cmp	r3, #2
 8001e78:	d901      	bls.n	8001e7e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	e164      	b.n	8002148 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e7e:	4b26      	ldr	r3, [pc, #152]	; (8001f18 <HAL_RCC_OscConfig+0x2ac>)
 8001e80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e82:	f003 0302 	and.w	r3, r3, #2
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d0f0      	beq.n	8001e6c <HAL_RCC_OscConfig+0x200>
 8001e8a:	e015      	b.n	8001eb8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e8c:	4b24      	ldr	r3, [pc, #144]	; (8001f20 <HAL_RCC_OscConfig+0x2b4>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e92:	f7ff fb7b 	bl	800158c <HAL_GetTick>
 8001e96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e98:	e008      	b.n	8001eac <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e9a:	f7ff fb77 	bl	800158c <HAL_GetTick>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	1ad3      	subs	r3, r2, r3
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	d901      	bls.n	8001eac <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001ea8:	2303      	movs	r3, #3
 8001eaa:	e14d      	b.n	8002148 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001eac:	4b1a      	ldr	r3, [pc, #104]	; (8001f18 <HAL_RCC_OscConfig+0x2ac>)
 8001eae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001eb0:	f003 0302 	and.w	r3, r3, #2
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d1f0      	bne.n	8001e9a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0304 	and.w	r3, r3, #4
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	f000 80a0 	beq.w	8002006 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001eca:	4b13      	ldr	r3, [pc, #76]	; (8001f18 <HAL_RCC_OscConfig+0x2ac>)
 8001ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ece:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d10f      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	60bb      	str	r3, [r7, #8]
 8001eda:	4b0f      	ldr	r3, [pc, #60]	; (8001f18 <HAL_RCC_OscConfig+0x2ac>)
 8001edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ede:	4a0e      	ldr	r2, [pc, #56]	; (8001f18 <HAL_RCC_OscConfig+0x2ac>)
 8001ee0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ee4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ee6:	4b0c      	ldr	r3, [pc, #48]	; (8001f18 <HAL_RCC_OscConfig+0x2ac>)
 8001ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eee:	60bb      	str	r3, [r7, #8]
 8001ef0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ef6:	4b0b      	ldr	r3, [pc, #44]	; (8001f24 <HAL_RCC_OscConfig+0x2b8>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d121      	bne.n	8001f46 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f02:	4b08      	ldr	r3, [pc, #32]	; (8001f24 <HAL_RCC_OscConfig+0x2b8>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a07      	ldr	r2, [pc, #28]	; (8001f24 <HAL_RCC_OscConfig+0x2b8>)
 8001f08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f0e:	f7ff fb3d 	bl	800158c <HAL_GetTick>
 8001f12:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f14:	e011      	b.n	8001f3a <HAL_RCC_OscConfig+0x2ce>
 8001f16:	bf00      	nop
 8001f18:	40023800 	.word	0x40023800
 8001f1c:	42470000 	.word	0x42470000
 8001f20:	42470e80 	.word	0x42470e80
 8001f24:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f28:	f7ff fb30 	bl	800158c <HAL_GetTick>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	2b02      	cmp	r3, #2
 8001f34:	d901      	bls.n	8001f3a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001f36:	2303      	movs	r3, #3
 8001f38:	e106      	b.n	8002148 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f3a:	4b85      	ldr	r3, [pc, #532]	; (8002150 <HAL_RCC_OscConfig+0x4e4>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d0f0      	beq.n	8001f28 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d106      	bne.n	8001f5c <HAL_RCC_OscConfig+0x2f0>
 8001f4e:	4b81      	ldr	r3, [pc, #516]	; (8002154 <HAL_RCC_OscConfig+0x4e8>)
 8001f50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f52:	4a80      	ldr	r2, [pc, #512]	; (8002154 <HAL_RCC_OscConfig+0x4e8>)
 8001f54:	f043 0301 	orr.w	r3, r3, #1
 8001f58:	6713      	str	r3, [r2, #112]	; 0x70
 8001f5a:	e01c      	b.n	8001f96 <HAL_RCC_OscConfig+0x32a>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	2b05      	cmp	r3, #5
 8001f62:	d10c      	bne.n	8001f7e <HAL_RCC_OscConfig+0x312>
 8001f64:	4b7b      	ldr	r3, [pc, #492]	; (8002154 <HAL_RCC_OscConfig+0x4e8>)
 8001f66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f68:	4a7a      	ldr	r2, [pc, #488]	; (8002154 <HAL_RCC_OscConfig+0x4e8>)
 8001f6a:	f043 0304 	orr.w	r3, r3, #4
 8001f6e:	6713      	str	r3, [r2, #112]	; 0x70
 8001f70:	4b78      	ldr	r3, [pc, #480]	; (8002154 <HAL_RCC_OscConfig+0x4e8>)
 8001f72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f74:	4a77      	ldr	r2, [pc, #476]	; (8002154 <HAL_RCC_OscConfig+0x4e8>)
 8001f76:	f043 0301 	orr.w	r3, r3, #1
 8001f7a:	6713      	str	r3, [r2, #112]	; 0x70
 8001f7c:	e00b      	b.n	8001f96 <HAL_RCC_OscConfig+0x32a>
 8001f7e:	4b75      	ldr	r3, [pc, #468]	; (8002154 <HAL_RCC_OscConfig+0x4e8>)
 8001f80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f82:	4a74      	ldr	r2, [pc, #464]	; (8002154 <HAL_RCC_OscConfig+0x4e8>)
 8001f84:	f023 0301 	bic.w	r3, r3, #1
 8001f88:	6713      	str	r3, [r2, #112]	; 0x70
 8001f8a:	4b72      	ldr	r3, [pc, #456]	; (8002154 <HAL_RCC_OscConfig+0x4e8>)
 8001f8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f8e:	4a71      	ldr	r2, [pc, #452]	; (8002154 <HAL_RCC_OscConfig+0x4e8>)
 8001f90:	f023 0304 	bic.w	r3, r3, #4
 8001f94:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d015      	beq.n	8001fca <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f9e:	f7ff faf5 	bl	800158c <HAL_GetTick>
 8001fa2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fa4:	e00a      	b.n	8001fbc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fa6:	f7ff faf1 	bl	800158c <HAL_GetTick>
 8001faa:	4602      	mov	r2, r0
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	1ad3      	subs	r3, r2, r3
 8001fb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d901      	bls.n	8001fbc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001fb8:	2303      	movs	r3, #3
 8001fba:	e0c5      	b.n	8002148 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fbc:	4b65      	ldr	r3, [pc, #404]	; (8002154 <HAL_RCC_OscConfig+0x4e8>)
 8001fbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fc0:	f003 0302 	and.w	r3, r3, #2
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d0ee      	beq.n	8001fa6 <HAL_RCC_OscConfig+0x33a>
 8001fc8:	e014      	b.n	8001ff4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fca:	f7ff fadf 	bl	800158c <HAL_GetTick>
 8001fce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fd0:	e00a      	b.n	8001fe8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fd2:	f7ff fadb 	bl	800158c <HAL_GetTick>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	1ad3      	subs	r3, r2, r3
 8001fdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d901      	bls.n	8001fe8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001fe4:	2303      	movs	r3, #3
 8001fe6:	e0af      	b.n	8002148 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fe8:	4b5a      	ldr	r3, [pc, #360]	; (8002154 <HAL_RCC_OscConfig+0x4e8>)
 8001fea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fec:	f003 0302 	and.w	r3, r3, #2
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d1ee      	bne.n	8001fd2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ff4:	7dfb      	ldrb	r3, [r7, #23]
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d105      	bne.n	8002006 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ffa:	4b56      	ldr	r3, [pc, #344]	; (8002154 <HAL_RCC_OscConfig+0x4e8>)
 8001ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffe:	4a55      	ldr	r2, [pc, #340]	; (8002154 <HAL_RCC_OscConfig+0x4e8>)
 8002000:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002004:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	699b      	ldr	r3, [r3, #24]
 800200a:	2b00      	cmp	r3, #0
 800200c:	f000 809b 	beq.w	8002146 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002010:	4b50      	ldr	r3, [pc, #320]	; (8002154 <HAL_RCC_OscConfig+0x4e8>)
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	f003 030c 	and.w	r3, r3, #12
 8002018:	2b08      	cmp	r3, #8
 800201a:	d05c      	beq.n	80020d6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	699b      	ldr	r3, [r3, #24]
 8002020:	2b02      	cmp	r3, #2
 8002022:	d141      	bne.n	80020a8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002024:	4b4c      	ldr	r3, [pc, #304]	; (8002158 <HAL_RCC_OscConfig+0x4ec>)
 8002026:	2200      	movs	r2, #0
 8002028:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800202a:	f7ff faaf 	bl	800158c <HAL_GetTick>
 800202e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002030:	e008      	b.n	8002044 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002032:	f7ff faab 	bl	800158c <HAL_GetTick>
 8002036:	4602      	mov	r2, r0
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	1ad3      	subs	r3, r2, r3
 800203c:	2b02      	cmp	r3, #2
 800203e:	d901      	bls.n	8002044 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002040:	2303      	movs	r3, #3
 8002042:	e081      	b.n	8002148 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002044:	4b43      	ldr	r3, [pc, #268]	; (8002154 <HAL_RCC_OscConfig+0x4e8>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800204c:	2b00      	cmp	r3, #0
 800204e:	d1f0      	bne.n	8002032 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	69da      	ldr	r2, [r3, #28]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6a1b      	ldr	r3, [r3, #32]
 8002058:	431a      	orrs	r2, r3
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800205e:	019b      	lsls	r3, r3, #6
 8002060:	431a      	orrs	r2, r3
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002066:	085b      	lsrs	r3, r3, #1
 8002068:	3b01      	subs	r3, #1
 800206a:	041b      	lsls	r3, r3, #16
 800206c:	431a      	orrs	r2, r3
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002072:	061b      	lsls	r3, r3, #24
 8002074:	4937      	ldr	r1, [pc, #220]	; (8002154 <HAL_RCC_OscConfig+0x4e8>)
 8002076:	4313      	orrs	r3, r2
 8002078:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800207a:	4b37      	ldr	r3, [pc, #220]	; (8002158 <HAL_RCC_OscConfig+0x4ec>)
 800207c:	2201      	movs	r2, #1
 800207e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002080:	f7ff fa84 	bl	800158c <HAL_GetTick>
 8002084:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002086:	e008      	b.n	800209a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002088:	f7ff fa80 	bl	800158c <HAL_GetTick>
 800208c:	4602      	mov	r2, r0
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	2b02      	cmp	r3, #2
 8002094:	d901      	bls.n	800209a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002096:	2303      	movs	r3, #3
 8002098:	e056      	b.n	8002148 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800209a:	4b2e      	ldr	r3, [pc, #184]	; (8002154 <HAL_RCC_OscConfig+0x4e8>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d0f0      	beq.n	8002088 <HAL_RCC_OscConfig+0x41c>
 80020a6:	e04e      	b.n	8002146 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020a8:	4b2b      	ldr	r3, [pc, #172]	; (8002158 <HAL_RCC_OscConfig+0x4ec>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ae:	f7ff fa6d 	bl	800158c <HAL_GetTick>
 80020b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020b4:	e008      	b.n	80020c8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020b6:	f7ff fa69 	bl	800158c <HAL_GetTick>
 80020ba:	4602      	mov	r2, r0
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	1ad3      	subs	r3, r2, r3
 80020c0:	2b02      	cmp	r3, #2
 80020c2:	d901      	bls.n	80020c8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80020c4:	2303      	movs	r3, #3
 80020c6:	e03f      	b.n	8002148 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020c8:	4b22      	ldr	r3, [pc, #136]	; (8002154 <HAL_RCC_OscConfig+0x4e8>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d1f0      	bne.n	80020b6 <HAL_RCC_OscConfig+0x44a>
 80020d4:	e037      	b.n	8002146 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	699b      	ldr	r3, [r3, #24]
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d101      	bne.n	80020e2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e032      	b.n	8002148 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80020e2:	4b1c      	ldr	r3, [pc, #112]	; (8002154 <HAL_RCC_OscConfig+0x4e8>)
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	699b      	ldr	r3, [r3, #24]
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d028      	beq.n	8002142 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020fa:	429a      	cmp	r2, r3
 80020fc:	d121      	bne.n	8002142 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002108:	429a      	cmp	r2, r3
 800210a:	d11a      	bne.n	8002142 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800210c:	68fa      	ldr	r2, [r7, #12]
 800210e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002112:	4013      	ands	r3, r2
 8002114:	687a      	ldr	r2, [r7, #4]
 8002116:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002118:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800211a:	4293      	cmp	r3, r2
 800211c:	d111      	bne.n	8002142 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002128:	085b      	lsrs	r3, r3, #1
 800212a:	3b01      	subs	r3, #1
 800212c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800212e:	429a      	cmp	r2, r3
 8002130:	d107      	bne.n	8002142 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800213c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800213e:	429a      	cmp	r2, r3
 8002140:	d001      	beq.n	8002146 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e000      	b.n	8002148 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002146:	2300      	movs	r3, #0
}
 8002148:	4618      	mov	r0, r3
 800214a:	3718      	adds	r7, #24
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}
 8002150:	40007000 	.word	0x40007000
 8002154:	40023800 	.word	0x40023800
 8002158:	42470060 	.word	0x42470060

0800215c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b084      	sub	sp, #16
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
 8002164:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d101      	bne.n	8002170 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	e0cc      	b.n	800230a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002170:	4b68      	ldr	r3, [pc, #416]	; (8002314 <HAL_RCC_ClockConfig+0x1b8>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 0307 	and.w	r3, r3, #7
 8002178:	683a      	ldr	r2, [r7, #0]
 800217a:	429a      	cmp	r2, r3
 800217c:	d90c      	bls.n	8002198 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800217e:	4b65      	ldr	r3, [pc, #404]	; (8002314 <HAL_RCC_ClockConfig+0x1b8>)
 8002180:	683a      	ldr	r2, [r7, #0]
 8002182:	b2d2      	uxtb	r2, r2
 8002184:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002186:	4b63      	ldr	r3, [pc, #396]	; (8002314 <HAL_RCC_ClockConfig+0x1b8>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 0307 	and.w	r3, r3, #7
 800218e:	683a      	ldr	r2, [r7, #0]
 8002190:	429a      	cmp	r2, r3
 8002192:	d001      	beq.n	8002198 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	e0b8      	b.n	800230a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f003 0302 	and.w	r3, r3, #2
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d020      	beq.n	80021e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 0304 	and.w	r3, r3, #4
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d005      	beq.n	80021bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021b0:	4b59      	ldr	r3, [pc, #356]	; (8002318 <HAL_RCC_ClockConfig+0x1bc>)
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	4a58      	ldr	r2, [pc, #352]	; (8002318 <HAL_RCC_ClockConfig+0x1bc>)
 80021b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80021ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 0308 	and.w	r3, r3, #8
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d005      	beq.n	80021d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021c8:	4b53      	ldr	r3, [pc, #332]	; (8002318 <HAL_RCC_ClockConfig+0x1bc>)
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	4a52      	ldr	r2, [pc, #328]	; (8002318 <HAL_RCC_ClockConfig+0x1bc>)
 80021ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80021d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021d4:	4b50      	ldr	r3, [pc, #320]	; (8002318 <HAL_RCC_ClockConfig+0x1bc>)
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	494d      	ldr	r1, [pc, #308]	; (8002318 <HAL_RCC_ClockConfig+0x1bc>)
 80021e2:	4313      	orrs	r3, r2
 80021e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 0301 	and.w	r3, r3, #1
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d044      	beq.n	800227c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d107      	bne.n	800220a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021fa:	4b47      	ldr	r3, [pc, #284]	; (8002318 <HAL_RCC_ClockConfig+0x1bc>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d119      	bne.n	800223a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e07f      	b.n	800230a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	2b02      	cmp	r3, #2
 8002210:	d003      	beq.n	800221a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002216:	2b03      	cmp	r3, #3
 8002218:	d107      	bne.n	800222a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800221a:	4b3f      	ldr	r3, [pc, #252]	; (8002318 <HAL_RCC_ClockConfig+0x1bc>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d109      	bne.n	800223a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e06f      	b.n	800230a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800222a:	4b3b      	ldr	r3, [pc, #236]	; (8002318 <HAL_RCC_ClockConfig+0x1bc>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0302 	and.w	r3, r3, #2
 8002232:	2b00      	cmp	r3, #0
 8002234:	d101      	bne.n	800223a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e067      	b.n	800230a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800223a:	4b37      	ldr	r3, [pc, #220]	; (8002318 <HAL_RCC_ClockConfig+0x1bc>)
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	f023 0203 	bic.w	r2, r3, #3
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	4934      	ldr	r1, [pc, #208]	; (8002318 <HAL_RCC_ClockConfig+0x1bc>)
 8002248:	4313      	orrs	r3, r2
 800224a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800224c:	f7ff f99e 	bl	800158c <HAL_GetTick>
 8002250:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002252:	e00a      	b.n	800226a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002254:	f7ff f99a 	bl	800158c <HAL_GetTick>
 8002258:	4602      	mov	r2, r0
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002262:	4293      	cmp	r3, r2
 8002264:	d901      	bls.n	800226a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002266:	2303      	movs	r3, #3
 8002268:	e04f      	b.n	800230a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800226a:	4b2b      	ldr	r3, [pc, #172]	; (8002318 <HAL_RCC_ClockConfig+0x1bc>)
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	f003 020c 	and.w	r2, r3, #12
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	429a      	cmp	r2, r3
 800227a:	d1eb      	bne.n	8002254 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800227c:	4b25      	ldr	r3, [pc, #148]	; (8002314 <HAL_RCC_ClockConfig+0x1b8>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 0307 	and.w	r3, r3, #7
 8002284:	683a      	ldr	r2, [r7, #0]
 8002286:	429a      	cmp	r2, r3
 8002288:	d20c      	bcs.n	80022a4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800228a:	4b22      	ldr	r3, [pc, #136]	; (8002314 <HAL_RCC_ClockConfig+0x1b8>)
 800228c:	683a      	ldr	r2, [r7, #0]
 800228e:	b2d2      	uxtb	r2, r2
 8002290:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002292:	4b20      	ldr	r3, [pc, #128]	; (8002314 <HAL_RCC_ClockConfig+0x1b8>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 0307 	and.w	r3, r3, #7
 800229a:	683a      	ldr	r2, [r7, #0]
 800229c:	429a      	cmp	r2, r3
 800229e:	d001      	beq.n	80022a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	e032      	b.n	800230a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f003 0304 	and.w	r3, r3, #4
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d008      	beq.n	80022c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022b0:	4b19      	ldr	r3, [pc, #100]	; (8002318 <HAL_RCC_ClockConfig+0x1bc>)
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	4916      	ldr	r1, [pc, #88]	; (8002318 <HAL_RCC_ClockConfig+0x1bc>)
 80022be:	4313      	orrs	r3, r2
 80022c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 0308 	and.w	r3, r3, #8
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d009      	beq.n	80022e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022ce:	4b12      	ldr	r3, [pc, #72]	; (8002318 <HAL_RCC_ClockConfig+0x1bc>)
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	691b      	ldr	r3, [r3, #16]
 80022da:	00db      	lsls	r3, r3, #3
 80022dc:	490e      	ldr	r1, [pc, #56]	; (8002318 <HAL_RCC_ClockConfig+0x1bc>)
 80022de:	4313      	orrs	r3, r2
 80022e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80022e2:	f000 f821 	bl	8002328 <HAL_RCC_GetSysClockFreq>
 80022e6:	4602      	mov	r2, r0
 80022e8:	4b0b      	ldr	r3, [pc, #44]	; (8002318 <HAL_RCC_ClockConfig+0x1bc>)
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	091b      	lsrs	r3, r3, #4
 80022ee:	f003 030f 	and.w	r3, r3, #15
 80022f2:	490a      	ldr	r1, [pc, #40]	; (800231c <HAL_RCC_ClockConfig+0x1c0>)
 80022f4:	5ccb      	ldrb	r3, [r1, r3]
 80022f6:	fa22 f303 	lsr.w	r3, r2, r3
 80022fa:	4a09      	ldr	r2, [pc, #36]	; (8002320 <HAL_RCC_ClockConfig+0x1c4>)
 80022fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80022fe:	4b09      	ldr	r3, [pc, #36]	; (8002324 <HAL_RCC_ClockConfig+0x1c8>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4618      	mov	r0, r3
 8002304:	f7ff f8fe 	bl	8001504 <HAL_InitTick>

  return HAL_OK;
 8002308:	2300      	movs	r3, #0
}
 800230a:	4618      	mov	r0, r3
 800230c:	3710      	adds	r7, #16
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	40023c00 	.word	0x40023c00
 8002318:	40023800 	.word	0x40023800
 800231c:	08003dd8 	.word	0x08003dd8
 8002320:	20000000 	.word	0x20000000
 8002324:	20000004 	.word	0x20000004

08002328 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002328:	b5b0      	push	{r4, r5, r7, lr}
 800232a:	b084      	sub	sp, #16
 800232c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800232e:	2100      	movs	r1, #0
 8002330:	6079      	str	r1, [r7, #4]
 8002332:	2100      	movs	r1, #0
 8002334:	60f9      	str	r1, [r7, #12]
 8002336:	2100      	movs	r1, #0
 8002338:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800233a:	2100      	movs	r1, #0
 800233c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800233e:	4952      	ldr	r1, [pc, #328]	; (8002488 <HAL_RCC_GetSysClockFreq+0x160>)
 8002340:	6889      	ldr	r1, [r1, #8]
 8002342:	f001 010c 	and.w	r1, r1, #12
 8002346:	2908      	cmp	r1, #8
 8002348:	d00d      	beq.n	8002366 <HAL_RCC_GetSysClockFreq+0x3e>
 800234a:	2908      	cmp	r1, #8
 800234c:	f200 8094 	bhi.w	8002478 <HAL_RCC_GetSysClockFreq+0x150>
 8002350:	2900      	cmp	r1, #0
 8002352:	d002      	beq.n	800235a <HAL_RCC_GetSysClockFreq+0x32>
 8002354:	2904      	cmp	r1, #4
 8002356:	d003      	beq.n	8002360 <HAL_RCC_GetSysClockFreq+0x38>
 8002358:	e08e      	b.n	8002478 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800235a:	4b4c      	ldr	r3, [pc, #304]	; (800248c <HAL_RCC_GetSysClockFreq+0x164>)
 800235c:	60bb      	str	r3, [r7, #8]
       break;
 800235e:	e08e      	b.n	800247e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002360:	4b4b      	ldr	r3, [pc, #300]	; (8002490 <HAL_RCC_GetSysClockFreq+0x168>)
 8002362:	60bb      	str	r3, [r7, #8]
      break;
 8002364:	e08b      	b.n	800247e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002366:	4948      	ldr	r1, [pc, #288]	; (8002488 <HAL_RCC_GetSysClockFreq+0x160>)
 8002368:	6849      	ldr	r1, [r1, #4]
 800236a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800236e:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002370:	4945      	ldr	r1, [pc, #276]	; (8002488 <HAL_RCC_GetSysClockFreq+0x160>)
 8002372:	6849      	ldr	r1, [r1, #4]
 8002374:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002378:	2900      	cmp	r1, #0
 800237a:	d024      	beq.n	80023c6 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800237c:	4942      	ldr	r1, [pc, #264]	; (8002488 <HAL_RCC_GetSysClockFreq+0x160>)
 800237e:	6849      	ldr	r1, [r1, #4]
 8002380:	0989      	lsrs	r1, r1, #6
 8002382:	4608      	mov	r0, r1
 8002384:	f04f 0100 	mov.w	r1, #0
 8002388:	f240 14ff 	movw	r4, #511	; 0x1ff
 800238c:	f04f 0500 	mov.w	r5, #0
 8002390:	ea00 0204 	and.w	r2, r0, r4
 8002394:	ea01 0305 	and.w	r3, r1, r5
 8002398:	493d      	ldr	r1, [pc, #244]	; (8002490 <HAL_RCC_GetSysClockFreq+0x168>)
 800239a:	fb01 f003 	mul.w	r0, r1, r3
 800239e:	2100      	movs	r1, #0
 80023a0:	fb01 f102 	mul.w	r1, r1, r2
 80023a4:	1844      	adds	r4, r0, r1
 80023a6:	493a      	ldr	r1, [pc, #232]	; (8002490 <HAL_RCC_GetSysClockFreq+0x168>)
 80023a8:	fba2 0101 	umull	r0, r1, r2, r1
 80023ac:	1863      	adds	r3, r4, r1
 80023ae:	4619      	mov	r1, r3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	461a      	mov	r2, r3
 80023b4:	f04f 0300 	mov.w	r3, #0
 80023b8:	f7fd ff06 	bl	80001c8 <__aeabi_uldivmod>
 80023bc:	4602      	mov	r2, r0
 80023be:	460b      	mov	r3, r1
 80023c0:	4613      	mov	r3, r2
 80023c2:	60fb      	str	r3, [r7, #12]
 80023c4:	e04a      	b.n	800245c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023c6:	4b30      	ldr	r3, [pc, #192]	; (8002488 <HAL_RCC_GetSysClockFreq+0x160>)
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	099b      	lsrs	r3, r3, #6
 80023cc:	461a      	mov	r2, r3
 80023ce:	f04f 0300 	mov.w	r3, #0
 80023d2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80023d6:	f04f 0100 	mov.w	r1, #0
 80023da:	ea02 0400 	and.w	r4, r2, r0
 80023de:	ea03 0501 	and.w	r5, r3, r1
 80023e2:	4620      	mov	r0, r4
 80023e4:	4629      	mov	r1, r5
 80023e6:	f04f 0200 	mov.w	r2, #0
 80023ea:	f04f 0300 	mov.w	r3, #0
 80023ee:	014b      	lsls	r3, r1, #5
 80023f0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80023f4:	0142      	lsls	r2, r0, #5
 80023f6:	4610      	mov	r0, r2
 80023f8:	4619      	mov	r1, r3
 80023fa:	1b00      	subs	r0, r0, r4
 80023fc:	eb61 0105 	sbc.w	r1, r1, r5
 8002400:	f04f 0200 	mov.w	r2, #0
 8002404:	f04f 0300 	mov.w	r3, #0
 8002408:	018b      	lsls	r3, r1, #6
 800240a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800240e:	0182      	lsls	r2, r0, #6
 8002410:	1a12      	subs	r2, r2, r0
 8002412:	eb63 0301 	sbc.w	r3, r3, r1
 8002416:	f04f 0000 	mov.w	r0, #0
 800241a:	f04f 0100 	mov.w	r1, #0
 800241e:	00d9      	lsls	r1, r3, #3
 8002420:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002424:	00d0      	lsls	r0, r2, #3
 8002426:	4602      	mov	r2, r0
 8002428:	460b      	mov	r3, r1
 800242a:	1912      	adds	r2, r2, r4
 800242c:	eb45 0303 	adc.w	r3, r5, r3
 8002430:	f04f 0000 	mov.w	r0, #0
 8002434:	f04f 0100 	mov.w	r1, #0
 8002438:	0299      	lsls	r1, r3, #10
 800243a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800243e:	0290      	lsls	r0, r2, #10
 8002440:	4602      	mov	r2, r0
 8002442:	460b      	mov	r3, r1
 8002444:	4610      	mov	r0, r2
 8002446:	4619      	mov	r1, r3
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	461a      	mov	r2, r3
 800244c:	f04f 0300 	mov.w	r3, #0
 8002450:	f7fd feba 	bl	80001c8 <__aeabi_uldivmod>
 8002454:	4602      	mov	r2, r0
 8002456:	460b      	mov	r3, r1
 8002458:	4613      	mov	r3, r2
 800245a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800245c:	4b0a      	ldr	r3, [pc, #40]	; (8002488 <HAL_RCC_GetSysClockFreq+0x160>)
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	0c1b      	lsrs	r3, r3, #16
 8002462:	f003 0303 	and.w	r3, r3, #3
 8002466:	3301      	adds	r3, #1
 8002468:	005b      	lsls	r3, r3, #1
 800246a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800246c:	68fa      	ldr	r2, [r7, #12]
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	fbb2 f3f3 	udiv	r3, r2, r3
 8002474:	60bb      	str	r3, [r7, #8]
      break;
 8002476:	e002      	b.n	800247e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002478:	4b04      	ldr	r3, [pc, #16]	; (800248c <HAL_RCC_GetSysClockFreq+0x164>)
 800247a:	60bb      	str	r3, [r7, #8]
      break;
 800247c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800247e:	68bb      	ldr	r3, [r7, #8]
}
 8002480:	4618      	mov	r0, r3
 8002482:	3710      	adds	r7, #16
 8002484:	46bd      	mov	sp, r7
 8002486:	bdb0      	pop	{r4, r5, r7, pc}
 8002488:	40023800 	.word	0x40023800
 800248c:	00f42400 	.word	0x00f42400
 8002490:	017d7840 	.word	0x017d7840

08002494 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002494:	b480      	push	{r7}
 8002496:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002498:	4b03      	ldr	r3, [pc, #12]	; (80024a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800249a:	681b      	ldr	r3, [r3, #0]
}
 800249c:	4618      	mov	r0, r3
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr
 80024a6:	bf00      	nop
 80024a8:	20000000 	.word	0x20000000

080024ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80024b0:	f7ff fff0 	bl	8002494 <HAL_RCC_GetHCLKFreq>
 80024b4:	4602      	mov	r2, r0
 80024b6:	4b05      	ldr	r3, [pc, #20]	; (80024cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	0a9b      	lsrs	r3, r3, #10
 80024bc:	f003 0307 	and.w	r3, r3, #7
 80024c0:	4903      	ldr	r1, [pc, #12]	; (80024d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024c2:	5ccb      	ldrb	r3, [r1, r3]
 80024c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	40023800 	.word	0x40023800
 80024d0:	08003de8 	.word	0x08003de8

080024d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80024d8:	f7ff ffdc 	bl	8002494 <HAL_RCC_GetHCLKFreq>
 80024dc:	4602      	mov	r2, r0
 80024de:	4b05      	ldr	r3, [pc, #20]	; (80024f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	0b5b      	lsrs	r3, r3, #13
 80024e4:	f003 0307 	and.w	r3, r3, #7
 80024e8:	4903      	ldr	r1, [pc, #12]	; (80024f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80024ea:	5ccb      	ldrb	r3, [r1, r3]
 80024ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	40023800 	.word	0x40023800
 80024f8:	08003de8 	.word	0x08003de8

080024fc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b082      	sub	sp, #8
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d101      	bne.n	800250e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e041      	b.n	8002592 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002514:	b2db      	uxtb	r3, r3
 8002516:	2b00      	cmp	r3, #0
 8002518:	d106      	bne.n	8002528 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2200      	movs	r2, #0
 800251e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f7fe fe52 	bl	80011cc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2202      	movs	r2, #2
 800252c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	3304      	adds	r3, #4
 8002538:	4619      	mov	r1, r3
 800253a:	4610      	mov	r0, r2
 800253c:	f000 f9b8 	bl	80028b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2201      	movs	r2, #1
 8002544:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2201      	movs	r2, #1
 800254c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2201      	movs	r2, #1
 8002554:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2201      	movs	r2, #1
 800255c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2201      	movs	r2, #1
 8002564:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2201      	movs	r2, #1
 800256c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2201      	movs	r2, #1
 8002574:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2201      	movs	r2, #1
 800257c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2201      	movs	r2, #1
 8002584:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2201      	movs	r2, #1
 800258c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002590:	2300      	movs	r3, #0
}
 8002592:	4618      	mov	r0, r3
 8002594:	3708      	adds	r7, #8
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
	...

0800259c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b084      	sub	sp, #16
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
 80025a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d109      	bne.n	80025c0 <HAL_TIM_PWM_Start+0x24>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80025b2:	b2db      	uxtb	r3, r3
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	bf14      	ite	ne
 80025b8:	2301      	movne	r3, #1
 80025ba:	2300      	moveq	r3, #0
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	e022      	b.n	8002606 <HAL_TIM_PWM_Start+0x6a>
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	2b04      	cmp	r3, #4
 80025c4:	d109      	bne.n	80025da <HAL_TIM_PWM_Start+0x3e>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	bf14      	ite	ne
 80025d2:	2301      	movne	r3, #1
 80025d4:	2300      	moveq	r3, #0
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	e015      	b.n	8002606 <HAL_TIM_PWM_Start+0x6a>
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	2b08      	cmp	r3, #8
 80025de:	d109      	bne.n	80025f4 <HAL_TIM_PWM_Start+0x58>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	bf14      	ite	ne
 80025ec:	2301      	movne	r3, #1
 80025ee:	2300      	moveq	r3, #0
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	e008      	b.n	8002606 <HAL_TIM_PWM_Start+0x6a>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	bf14      	ite	ne
 8002600:	2301      	movne	r3, #1
 8002602:	2300      	moveq	r3, #0
 8002604:	b2db      	uxtb	r3, r3
 8002606:	2b00      	cmp	r3, #0
 8002608:	d001      	beq.n	800260e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e07c      	b.n	8002708 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d104      	bne.n	800261e <HAL_TIM_PWM_Start+0x82>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2202      	movs	r2, #2
 8002618:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800261c:	e013      	b.n	8002646 <HAL_TIM_PWM_Start+0xaa>
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	2b04      	cmp	r3, #4
 8002622:	d104      	bne.n	800262e <HAL_TIM_PWM_Start+0x92>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2202      	movs	r2, #2
 8002628:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800262c:	e00b      	b.n	8002646 <HAL_TIM_PWM_Start+0xaa>
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	2b08      	cmp	r3, #8
 8002632:	d104      	bne.n	800263e <HAL_TIM_PWM_Start+0xa2>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2202      	movs	r2, #2
 8002638:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800263c:	e003      	b.n	8002646 <HAL_TIM_PWM_Start+0xaa>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2202      	movs	r2, #2
 8002642:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	2201      	movs	r2, #1
 800264c:	6839      	ldr	r1, [r7, #0]
 800264e:	4618      	mov	r0, r3
 8002650:	f000 fb7e 	bl	8002d50 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a2d      	ldr	r2, [pc, #180]	; (8002710 <HAL_TIM_PWM_Start+0x174>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d004      	beq.n	8002668 <HAL_TIM_PWM_Start+0xcc>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a2c      	ldr	r2, [pc, #176]	; (8002714 <HAL_TIM_PWM_Start+0x178>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d101      	bne.n	800266c <HAL_TIM_PWM_Start+0xd0>
 8002668:	2301      	movs	r3, #1
 800266a:	e000      	b.n	800266e <HAL_TIM_PWM_Start+0xd2>
 800266c:	2300      	movs	r3, #0
 800266e:	2b00      	cmp	r3, #0
 8002670:	d007      	beq.n	8002682 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002680:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a22      	ldr	r2, [pc, #136]	; (8002710 <HAL_TIM_PWM_Start+0x174>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d022      	beq.n	80026d2 <HAL_TIM_PWM_Start+0x136>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002694:	d01d      	beq.n	80026d2 <HAL_TIM_PWM_Start+0x136>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a1f      	ldr	r2, [pc, #124]	; (8002718 <HAL_TIM_PWM_Start+0x17c>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d018      	beq.n	80026d2 <HAL_TIM_PWM_Start+0x136>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a1d      	ldr	r2, [pc, #116]	; (800271c <HAL_TIM_PWM_Start+0x180>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d013      	beq.n	80026d2 <HAL_TIM_PWM_Start+0x136>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a1c      	ldr	r2, [pc, #112]	; (8002720 <HAL_TIM_PWM_Start+0x184>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d00e      	beq.n	80026d2 <HAL_TIM_PWM_Start+0x136>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a16      	ldr	r2, [pc, #88]	; (8002714 <HAL_TIM_PWM_Start+0x178>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d009      	beq.n	80026d2 <HAL_TIM_PWM_Start+0x136>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a18      	ldr	r2, [pc, #96]	; (8002724 <HAL_TIM_PWM_Start+0x188>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d004      	beq.n	80026d2 <HAL_TIM_PWM_Start+0x136>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a16      	ldr	r2, [pc, #88]	; (8002728 <HAL_TIM_PWM_Start+0x18c>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d111      	bne.n	80026f6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	f003 0307 	and.w	r3, r3, #7
 80026dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2b06      	cmp	r3, #6
 80026e2:	d010      	beq.n	8002706 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f042 0201 	orr.w	r2, r2, #1
 80026f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026f4:	e007      	b.n	8002706 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f042 0201 	orr.w	r2, r2, #1
 8002704:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002706:	2300      	movs	r3, #0
}
 8002708:	4618      	mov	r0, r3
 800270a:	3710      	adds	r7, #16
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}
 8002710:	40010000 	.word	0x40010000
 8002714:	40010400 	.word	0x40010400
 8002718:	40000400 	.word	0x40000400
 800271c:	40000800 	.word	0x40000800
 8002720:	40000c00 	.word	0x40000c00
 8002724:	40014000 	.word	0x40014000
 8002728:	40001800 	.word	0x40001800

0800272c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b086      	sub	sp, #24
 8002730:	af00      	add	r7, sp, #0
 8002732:	60f8      	str	r0, [r7, #12]
 8002734:	60b9      	str	r1, [r7, #8]
 8002736:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002738:	2300      	movs	r3, #0
 800273a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002742:	2b01      	cmp	r3, #1
 8002744:	d101      	bne.n	800274a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002746:	2302      	movs	r3, #2
 8002748:	e0ae      	b.n	80028a8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2201      	movs	r2, #1
 800274e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2b0c      	cmp	r3, #12
 8002756:	f200 809f 	bhi.w	8002898 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800275a:	a201      	add	r2, pc, #4	; (adr r2, 8002760 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800275c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002760:	08002795 	.word	0x08002795
 8002764:	08002899 	.word	0x08002899
 8002768:	08002899 	.word	0x08002899
 800276c:	08002899 	.word	0x08002899
 8002770:	080027d5 	.word	0x080027d5
 8002774:	08002899 	.word	0x08002899
 8002778:	08002899 	.word	0x08002899
 800277c:	08002899 	.word	0x08002899
 8002780:	08002817 	.word	0x08002817
 8002784:	08002899 	.word	0x08002899
 8002788:	08002899 	.word	0x08002899
 800278c:	08002899 	.word	0x08002899
 8002790:	08002857 	.word	0x08002857
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	68b9      	ldr	r1, [r7, #8]
 800279a:	4618      	mov	r0, r3
 800279c:	f000 f928 	bl	80029f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	699a      	ldr	r2, [r3, #24]
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f042 0208 	orr.w	r2, r2, #8
 80027ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	699a      	ldr	r2, [r3, #24]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f022 0204 	bic.w	r2, r2, #4
 80027be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	6999      	ldr	r1, [r3, #24]
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	691a      	ldr	r2, [r3, #16]
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	430a      	orrs	r2, r1
 80027d0:	619a      	str	r2, [r3, #24]
      break;
 80027d2:	e064      	b.n	800289e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	68b9      	ldr	r1, [r7, #8]
 80027da:	4618      	mov	r0, r3
 80027dc:	f000 f978 	bl	8002ad0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	699a      	ldr	r2, [r3, #24]
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80027ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	699a      	ldr	r2, [r3, #24]
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	6999      	ldr	r1, [r3, #24]
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	691b      	ldr	r3, [r3, #16]
 800280a:	021a      	lsls	r2, r3, #8
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	430a      	orrs	r2, r1
 8002812:	619a      	str	r2, [r3, #24]
      break;
 8002814:	e043      	b.n	800289e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	68b9      	ldr	r1, [r7, #8]
 800281c:	4618      	mov	r0, r3
 800281e:	f000 f9cd 	bl	8002bbc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	69da      	ldr	r2, [r3, #28]
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f042 0208 	orr.w	r2, r2, #8
 8002830:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	69da      	ldr	r2, [r3, #28]
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f022 0204 	bic.w	r2, r2, #4
 8002840:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	69d9      	ldr	r1, [r3, #28]
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	691a      	ldr	r2, [r3, #16]
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	430a      	orrs	r2, r1
 8002852:	61da      	str	r2, [r3, #28]
      break;
 8002854:	e023      	b.n	800289e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	68b9      	ldr	r1, [r7, #8]
 800285c:	4618      	mov	r0, r3
 800285e:	f000 fa21 	bl	8002ca4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	69da      	ldr	r2, [r3, #28]
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002870:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	69da      	ldr	r2, [r3, #28]
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002880:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	69d9      	ldr	r1, [r3, #28]
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	691b      	ldr	r3, [r3, #16]
 800288c:	021a      	lsls	r2, r3, #8
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	430a      	orrs	r2, r1
 8002894:	61da      	str	r2, [r3, #28]
      break;
 8002896:	e002      	b.n	800289e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	75fb      	strb	r3, [r7, #23]
      break;
 800289c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2200      	movs	r2, #0
 80028a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80028a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	3718      	adds	r7, #24
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}

080028b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b085      	sub	sp, #20
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
 80028b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	4a40      	ldr	r2, [pc, #256]	; (80029c4 <TIM_Base_SetConfig+0x114>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d013      	beq.n	80028f0 <TIM_Base_SetConfig+0x40>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028ce:	d00f      	beq.n	80028f0 <TIM_Base_SetConfig+0x40>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	4a3d      	ldr	r2, [pc, #244]	; (80029c8 <TIM_Base_SetConfig+0x118>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d00b      	beq.n	80028f0 <TIM_Base_SetConfig+0x40>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	4a3c      	ldr	r2, [pc, #240]	; (80029cc <TIM_Base_SetConfig+0x11c>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d007      	beq.n	80028f0 <TIM_Base_SetConfig+0x40>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	4a3b      	ldr	r2, [pc, #236]	; (80029d0 <TIM_Base_SetConfig+0x120>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d003      	beq.n	80028f0 <TIM_Base_SetConfig+0x40>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	4a3a      	ldr	r2, [pc, #232]	; (80029d4 <TIM_Base_SetConfig+0x124>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d108      	bne.n	8002902 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	68fa      	ldr	r2, [r7, #12]
 80028fe:	4313      	orrs	r3, r2
 8002900:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	4a2f      	ldr	r2, [pc, #188]	; (80029c4 <TIM_Base_SetConfig+0x114>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d02b      	beq.n	8002962 <TIM_Base_SetConfig+0xb2>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002910:	d027      	beq.n	8002962 <TIM_Base_SetConfig+0xb2>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4a2c      	ldr	r2, [pc, #176]	; (80029c8 <TIM_Base_SetConfig+0x118>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d023      	beq.n	8002962 <TIM_Base_SetConfig+0xb2>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	4a2b      	ldr	r2, [pc, #172]	; (80029cc <TIM_Base_SetConfig+0x11c>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d01f      	beq.n	8002962 <TIM_Base_SetConfig+0xb2>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	4a2a      	ldr	r2, [pc, #168]	; (80029d0 <TIM_Base_SetConfig+0x120>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d01b      	beq.n	8002962 <TIM_Base_SetConfig+0xb2>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4a29      	ldr	r2, [pc, #164]	; (80029d4 <TIM_Base_SetConfig+0x124>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d017      	beq.n	8002962 <TIM_Base_SetConfig+0xb2>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4a28      	ldr	r2, [pc, #160]	; (80029d8 <TIM_Base_SetConfig+0x128>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d013      	beq.n	8002962 <TIM_Base_SetConfig+0xb2>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4a27      	ldr	r2, [pc, #156]	; (80029dc <TIM_Base_SetConfig+0x12c>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d00f      	beq.n	8002962 <TIM_Base_SetConfig+0xb2>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4a26      	ldr	r2, [pc, #152]	; (80029e0 <TIM_Base_SetConfig+0x130>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d00b      	beq.n	8002962 <TIM_Base_SetConfig+0xb2>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4a25      	ldr	r2, [pc, #148]	; (80029e4 <TIM_Base_SetConfig+0x134>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d007      	beq.n	8002962 <TIM_Base_SetConfig+0xb2>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4a24      	ldr	r2, [pc, #144]	; (80029e8 <TIM_Base_SetConfig+0x138>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d003      	beq.n	8002962 <TIM_Base_SetConfig+0xb2>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	4a23      	ldr	r2, [pc, #140]	; (80029ec <TIM_Base_SetConfig+0x13c>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d108      	bne.n	8002974 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002968:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	68db      	ldr	r3, [r3, #12]
 800296e:	68fa      	ldr	r2, [r7, #12]
 8002970:	4313      	orrs	r3, r2
 8002972:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	695b      	ldr	r3, [r3, #20]
 800297e:	4313      	orrs	r3, r2
 8002980:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	68fa      	ldr	r2, [r7, #12]
 8002986:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	689a      	ldr	r2, [r3, #8]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	4a0a      	ldr	r2, [pc, #40]	; (80029c4 <TIM_Base_SetConfig+0x114>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d003      	beq.n	80029a8 <TIM_Base_SetConfig+0xf8>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	4a0c      	ldr	r2, [pc, #48]	; (80029d4 <TIM_Base_SetConfig+0x124>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d103      	bne.n	80029b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	691a      	ldr	r2, [r3, #16]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2201      	movs	r2, #1
 80029b4:	615a      	str	r2, [r3, #20]
}
 80029b6:	bf00      	nop
 80029b8:	3714      	adds	r7, #20
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr
 80029c2:	bf00      	nop
 80029c4:	40010000 	.word	0x40010000
 80029c8:	40000400 	.word	0x40000400
 80029cc:	40000800 	.word	0x40000800
 80029d0:	40000c00 	.word	0x40000c00
 80029d4:	40010400 	.word	0x40010400
 80029d8:	40014000 	.word	0x40014000
 80029dc:	40014400 	.word	0x40014400
 80029e0:	40014800 	.word	0x40014800
 80029e4:	40001800 	.word	0x40001800
 80029e8:	40001c00 	.word	0x40001c00
 80029ec:	40002000 	.word	0x40002000

080029f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b087      	sub	sp, #28
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
 80029f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6a1b      	ldr	r3, [r3, #32]
 80029fe:	f023 0201 	bic.w	r2, r3, #1
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6a1b      	ldr	r3, [r3, #32]
 8002a0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	699b      	ldr	r3, [r3, #24]
 8002a16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	f023 0303 	bic.w	r3, r3, #3
 8002a26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	68fa      	ldr	r2, [r7, #12]
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	f023 0302 	bic.w	r3, r3, #2
 8002a38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	697a      	ldr	r2, [r7, #20]
 8002a40:	4313      	orrs	r3, r2
 8002a42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	4a20      	ldr	r2, [pc, #128]	; (8002ac8 <TIM_OC1_SetConfig+0xd8>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d003      	beq.n	8002a54 <TIM_OC1_SetConfig+0x64>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	4a1f      	ldr	r2, [pc, #124]	; (8002acc <TIM_OC1_SetConfig+0xdc>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d10c      	bne.n	8002a6e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	f023 0308 	bic.w	r3, r3, #8
 8002a5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	697a      	ldr	r2, [r7, #20]
 8002a62:	4313      	orrs	r3, r2
 8002a64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	f023 0304 	bic.w	r3, r3, #4
 8002a6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	4a15      	ldr	r2, [pc, #84]	; (8002ac8 <TIM_OC1_SetConfig+0xd8>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d003      	beq.n	8002a7e <TIM_OC1_SetConfig+0x8e>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	4a14      	ldr	r2, [pc, #80]	; (8002acc <TIM_OC1_SetConfig+0xdc>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d111      	bne.n	8002aa2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002a8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	695b      	ldr	r3, [r3, #20]
 8002a92:	693a      	ldr	r2, [r7, #16]
 8002a94:	4313      	orrs	r3, r2
 8002a96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	699b      	ldr	r3, [r3, #24]
 8002a9c:	693a      	ldr	r2, [r7, #16]
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	693a      	ldr	r2, [r7, #16]
 8002aa6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	68fa      	ldr	r2, [r7, #12]
 8002aac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	685a      	ldr	r2, [r3, #4]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	697a      	ldr	r2, [r7, #20]
 8002aba:	621a      	str	r2, [r3, #32]
}
 8002abc:	bf00      	nop
 8002abe:	371c      	adds	r7, #28
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr
 8002ac8:	40010000 	.word	0x40010000
 8002acc:	40010400 	.word	0x40010400

08002ad0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b087      	sub	sp, #28
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
 8002ad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6a1b      	ldr	r3, [r3, #32]
 8002ade:	f023 0210 	bic.w	r2, r3, #16
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6a1b      	ldr	r3, [r3, #32]
 8002aea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	699b      	ldr	r3, [r3, #24]
 8002af6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002afe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	021b      	lsls	r3, r3, #8
 8002b0e:	68fa      	ldr	r2, [r7, #12]
 8002b10:	4313      	orrs	r3, r2
 8002b12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	f023 0320 	bic.w	r3, r3, #32
 8002b1a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	011b      	lsls	r3, r3, #4
 8002b22:	697a      	ldr	r2, [r7, #20]
 8002b24:	4313      	orrs	r3, r2
 8002b26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	4a22      	ldr	r2, [pc, #136]	; (8002bb4 <TIM_OC2_SetConfig+0xe4>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d003      	beq.n	8002b38 <TIM_OC2_SetConfig+0x68>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	4a21      	ldr	r2, [pc, #132]	; (8002bb8 <TIM_OC2_SetConfig+0xe8>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d10d      	bne.n	8002b54 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	011b      	lsls	r3, r3, #4
 8002b46:	697a      	ldr	r2, [r7, #20]
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b52:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	4a17      	ldr	r2, [pc, #92]	; (8002bb4 <TIM_OC2_SetConfig+0xe4>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d003      	beq.n	8002b64 <TIM_OC2_SetConfig+0x94>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	4a16      	ldr	r2, [pc, #88]	; (8002bb8 <TIM_OC2_SetConfig+0xe8>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d113      	bne.n	8002b8c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002b6a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002b72:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	695b      	ldr	r3, [r3, #20]
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	693a      	ldr	r2, [r7, #16]
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	699b      	ldr	r3, [r3, #24]
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	693a      	ldr	r2, [r7, #16]
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	693a      	ldr	r2, [r7, #16]
 8002b90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	68fa      	ldr	r2, [r7, #12]
 8002b96:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	685a      	ldr	r2, [r3, #4]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	697a      	ldr	r2, [r7, #20]
 8002ba4:	621a      	str	r2, [r3, #32]
}
 8002ba6:	bf00      	nop
 8002ba8:	371c      	adds	r7, #28
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr
 8002bb2:	bf00      	nop
 8002bb4:	40010000 	.word	0x40010000
 8002bb8:	40010400 	.word	0x40010400

08002bbc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b087      	sub	sp, #28
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
 8002bc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6a1b      	ldr	r3, [r3, #32]
 8002bca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6a1b      	ldr	r3, [r3, #32]
 8002bd6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	69db      	ldr	r3, [r3, #28]
 8002be2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	f023 0303 	bic.w	r3, r3, #3
 8002bf2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	68fa      	ldr	r2, [r7, #12]
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002c04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	021b      	lsls	r3, r3, #8
 8002c0c:	697a      	ldr	r2, [r7, #20]
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	4a21      	ldr	r2, [pc, #132]	; (8002c9c <TIM_OC3_SetConfig+0xe0>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d003      	beq.n	8002c22 <TIM_OC3_SetConfig+0x66>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	4a20      	ldr	r2, [pc, #128]	; (8002ca0 <TIM_OC3_SetConfig+0xe4>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d10d      	bne.n	8002c3e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002c28:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	68db      	ldr	r3, [r3, #12]
 8002c2e:	021b      	lsls	r3, r3, #8
 8002c30:	697a      	ldr	r2, [r7, #20]
 8002c32:	4313      	orrs	r3, r2
 8002c34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002c3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4a16      	ldr	r2, [pc, #88]	; (8002c9c <TIM_OC3_SetConfig+0xe0>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d003      	beq.n	8002c4e <TIM_OC3_SetConfig+0x92>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4a15      	ldr	r2, [pc, #84]	; (8002ca0 <TIM_OC3_SetConfig+0xe4>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d113      	bne.n	8002c76 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002c54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002c5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	695b      	ldr	r3, [r3, #20]
 8002c62:	011b      	lsls	r3, r3, #4
 8002c64:	693a      	ldr	r2, [r7, #16]
 8002c66:	4313      	orrs	r3, r2
 8002c68:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	699b      	ldr	r3, [r3, #24]
 8002c6e:	011b      	lsls	r3, r3, #4
 8002c70:	693a      	ldr	r2, [r7, #16]
 8002c72:	4313      	orrs	r3, r2
 8002c74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	693a      	ldr	r2, [r7, #16]
 8002c7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	68fa      	ldr	r2, [r7, #12]
 8002c80:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	685a      	ldr	r2, [r3, #4]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	697a      	ldr	r2, [r7, #20]
 8002c8e:	621a      	str	r2, [r3, #32]
}
 8002c90:	bf00      	nop
 8002c92:	371c      	adds	r7, #28
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr
 8002c9c:	40010000 	.word	0x40010000
 8002ca0:	40010400 	.word	0x40010400

08002ca4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b087      	sub	sp, #28
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
 8002cac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6a1b      	ldr	r3, [r3, #32]
 8002cb2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6a1b      	ldr	r3, [r3, #32]
 8002cbe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	69db      	ldr	r3, [r3, #28]
 8002cca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002cd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	021b      	lsls	r3, r3, #8
 8002ce2:	68fa      	ldr	r2, [r7, #12]
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002cee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	031b      	lsls	r3, r3, #12
 8002cf6:	693a      	ldr	r2, [r7, #16]
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	4a12      	ldr	r2, [pc, #72]	; (8002d48 <TIM_OC4_SetConfig+0xa4>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d003      	beq.n	8002d0c <TIM_OC4_SetConfig+0x68>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	4a11      	ldr	r2, [pc, #68]	; (8002d4c <TIM_OC4_SetConfig+0xa8>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d109      	bne.n	8002d20 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d12:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	695b      	ldr	r3, [r3, #20]
 8002d18:	019b      	lsls	r3, r3, #6
 8002d1a:	697a      	ldr	r2, [r7, #20]
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	697a      	ldr	r2, [r7, #20]
 8002d24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	68fa      	ldr	r2, [r7, #12]
 8002d2a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	685a      	ldr	r2, [r3, #4]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	693a      	ldr	r2, [r7, #16]
 8002d38:	621a      	str	r2, [r3, #32]
}
 8002d3a:	bf00      	nop
 8002d3c:	371c      	adds	r7, #28
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr
 8002d46:	bf00      	nop
 8002d48:	40010000 	.word	0x40010000
 8002d4c:	40010400 	.word	0x40010400

08002d50 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b087      	sub	sp, #28
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	60f8      	str	r0, [r7, #12]
 8002d58:	60b9      	str	r1, [r7, #8]
 8002d5a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	f003 031f 	and.w	r3, r3, #31
 8002d62:	2201      	movs	r2, #1
 8002d64:	fa02 f303 	lsl.w	r3, r2, r3
 8002d68:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	6a1a      	ldr	r2, [r3, #32]
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	43db      	mvns	r3, r3
 8002d72:	401a      	ands	r2, r3
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	6a1a      	ldr	r2, [r3, #32]
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	f003 031f 	and.w	r3, r3, #31
 8002d82:	6879      	ldr	r1, [r7, #4]
 8002d84:	fa01 f303 	lsl.w	r3, r1, r3
 8002d88:	431a      	orrs	r2, r3
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	621a      	str	r2, [r3, #32]
}
 8002d8e:	bf00      	nop
 8002d90:	371c      	adds	r7, #28
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr
	...

08002d9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b085      	sub	sp, #20
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
 8002da4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d101      	bne.n	8002db4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002db0:	2302      	movs	r3, #2
 8002db2:	e05a      	b.n	8002e6a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2201      	movs	r2, #1
 8002db8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2202      	movs	r2, #2
 8002dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dda:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	68fa      	ldr	r2, [r7, #12]
 8002de2:	4313      	orrs	r3, r2
 8002de4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	68fa      	ldr	r2, [r7, #12]
 8002dec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a21      	ldr	r2, [pc, #132]	; (8002e78 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d022      	beq.n	8002e3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e00:	d01d      	beq.n	8002e3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a1d      	ldr	r2, [pc, #116]	; (8002e7c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d018      	beq.n	8002e3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a1b      	ldr	r2, [pc, #108]	; (8002e80 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d013      	beq.n	8002e3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a1a      	ldr	r2, [pc, #104]	; (8002e84 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d00e      	beq.n	8002e3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a18      	ldr	r2, [pc, #96]	; (8002e88 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d009      	beq.n	8002e3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a17      	ldr	r2, [pc, #92]	; (8002e8c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d004      	beq.n	8002e3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a15      	ldr	r2, [pc, #84]	; (8002e90 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d10c      	bne.n	8002e58 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e44:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	68ba      	ldr	r2, [r7, #8]
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	68ba      	ldr	r2, [r7, #8]
 8002e56:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2200      	movs	r2, #0
 8002e64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e68:	2300      	movs	r3, #0
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3714      	adds	r7, #20
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr
 8002e76:	bf00      	nop
 8002e78:	40010000 	.word	0x40010000
 8002e7c:	40000400 	.word	0x40000400
 8002e80:	40000800 	.word	0x40000800
 8002e84:	40000c00 	.word	0x40000c00
 8002e88:	40010400 	.word	0x40010400
 8002e8c:	40014000 	.word	0x40014000
 8002e90:	40001800 	.word	0x40001800

08002e94 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b082      	sub	sp, #8
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d101      	bne.n	8002ea6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e03f      	b.n	8002f26 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d106      	bne.n	8002ec0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	f7fe fa40 	bl	8001340 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2224      	movs	r2, #36	; 0x24
 8002ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	68da      	ldr	r2, [r3, #12]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ed6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ed8:	6878      	ldr	r0, [r7, #4]
 8002eda:	f000 fce5 	bl	80038a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	691a      	ldr	r2, [r3, #16]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002eec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	695a      	ldr	r2, [r3, #20]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002efc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	68da      	ldr	r2, [r3, #12]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f0c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2200      	movs	r2, #0
 8002f12:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2220      	movs	r2, #32
 8002f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2220      	movs	r2, #32
 8002f20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f24:	2300      	movs	r3, #0
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3708      	adds	r7, #8
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}

08002f2e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002f2e:	b580      	push	{r7, lr}
 8002f30:	b084      	sub	sp, #16
 8002f32:	af00      	add	r7, sp, #0
 8002f34:	60f8      	str	r0, [r7, #12]
 8002f36:	60b9      	str	r1, [r7, #8]
 8002f38:	4613      	mov	r3, r2
 8002f3a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	2b20      	cmp	r3, #32
 8002f46:	d11d      	bne.n	8002f84 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d002      	beq.n	8002f54 <HAL_UART_Receive_IT+0x26>
 8002f4e:	88fb      	ldrh	r3, [r7, #6]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d101      	bne.n	8002f58 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	e016      	b.n	8002f86 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d101      	bne.n	8002f66 <HAL_UART_Receive_IT+0x38>
 8002f62:	2302      	movs	r3, #2
 8002f64:	e00f      	b.n	8002f86 <HAL_UART_Receive_IT+0x58>
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2201      	movs	r2, #1
 8002f6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2200      	movs	r2, #0
 8002f72:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002f74:	88fb      	ldrh	r3, [r7, #6]
 8002f76:	461a      	mov	r2, r3
 8002f78:	68b9      	ldr	r1, [r7, #8]
 8002f7a:	68f8      	ldr	r0, [r7, #12]
 8002f7c:	f000 fac0 	bl	8003500 <UART_Start_Receive_IT>
 8002f80:	4603      	mov	r3, r0
 8002f82:	e000      	b.n	8002f86 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002f84:	2302      	movs	r3, #2
  }
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3710      	adds	r7, #16
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
	...

08002f90 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b0ba      	sub	sp, #232	; 0xe8
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	68db      	ldr	r3, [r3, #12]
 8002fa8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	695b      	ldr	r3, [r3, #20]
 8002fb2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002fc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fc6:	f003 030f 	and.w	r3, r3, #15
 8002fca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002fce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d10f      	bne.n	8002ff6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002fd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fda:	f003 0320 	and.w	r3, r3, #32
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d009      	beq.n	8002ff6 <HAL_UART_IRQHandler+0x66>
 8002fe2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fe6:	f003 0320 	and.w	r3, r3, #32
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d003      	beq.n	8002ff6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f000 fb9f 	bl	8003732 <UART_Receive_IT>
      return;
 8002ff4:	e256      	b.n	80034a4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002ff6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	f000 80de 	beq.w	80031bc <HAL_UART_IRQHandler+0x22c>
 8003000:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003004:	f003 0301 	and.w	r3, r3, #1
 8003008:	2b00      	cmp	r3, #0
 800300a:	d106      	bne.n	800301a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800300c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003010:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003014:	2b00      	cmp	r3, #0
 8003016:	f000 80d1 	beq.w	80031bc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800301a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800301e:	f003 0301 	and.w	r3, r3, #1
 8003022:	2b00      	cmp	r3, #0
 8003024:	d00b      	beq.n	800303e <HAL_UART_IRQHandler+0xae>
 8003026:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800302a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800302e:	2b00      	cmp	r3, #0
 8003030:	d005      	beq.n	800303e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003036:	f043 0201 	orr.w	r2, r3, #1
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800303e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003042:	f003 0304 	and.w	r3, r3, #4
 8003046:	2b00      	cmp	r3, #0
 8003048:	d00b      	beq.n	8003062 <HAL_UART_IRQHandler+0xd2>
 800304a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800304e:	f003 0301 	and.w	r3, r3, #1
 8003052:	2b00      	cmp	r3, #0
 8003054:	d005      	beq.n	8003062 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305a:	f043 0202 	orr.w	r2, r3, #2
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003062:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003066:	f003 0302 	and.w	r3, r3, #2
 800306a:	2b00      	cmp	r3, #0
 800306c:	d00b      	beq.n	8003086 <HAL_UART_IRQHandler+0xf6>
 800306e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003072:	f003 0301 	and.w	r3, r3, #1
 8003076:	2b00      	cmp	r3, #0
 8003078:	d005      	beq.n	8003086 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307e:	f043 0204 	orr.w	r2, r3, #4
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003086:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800308a:	f003 0308 	and.w	r3, r3, #8
 800308e:	2b00      	cmp	r3, #0
 8003090:	d011      	beq.n	80030b6 <HAL_UART_IRQHandler+0x126>
 8003092:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003096:	f003 0320 	and.w	r3, r3, #32
 800309a:	2b00      	cmp	r3, #0
 800309c:	d105      	bne.n	80030aa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800309e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80030a2:	f003 0301 	and.w	r3, r3, #1
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d005      	beq.n	80030b6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ae:	f043 0208 	orr.w	r2, r3, #8
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	f000 81ed 	beq.w	800349a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80030c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030c4:	f003 0320 	and.w	r3, r3, #32
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d008      	beq.n	80030de <HAL_UART_IRQHandler+0x14e>
 80030cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030d0:	f003 0320 	and.w	r3, r3, #32
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d002      	beq.n	80030de <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	f000 fb2a 	bl	8003732 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	695b      	ldr	r3, [r3, #20]
 80030e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030e8:	2b40      	cmp	r3, #64	; 0x40
 80030ea:	bf0c      	ite	eq
 80030ec:	2301      	moveq	r3, #1
 80030ee:	2300      	movne	r3, #0
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fa:	f003 0308 	and.w	r3, r3, #8
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d103      	bne.n	800310a <HAL_UART_IRQHandler+0x17a>
 8003102:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003106:	2b00      	cmp	r3, #0
 8003108:	d04f      	beq.n	80031aa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f000 fa32 	bl	8003574 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	695b      	ldr	r3, [r3, #20]
 8003116:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800311a:	2b40      	cmp	r3, #64	; 0x40
 800311c:	d141      	bne.n	80031a2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	3314      	adds	r3, #20
 8003124:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003128:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800312c:	e853 3f00 	ldrex	r3, [r3]
 8003130:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003134:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003138:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800313c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	3314      	adds	r3, #20
 8003146:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800314a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800314e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003152:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003156:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800315a:	e841 2300 	strex	r3, r2, [r1]
 800315e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003162:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003166:	2b00      	cmp	r3, #0
 8003168:	d1d9      	bne.n	800311e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800316e:	2b00      	cmp	r3, #0
 8003170:	d013      	beq.n	800319a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003176:	4a7d      	ldr	r2, [pc, #500]	; (800336c <HAL_UART_IRQHandler+0x3dc>)
 8003178:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800317e:	4618      	mov	r0, r3
 8003180:	f7fe fbb5 	bl	80018ee <HAL_DMA_Abort_IT>
 8003184:	4603      	mov	r3, r0
 8003186:	2b00      	cmp	r3, #0
 8003188:	d016      	beq.n	80031b8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800318e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003190:	687a      	ldr	r2, [r7, #4]
 8003192:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003194:	4610      	mov	r0, r2
 8003196:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003198:	e00e      	b.n	80031b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f000 f99a 	bl	80034d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031a0:	e00a      	b.n	80031b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f000 f996 	bl	80034d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031a8:	e006      	b.n	80031b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f000 f992 	bl	80034d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2200      	movs	r2, #0
 80031b4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80031b6:	e170      	b.n	800349a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031b8:	bf00      	nop
    return;
 80031ba:	e16e      	b.n	800349a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	f040 814a 	bne.w	800345a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80031c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031ca:	f003 0310 	and.w	r3, r3, #16
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	f000 8143 	beq.w	800345a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80031d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031d8:	f003 0310 	and.w	r3, r3, #16
 80031dc:	2b00      	cmp	r3, #0
 80031de:	f000 813c 	beq.w	800345a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80031e2:	2300      	movs	r3, #0
 80031e4:	60bb      	str	r3, [r7, #8]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	60bb      	str	r3, [r7, #8]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	60bb      	str	r3, [r7, #8]
 80031f6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	695b      	ldr	r3, [r3, #20]
 80031fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003202:	2b40      	cmp	r3, #64	; 0x40
 8003204:	f040 80b4 	bne.w	8003370 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003214:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003218:	2b00      	cmp	r3, #0
 800321a:	f000 8140 	beq.w	800349e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003222:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003226:	429a      	cmp	r2, r3
 8003228:	f080 8139 	bcs.w	800349e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003232:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003238:	69db      	ldr	r3, [r3, #28]
 800323a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800323e:	f000 8088 	beq.w	8003352 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	330c      	adds	r3, #12
 8003248:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800324c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003250:	e853 3f00 	ldrex	r3, [r3]
 8003254:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003258:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800325c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003260:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	330c      	adds	r3, #12
 800326a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800326e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003272:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003276:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800327a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800327e:	e841 2300 	strex	r3, r2, [r1]
 8003282:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003286:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800328a:	2b00      	cmp	r3, #0
 800328c:	d1d9      	bne.n	8003242 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	3314      	adds	r3, #20
 8003294:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003296:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003298:	e853 3f00 	ldrex	r3, [r3]
 800329c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800329e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80032a0:	f023 0301 	bic.w	r3, r3, #1
 80032a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	3314      	adds	r3, #20
 80032ae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80032b2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80032b6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032b8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80032ba:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80032be:	e841 2300 	strex	r3, r2, [r1]
 80032c2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80032c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d1e1      	bne.n	800328e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	3314      	adds	r3, #20
 80032d0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80032d4:	e853 3f00 	ldrex	r3, [r3]
 80032d8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80032da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	3314      	adds	r3, #20
 80032ea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80032ee:	66fa      	str	r2, [r7, #108]	; 0x6c
 80032f0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032f2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80032f4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80032f6:	e841 2300 	strex	r3, r2, [r1]
 80032fa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80032fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d1e3      	bne.n	80032ca <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2220      	movs	r2, #32
 8003306:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2200      	movs	r2, #0
 800330e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	330c      	adds	r3, #12
 8003316:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003318:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800331a:	e853 3f00 	ldrex	r3, [r3]
 800331e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003320:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003322:	f023 0310 	bic.w	r3, r3, #16
 8003326:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	330c      	adds	r3, #12
 8003330:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003334:	65ba      	str	r2, [r7, #88]	; 0x58
 8003336:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003338:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800333a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800333c:	e841 2300 	strex	r3, r2, [r1]
 8003340:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003342:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003344:	2b00      	cmp	r3, #0
 8003346:	d1e3      	bne.n	8003310 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800334c:	4618      	mov	r0, r3
 800334e:	f7fe fa5e 	bl	800180e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800335a:	b29b      	uxth	r3, r3
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	b29b      	uxth	r3, r3
 8003360:	4619      	mov	r1, r3
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f000 f8c0 	bl	80034e8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003368:	e099      	b.n	800349e <HAL_UART_IRQHandler+0x50e>
 800336a:	bf00      	nop
 800336c:	0800363b 	.word	0x0800363b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003378:	b29b      	uxth	r3, r3
 800337a:	1ad3      	subs	r3, r2, r3
 800337c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003384:	b29b      	uxth	r3, r3
 8003386:	2b00      	cmp	r3, #0
 8003388:	f000 808b 	beq.w	80034a2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800338c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003390:	2b00      	cmp	r3, #0
 8003392:	f000 8086 	beq.w	80034a2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	330c      	adds	r3, #12
 800339c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800339e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033a0:	e853 3f00 	ldrex	r3, [r3]
 80033a4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80033a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033a8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80033ac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	330c      	adds	r3, #12
 80033b6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80033ba:	647a      	str	r2, [r7, #68]	; 0x44
 80033bc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033be:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80033c0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80033c2:	e841 2300 	strex	r3, r2, [r1]
 80033c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80033c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d1e3      	bne.n	8003396 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	3314      	adds	r3, #20
 80033d4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d8:	e853 3f00 	ldrex	r3, [r3]
 80033dc:	623b      	str	r3, [r7, #32]
   return(result);
 80033de:	6a3b      	ldr	r3, [r7, #32]
 80033e0:	f023 0301 	bic.w	r3, r3, #1
 80033e4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	3314      	adds	r3, #20
 80033ee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80033f2:	633a      	str	r2, [r7, #48]	; 0x30
 80033f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80033f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033fa:	e841 2300 	strex	r3, r2, [r1]
 80033fe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003402:	2b00      	cmp	r3, #0
 8003404:	d1e3      	bne.n	80033ce <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2220      	movs	r2, #32
 800340a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2200      	movs	r2, #0
 8003412:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	330c      	adds	r3, #12
 800341a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	e853 3f00 	ldrex	r3, [r3]
 8003422:	60fb      	str	r3, [r7, #12]
   return(result);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	f023 0310 	bic.w	r3, r3, #16
 800342a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	330c      	adds	r3, #12
 8003434:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003438:	61fa      	str	r2, [r7, #28]
 800343a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800343c:	69b9      	ldr	r1, [r7, #24]
 800343e:	69fa      	ldr	r2, [r7, #28]
 8003440:	e841 2300 	strex	r3, r2, [r1]
 8003444:	617b      	str	r3, [r7, #20]
   return(result);
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d1e3      	bne.n	8003414 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800344c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003450:	4619      	mov	r1, r3
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f000 f848 	bl	80034e8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003458:	e023      	b.n	80034a2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800345a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800345e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003462:	2b00      	cmp	r3, #0
 8003464:	d009      	beq.n	800347a <HAL_UART_IRQHandler+0x4ea>
 8003466:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800346a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800346e:	2b00      	cmp	r3, #0
 8003470:	d003      	beq.n	800347a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f000 f8f5 	bl	8003662 <UART_Transmit_IT>
    return;
 8003478:	e014      	b.n	80034a4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800347a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800347e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003482:	2b00      	cmp	r3, #0
 8003484:	d00e      	beq.n	80034a4 <HAL_UART_IRQHandler+0x514>
 8003486:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800348a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800348e:	2b00      	cmp	r3, #0
 8003490:	d008      	beq.n	80034a4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f000 f935 	bl	8003702 <UART_EndTransmit_IT>
    return;
 8003498:	e004      	b.n	80034a4 <HAL_UART_IRQHandler+0x514>
    return;
 800349a:	bf00      	nop
 800349c:	e002      	b.n	80034a4 <HAL_UART_IRQHandler+0x514>
      return;
 800349e:	bf00      	nop
 80034a0:	e000      	b.n	80034a4 <HAL_UART_IRQHandler+0x514>
      return;
 80034a2:	bf00      	nop
  }
}
 80034a4:	37e8      	adds	r7, #232	; 0xe8
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop

080034ac <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b083      	sub	sp, #12
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80034b4:	bf00      	nop
 80034b6:	370c      	adds	r7, #12
 80034b8:	46bd      	mov	sp, r7
 80034ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034be:	4770      	bx	lr

080034c0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b083      	sub	sp, #12
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80034c8:	bf00      	nop
 80034ca:	370c      	adds	r7, #12
 80034cc:	46bd      	mov	sp, r7
 80034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d2:	4770      	bx	lr

080034d4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b083      	sub	sp, #12
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80034dc:	bf00      	nop
 80034de:	370c      	adds	r7, #12
 80034e0:	46bd      	mov	sp, r7
 80034e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e6:	4770      	bx	lr

080034e8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b083      	sub	sp, #12
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
 80034f0:	460b      	mov	r3, r1
 80034f2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80034f4:	bf00      	nop
 80034f6:	370c      	adds	r7, #12
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr

08003500 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003500:	b480      	push	{r7}
 8003502:	b085      	sub	sp, #20
 8003504:	af00      	add	r7, sp, #0
 8003506:	60f8      	str	r0, [r7, #12]
 8003508:	60b9      	str	r1, [r7, #8]
 800350a:	4613      	mov	r3, r2
 800350c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	68ba      	ldr	r2, [r7, #8]
 8003512:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	88fa      	ldrh	r2, [r7, #6]
 8003518:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	88fa      	ldrh	r2, [r7, #6]
 800351e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2200      	movs	r2, #0
 8003524:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2222      	movs	r2, #34	; 0x22
 800352a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2200      	movs	r2, #0
 8003532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	68da      	ldr	r2, [r3, #12]
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003544:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	695a      	ldr	r2, [r3, #20]
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f042 0201 	orr.w	r2, r2, #1
 8003554:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	68da      	ldr	r2, [r3, #12]
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f042 0220 	orr.w	r2, r2, #32
 8003564:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003566:	2300      	movs	r3, #0
}
 8003568:	4618      	mov	r0, r3
 800356a:	3714      	adds	r7, #20
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr

08003574 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003574:	b480      	push	{r7}
 8003576:	b095      	sub	sp, #84	; 0x54
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	330c      	adds	r3, #12
 8003582:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003584:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003586:	e853 3f00 	ldrex	r3, [r3]
 800358a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800358c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800358e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003592:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	330c      	adds	r3, #12
 800359a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800359c:	643a      	str	r2, [r7, #64]	; 0x40
 800359e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035a0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80035a2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80035a4:	e841 2300 	strex	r3, r2, [r1]
 80035a8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80035aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d1e5      	bne.n	800357c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	3314      	adds	r3, #20
 80035b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035b8:	6a3b      	ldr	r3, [r7, #32]
 80035ba:	e853 3f00 	ldrex	r3, [r3]
 80035be:	61fb      	str	r3, [r7, #28]
   return(result);
 80035c0:	69fb      	ldr	r3, [r7, #28]
 80035c2:	f023 0301 	bic.w	r3, r3, #1
 80035c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	3314      	adds	r3, #20
 80035ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80035d0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80035d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80035d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035d8:	e841 2300 	strex	r3, r2, [r1]
 80035dc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80035de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d1e5      	bne.n	80035b0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d119      	bne.n	8003620 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	330c      	adds	r3, #12
 80035f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	e853 3f00 	ldrex	r3, [r3]
 80035fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	f023 0310 	bic.w	r3, r3, #16
 8003602:	647b      	str	r3, [r7, #68]	; 0x44
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	330c      	adds	r3, #12
 800360a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800360c:	61ba      	str	r2, [r7, #24]
 800360e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003610:	6979      	ldr	r1, [r7, #20]
 8003612:	69ba      	ldr	r2, [r7, #24]
 8003614:	e841 2300 	strex	r3, r2, [r1]
 8003618:	613b      	str	r3, [r7, #16]
   return(result);
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d1e5      	bne.n	80035ec <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2220      	movs	r2, #32
 8003624:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2200      	movs	r2, #0
 800362c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800362e:	bf00      	nop
 8003630:	3754      	adds	r7, #84	; 0x54
 8003632:	46bd      	mov	sp, r7
 8003634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003638:	4770      	bx	lr

0800363a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800363a:	b580      	push	{r7, lr}
 800363c:	b084      	sub	sp, #16
 800363e:	af00      	add	r7, sp, #0
 8003640:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003646:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2200      	movs	r2, #0
 800364c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2200      	movs	r2, #0
 8003652:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003654:	68f8      	ldr	r0, [r7, #12]
 8003656:	f7ff ff3d 	bl	80034d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800365a:	bf00      	nop
 800365c:	3710      	adds	r7, #16
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}

08003662 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003662:	b480      	push	{r7}
 8003664:	b085      	sub	sp, #20
 8003666:	af00      	add	r7, sp, #0
 8003668:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003670:	b2db      	uxtb	r3, r3
 8003672:	2b21      	cmp	r3, #33	; 0x21
 8003674:	d13e      	bne.n	80036f4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800367e:	d114      	bne.n	80036aa <UART_Transmit_IT+0x48>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	691b      	ldr	r3, [r3, #16]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d110      	bne.n	80036aa <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6a1b      	ldr	r3, [r3, #32]
 800368c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	881b      	ldrh	r3, [r3, #0]
 8003692:	461a      	mov	r2, r3
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800369c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6a1b      	ldr	r3, [r3, #32]
 80036a2:	1c9a      	adds	r2, r3, #2
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	621a      	str	r2, [r3, #32]
 80036a8:	e008      	b.n	80036bc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6a1b      	ldr	r3, [r3, #32]
 80036ae:	1c59      	adds	r1, r3, #1
 80036b0:	687a      	ldr	r2, [r7, #4]
 80036b2:	6211      	str	r1, [r2, #32]
 80036b4:	781a      	ldrb	r2, [r3, #0]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80036c0:	b29b      	uxth	r3, r3
 80036c2:	3b01      	subs	r3, #1
 80036c4:	b29b      	uxth	r3, r3
 80036c6:	687a      	ldr	r2, [r7, #4]
 80036c8:	4619      	mov	r1, r3
 80036ca:	84d1      	strh	r1, [r2, #38]	; 0x26
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d10f      	bne.n	80036f0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	68da      	ldr	r2, [r3, #12]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80036de:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	68da      	ldr	r2, [r3, #12]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80036ee:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80036f0:	2300      	movs	r3, #0
 80036f2:	e000      	b.n	80036f6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80036f4:	2302      	movs	r3, #2
  }
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3714      	adds	r7, #20
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr

08003702 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003702:	b580      	push	{r7, lr}
 8003704:	b082      	sub	sp, #8
 8003706:	af00      	add	r7, sp, #0
 8003708:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	68da      	ldr	r2, [r3, #12]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003718:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2220      	movs	r2, #32
 800371e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f7ff fec2 	bl	80034ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003728:	2300      	movs	r3, #0
}
 800372a:	4618      	mov	r0, r3
 800372c:	3708      	adds	r7, #8
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}

08003732 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003732:	b580      	push	{r7, lr}
 8003734:	b08c      	sub	sp, #48	; 0x30
 8003736:	af00      	add	r7, sp, #0
 8003738:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003740:	b2db      	uxtb	r3, r3
 8003742:	2b22      	cmp	r3, #34	; 0x22
 8003744:	f040 80ab 	bne.w	800389e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003750:	d117      	bne.n	8003782 <UART_Receive_IT+0x50>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	691b      	ldr	r3, [r3, #16]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d113      	bne.n	8003782 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800375a:	2300      	movs	r3, #0
 800375c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003762:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	b29b      	uxth	r3, r3
 800376c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003770:	b29a      	uxth	r2, r3
 8003772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003774:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800377a:	1c9a      	adds	r2, r3, #2
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	629a      	str	r2, [r3, #40]	; 0x28
 8003780:	e026      	b.n	80037d0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003786:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003788:	2300      	movs	r3, #0
 800378a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003794:	d007      	beq.n	80037a6 <UART_Receive_IT+0x74>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d10a      	bne.n	80037b4 <UART_Receive_IT+0x82>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	691b      	ldr	r3, [r3, #16]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d106      	bne.n	80037b4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	b2da      	uxtb	r2, r3
 80037ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037b0:	701a      	strb	r2, [r3, #0]
 80037b2:	e008      	b.n	80037c6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	b2db      	uxtb	r3, r3
 80037bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80037c0:	b2da      	uxtb	r2, r3
 80037c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037c4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ca:	1c5a      	adds	r2, r3, #1
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80037d4:	b29b      	uxth	r3, r3
 80037d6:	3b01      	subs	r3, #1
 80037d8:	b29b      	uxth	r3, r3
 80037da:	687a      	ldr	r2, [r7, #4]
 80037dc:	4619      	mov	r1, r3
 80037de:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d15a      	bne.n	800389a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	68da      	ldr	r2, [r3, #12]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f022 0220 	bic.w	r2, r2, #32
 80037f2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	68da      	ldr	r2, [r3, #12]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003802:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	695a      	ldr	r2, [r3, #20]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f022 0201 	bic.w	r2, r2, #1
 8003812:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2220      	movs	r2, #32
 8003818:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003820:	2b01      	cmp	r3, #1
 8003822:	d135      	bne.n	8003890 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2200      	movs	r2, #0
 8003828:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	330c      	adds	r3, #12
 8003830:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	e853 3f00 	ldrex	r3, [r3]
 8003838:	613b      	str	r3, [r7, #16]
   return(result);
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	f023 0310 	bic.w	r3, r3, #16
 8003840:	627b      	str	r3, [r7, #36]	; 0x24
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	330c      	adds	r3, #12
 8003848:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800384a:	623a      	str	r2, [r7, #32]
 800384c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800384e:	69f9      	ldr	r1, [r7, #28]
 8003850:	6a3a      	ldr	r2, [r7, #32]
 8003852:	e841 2300 	strex	r3, r2, [r1]
 8003856:	61bb      	str	r3, [r7, #24]
   return(result);
 8003858:	69bb      	ldr	r3, [r7, #24]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d1e5      	bne.n	800382a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 0310 	and.w	r3, r3, #16
 8003868:	2b10      	cmp	r3, #16
 800386a:	d10a      	bne.n	8003882 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800386c:	2300      	movs	r3, #0
 800386e:	60fb      	str	r3, [r7, #12]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	60fb      	str	r3, [r7, #12]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	60fb      	str	r3, [r7, #12]
 8003880:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003886:	4619      	mov	r1, r3
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	f7ff fe2d 	bl	80034e8 <HAL_UARTEx_RxEventCallback>
 800388e:	e002      	b.n	8003896 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003890:	6878      	ldr	r0, [r7, #4]
 8003892:	f7ff fe15 	bl	80034c0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003896:	2300      	movs	r3, #0
 8003898:	e002      	b.n	80038a0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800389a:	2300      	movs	r3, #0
 800389c:	e000      	b.n	80038a0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800389e:	2302      	movs	r3, #2
  }
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	3730      	adds	r7, #48	; 0x30
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}

080038a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038ac:	b09f      	sub	sp, #124	; 0x7c
 80038ae:	af00      	add	r7, sp, #0
 80038b0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	691b      	ldr	r3, [r3, #16]
 80038b8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80038bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038be:	68d9      	ldr	r1, [r3, #12]
 80038c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	ea40 0301 	orr.w	r3, r0, r1
 80038c8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80038ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038cc:	689a      	ldr	r2, [r3, #8]
 80038ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038d0:	691b      	ldr	r3, [r3, #16]
 80038d2:	431a      	orrs	r2, r3
 80038d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038d6:	695b      	ldr	r3, [r3, #20]
 80038d8:	431a      	orrs	r2, r3
 80038da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038dc:	69db      	ldr	r3, [r3, #28]
 80038de:	4313      	orrs	r3, r2
 80038e0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80038e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	68db      	ldr	r3, [r3, #12]
 80038e8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80038ec:	f021 010c 	bic.w	r1, r1, #12
 80038f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80038f6:	430b      	orrs	r3, r1
 80038f8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80038fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	695b      	ldr	r3, [r3, #20]
 8003900:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003904:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003906:	6999      	ldr	r1, [r3, #24]
 8003908:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	ea40 0301 	orr.w	r3, r0, r1
 8003910:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003912:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	4bc5      	ldr	r3, [pc, #788]	; (8003c2c <UART_SetConfig+0x384>)
 8003918:	429a      	cmp	r2, r3
 800391a:	d004      	beq.n	8003926 <UART_SetConfig+0x7e>
 800391c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	4bc3      	ldr	r3, [pc, #780]	; (8003c30 <UART_SetConfig+0x388>)
 8003922:	429a      	cmp	r2, r3
 8003924:	d103      	bne.n	800392e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003926:	f7fe fdd5 	bl	80024d4 <HAL_RCC_GetPCLK2Freq>
 800392a:	6778      	str	r0, [r7, #116]	; 0x74
 800392c:	e002      	b.n	8003934 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800392e:	f7fe fdbd 	bl	80024ac <HAL_RCC_GetPCLK1Freq>
 8003932:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003934:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003936:	69db      	ldr	r3, [r3, #28]
 8003938:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800393c:	f040 80b6 	bne.w	8003aac <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003940:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003942:	461c      	mov	r4, r3
 8003944:	f04f 0500 	mov.w	r5, #0
 8003948:	4622      	mov	r2, r4
 800394a:	462b      	mov	r3, r5
 800394c:	1891      	adds	r1, r2, r2
 800394e:	6439      	str	r1, [r7, #64]	; 0x40
 8003950:	415b      	adcs	r3, r3
 8003952:	647b      	str	r3, [r7, #68]	; 0x44
 8003954:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003958:	1912      	adds	r2, r2, r4
 800395a:	eb45 0303 	adc.w	r3, r5, r3
 800395e:	f04f 0000 	mov.w	r0, #0
 8003962:	f04f 0100 	mov.w	r1, #0
 8003966:	00d9      	lsls	r1, r3, #3
 8003968:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800396c:	00d0      	lsls	r0, r2, #3
 800396e:	4602      	mov	r2, r0
 8003970:	460b      	mov	r3, r1
 8003972:	1911      	adds	r1, r2, r4
 8003974:	6639      	str	r1, [r7, #96]	; 0x60
 8003976:	416b      	adcs	r3, r5
 8003978:	667b      	str	r3, [r7, #100]	; 0x64
 800397a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	461a      	mov	r2, r3
 8003980:	f04f 0300 	mov.w	r3, #0
 8003984:	1891      	adds	r1, r2, r2
 8003986:	63b9      	str	r1, [r7, #56]	; 0x38
 8003988:	415b      	adcs	r3, r3
 800398a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800398c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003990:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003994:	f7fc fc18 	bl	80001c8 <__aeabi_uldivmod>
 8003998:	4602      	mov	r2, r0
 800399a:	460b      	mov	r3, r1
 800399c:	4ba5      	ldr	r3, [pc, #660]	; (8003c34 <UART_SetConfig+0x38c>)
 800399e:	fba3 2302 	umull	r2, r3, r3, r2
 80039a2:	095b      	lsrs	r3, r3, #5
 80039a4:	011e      	lsls	r6, r3, #4
 80039a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039a8:	461c      	mov	r4, r3
 80039aa:	f04f 0500 	mov.w	r5, #0
 80039ae:	4622      	mov	r2, r4
 80039b0:	462b      	mov	r3, r5
 80039b2:	1891      	adds	r1, r2, r2
 80039b4:	6339      	str	r1, [r7, #48]	; 0x30
 80039b6:	415b      	adcs	r3, r3
 80039b8:	637b      	str	r3, [r7, #52]	; 0x34
 80039ba:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80039be:	1912      	adds	r2, r2, r4
 80039c0:	eb45 0303 	adc.w	r3, r5, r3
 80039c4:	f04f 0000 	mov.w	r0, #0
 80039c8:	f04f 0100 	mov.w	r1, #0
 80039cc:	00d9      	lsls	r1, r3, #3
 80039ce:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80039d2:	00d0      	lsls	r0, r2, #3
 80039d4:	4602      	mov	r2, r0
 80039d6:	460b      	mov	r3, r1
 80039d8:	1911      	adds	r1, r2, r4
 80039da:	65b9      	str	r1, [r7, #88]	; 0x58
 80039dc:	416b      	adcs	r3, r5
 80039de:	65fb      	str	r3, [r7, #92]	; 0x5c
 80039e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	461a      	mov	r2, r3
 80039e6:	f04f 0300 	mov.w	r3, #0
 80039ea:	1891      	adds	r1, r2, r2
 80039ec:	62b9      	str	r1, [r7, #40]	; 0x28
 80039ee:	415b      	adcs	r3, r3
 80039f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80039f6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80039fa:	f7fc fbe5 	bl	80001c8 <__aeabi_uldivmod>
 80039fe:	4602      	mov	r2, r0
 8003a00:	460b      	mov	r3, r1
 8003a02:	4b8c      	ldr	r3, [pc, #560]	; (8003c34 <UART_SetConfig+0x38c>)
 8003a04:	fba3 1302 	umull	r1, r3, r3, r2
 8003a08:	095b      	lsrs	r3, r3, #5
 8003a0a:	2164      	movs	r1, #100	; 0x64
 8003a0c:	fb01 f303 	mul.w	r3, r1, r3
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	00db      	lsls	r3, r3, #3
 8003a14:	3332      	adds	r3, #50	; 0x32
 8003a16:	4a87      	ldr	r2, [pc, #540]	; (8003c34 <UART_SetConfig+0x38c>)
 8003a18:	fba2 2303 	umull	r2, r3, r2, r3
 8003a1c:	095b      	lsrs	r3, r3, #5
 8003a1e:	005b      	lsls	r3, r3, #1
 8003a20:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003a24:	441e      	add	r6, r3
 8003a26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f04f 0100 	mov.w	r1, #0
 8003a2e:	4602      	mov	r2, r0
 8003a30:	460b      	mov	r3, r1
 8003a32:	1894      	adds	r4, r2, r2
 8003a34:	623c      	str	r4, [r7, #32]
 8003a36:	415b      	adcs	r3, r3
 8003a38:	627b      	str	r3, [r7, #36]	; 0x24
 8003a3a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003a3e:	1812      	adds	r2, r2, r0
 8003a40:	eb41 0303 	adc.w	r3, r1, r3
 8003a44:	f04f 0400 	mov.w	r4, #0
 8003a48:	f04f 0500 	mov.w	r5, #0
 8003a4c:	00dd      	lsls	r5, r3, #3
 8003a4e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003a52:	00d4      	lsls	r4, r2, #3
 8003a54:	4622      	mov	r2, r4
 8003a56:	462b      	mov	r3, r5
 8003a58:	1814      	adds	r4, r2, r0
 8003a5a:	653c      	str	r4, [r7, #80]	; 0x50
 8003a5c:	414b      	adcs	r3, r1
 8003a5e:	657b      	str	r3, [r7, #84]	; 0x54
 8003a60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	461a      	mov	r2, r3
 8003a66:	f04f 0300 	mov.w	r3, #0
 8003a6a:	1891      	adds	r1, r2, r2
 8003a6c:	61b9      	str	r1, [r7, #24]
 8003a6e:	415b      	adcs	r3, r3
 8003a70:	61fb      	str	r3, [r7, #28]
 8003a72:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a76:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003a7a:	f7fc fba5 	bl	80001c8 <__aeabi_uldivmod>
 8003a7e:	4602      	mov	r2, r0
 8003a80:	460b      	mov	r3, r1
 8003a82:	4b6c      	ldr	r3, [pc, #432]	; (8003c34 <UART_SetConfig+0x38c>)
 8003a84:	fba3 1302 	umull	r1, r3, r3, r2
 8003a88:	095b      	lsrs	r3, r3, #5
 8003a8a:	2164      	movs	r1, #100	; 0x64
 8003a8c:	fb01 f303 	mul.w	r3, r1, r3
 8003a90:	1ad3      	subs	r3, r2, r3
 8003a92:	00db      	lsls	r3, r3, #3
 8003a94:	3332      	adds	r3, #50	; 0x32
 8003a96:	4a67      	ldr	r2, [pc, #412]	; (8003c34 <UART_SetConfig+0x38c>)
 8003a98:	fba2 2303 	umull	r2, r3, r2, r3
 8003a9c:	095b      	lsrs	r3, r3, #5
 8003a9e:	f003 0207 	and.w	r2, r3, #7
 8003aa2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4432      	add	r2, r6
 8003aa8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003aaa:	e0b9      	b.n	8003c20 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003aac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003aae:	461c      	mov	r4, r3
 8003ab0:	f04f 0500 	mov.w	r5, #0
 8003ab4:	4622      	mov	r2, r4
 8003ab6:	462b      	mov	r3, r5
 8003ab8:	1891      	adds	r1, r2, r2
 8003aba:	6139      	str	r1, [r7, #16]
 8003abc:	415b      	adcs	r3, r3
 8003abe:	617b      	str	r3, [r7, #20]
 8003ac0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003ac4:	1912      	adds	r2, r2, r4
 8003ac6:	eb45 0303 	adc.w	r3, r5, r3
 8003aca:	f04f 0000 	mov.w	r0, #0
 8003ace:	f04f 0100 	mov.w	r1, #0
 8003ad2:	00d9      	lsls	r1, r3, #3
 8003ad4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003ad8:	00d0      	lsls	r0, r2, #3
 8003ada:	4602      	mov	r2, r0
 8003adc:	460b      	mov	r3, r1
 8003ade:	eb12 0804 	adds.w	r8, r2, r4
 8003ae2:	eb43 0905 	adc.w	r9, r3, r5
 8003ae6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	4618      	mov	r0, r3
 8003aec:	f04f 0100 	mov.w	r1, #0
 8003af0:	f04f 0200 	mov.w	r2, #0
 8003af4:	f04f 0300 	mov.w	r3, #0
 8003af8:	008b      	lsls	r3, r1, #2
 8003afa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003afe:	0082      	lsls	r2, r0, #2
 8003b00:	4640      	mov	r0, r8
 8003b02:	4649      	mov	r1, r9
 8003b04:	f7fc fb60 	bl	80001c8 <__aeabi_uldivmod>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	460b      	mov	r3, r1
 8003b0c:	4b49      	ldr	r3, [pc, #292]	; (8003c34 <UART_SetConfig+0x38c>)
 8003b0e:	fba3 2302 	umull	r2, r3, r3, r2
 8003b12:	095b      	lsrs	r3, r3, #5
 8003b14:	011e      	lsls	r6, r3, #4
 8003b16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f04f 0100 	mov.w	r1, #0
 8003b1e:	4602      	mov	r2, r0
 8003b20:	460b      	mov	r3, r1
 8003b22:	1894      	adds	r4, r2, r2
 8003b24:	60bc      	str	r4, [r7, #8]
 8003b26:	415b      	adcs	r3, r3
 8003b28:	60fb      	str	r3, [r7, #12]
 8003b2a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003b2e:	1812      	adds	r2, r2, r0
 8003b30:	eb41 0303 	adc.w	r3, r1, r3
 8003b34:	f04f 0400 	mov.w	r4, #0
 8003b38:	f04f 0500 	mov.w	r5, #0
 8003b3c:	00dd      	lsls	r5, r3, #3
 8003b3e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003b42:	00d4      	lsls	r4, r2, #3
 8003b44:	4622      	mov	r2, r4
 8003b46:	462b      	mov	r3, r5
 8003b48:	1814      	adds	r4, r2, r0
 8003b4a:	64bc      	str	r4, [r7, #72]	; 0x48
 8003b4c:	414b      	adcs	r3, r1
 8003b4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	4618      	mov	r0, r3
 8003b56:	f04f 0100 	mov.w	r1, #0
 8003b5a:	f04f 0200 	mov.w	r2, #0
 8003b5e:	f04f 0300 	mov.w	r3, #0
 8003b62:	008b      	lsls	r3, r1, #2
 8003b64:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003b68:	0082      	lsls	r2, r0, #2
 8003b6a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003b6e:	f7fc fb2b 	bl	80001c8 <__aeabi_uldivmod>
 8003b72:	4602      	mov	r2, r0
 8003b74:	460b      	mov	r3, r1
 8003b76:	4b2f      	ldr	r3, [pc, #188]	; (8003c34 <UART_SetConfig+0x38c>)
 8003b78:	fba3 1302 	umull	r1, r3, r3, r2
 8003b7c:	095b      	lsrs	r3, r3, #5
 8003b7e:	2164      	movs	r1, #100	; 0x64
 8003b80:	fb01 f303 	mul.w	r3, r1, r3
 8003b84:	1ad3      	subs	r3, r2, r3
 8003b86:	011b      	lsls	r3, r3, #4
 8003b88:	3332      	adds	r3, #50	; 0x32
 8003b8a:	4a2a      	ldr	r2, [pc, #168]	; (8003c34 <UART_SetConfig+0x38c>)
 8003b8c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b90:	095b      	lsrs	r3, r3, #5
 8003b92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b96:	441e      	add	r6, r3
 8003b98:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f04f 0100 	mov.w	r1, #0
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	460b      	mov	r3, r1
 8003ba4:	1894      	adds	r4, r2, r2
 8003ba6:	603c      	str	r4, [r7, #0]
 8003ba8:	415b      	adcs	r3, r3
 8003baa:	607b      	str	r3, [r7, #4]
 8003bac:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003bb0:	1812      	adds	r2, r2, r0
 8003bb2:	eb41 0303 	adc.w	r3, r1, r3
 8003bb6:	f04f 0400 	mov.w	r4, #0
 8003bba:	f04f 0500 	mov.w	r5, #0
 8003bbe:	00dd      	lsls	r5, r3, #3
 8003bc0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003bc4:	00d4      	lsls	r4, r2, #3
 8003bc6:	4622      	mov	r2, r4
 8003bc8:	462b      	mov	r3, r5
 8003bca:	eb12 0a00 	adds.w	sl, r2, r0
 8003bce:	eb43 0b01 	adc.w	fp, r3, r1
 8003bd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f04f 0100 	mov.w	r1, #0
 8003bdc:	f04f 0200 	mov.w	r2, #0
 8003be0:	f04f 0300 	mov.w	r3, #0
 8003be4:	008b      	lsls	r3, r1, #2
 8003be6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003bea:	0082      	lsls	r2, r0, #2
 8003bec:	4650      	mov	r0, sl
 8003bee:	4659      	mov	r1, fp
 8003bf0:	f7fc faea 	bl	80001c8 <__aeabi_uldivmod>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	460b      	mov	r3, r1
 8003bf8:	4b0e      	ldr	r3, [pc, #56]	; (8003c34 <UART_SetConfig+0x38c>)
 8003bfa:	fba3 1302 	umull	r1, r3, r3, r2
 8003bfe:	095b      	lsrs	r3, r3, #5
 8003c00:	2164      	movs	r1, #100	; 0x64
 8003c02:	fb01 f303 	mul.w	r3, r1, r3
 8003c06:	1ad3      	subs	r3, r2, r3
 8003c08:	011b      	lsls	r3, r3, #4
 8003c0a:	3332      	adds	r3, #50	; 0x32
 8003c0c:	4a09      	ldr	r2, [pc, #36]	; (8003c34 <UART_SetConfig+0x38c>)
 8003c0e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c12:	095b      	lsrs	r3, r3, #5
 8003c14:	f003 020f 	and.w	r2, r3, #15
 8003c18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4432      	add	r2, r6
 8003c1e:	609a      	str	r2, [r3, #8]
}
 8003c20:	bf00      	nop
 8003c22:	377c      	adds	r7, #124	; 0x7c
 8003c24:	46bd      	mov	sp, r7
 8003c26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c2a:	bf00      	nop
 8003c2c:	40011000 	.word	0x40011000
 8003c30:	40011400 	.word	0x40011400
 8003c34:	51eb851f 	.word	0x51eb851f

08003c38 <atoi>:
 8003c38:	220a      	movs	r2, #10
 8003c3a:	2100      	movs	r1, #0
 8003c3c:	f000 b8b6 	b.w	8003dac <strtol>

08003c40 <__errno>:
 8003c40:	4b01      	ldr	r3, [pc, #4]	; (8003c48 <__errno+0x8>)
 8003c42:	6818      	ldr	r0, [r3, #0]
 8003c44:	4770      	bx	lr
 8003c46:	bf00      	nop
 8003c48:	2000000c 	.word	0x2000000c

08003c4c <__libc_init_array>:
 8003c4c:	b570      	push	{r4, r5, r6, lr}
 8003c4e:	4d0d      	ldr	r5, [pc, #52]	; (8003c84 <__libc_init_array+0x38>)
 8003c50:	4c0d      	ldr	r4, [pc, #52]	; (8003c88 <__libc_init_array+0x3c>)
 8003c52:	1b64      	subs	r4, r4, r5
 8003c54:	10a4      	asrs	r4, r4, #2
 8003c56:	2600      	movs	r6, #0
 8003c58:	42a6      	cmp	r6, r4
 8003c5a:	d109      	bne.n	8003c70 <__libc_init_array+0x24>
 8003c5c:	4d0b      	ldr	r5, [pc, #44]	; (8003c8c <__libc_init_array+0x40>)
 8003c5e:	4c0c      	ldr	r4, [pc, #48]	; (8003c90 <__libc_init_array+0x44>)
 8003c60:	f000 f8ae 	bl	8003dc0 <_init>
 8003c64:	1b64      	subs	r4, r4, r5
 8003c66:	10a4      	asrs	r4, r4, #2
 8003c68:	2600      	movs	r6, #0
 8003c6a:	42a6      	cmp	r6, r4
 8003c6c:	d105      	bne.n	8003c7a <__libc_init_array+0x2e>
 8003c6e:	bd70      	pop	{r4, r5, r6, pc}
 8003c70:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c74:	4798      	blx	r3
 8003c76:	3601      	adds	r6, #1
 8003c78:	e7ee      	b.n	8003c58 <__libc_init_array+0xc>
 8003c7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c7e:	4798      	blx	r3
 8003c80:	3601      	adds	r6, #1
 8003c82:	e7f2      	b.n	8003c6a <__libc_init_array+0x1e>
 8003c84:	08003efc 	.word	0x08003efc
 8003c88:	08003efc 	.word	0x08003efc
 8003c8c:	08003efc 	.word	0x08003efc
 8003c90:	08003f00 	.word	0x08003f00

08003c94 <memset>:
 8003c94:	4402      	add	r2, r0
 8003c96:	4603      	mov	r3, r0
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d100      	bne.n	8003c9e <memset+0xa>
 8003c9c:	4770      	bx	lr
 8003c9e:	f803 1b01 	strb.w	r1, [r3], #1
 8003ca2:	e7f9      	b.n	8003c98 <memset+0x4>

08003ca4 <_strtol_l.isra.0>:
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003caa:	d001      	beq.n	8003cb0 <_strtol_l.isra.0+0xc>
 8003cac:	2b24      	cmp	r3, #36	; 0x24
 8003cae:	d906      	bls.n	8003cbe <_strtol_l.isra.0+0x1a>
 8003cb0:	f7ff ffc6 	bl	8003c40 <__errno>
 8003cb4:	2316      	movs	r3, #22
 8003cb6:	6003      	str	r3, [r0, #0]
 8003cb8:	2000      	movs	r0, #0
 8003cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cbe:	4f3a      	ldr	r7, [pc, #232]	; (8003da8 <_strtol_l.isra.0+0x104>)
 8003cc0:	468e      	mov	lr, r1
 8003cc2:	4676      	mov	r6, lr
 8003cc4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8003cc8:	5de5      	ldrb	r5, [r4, r7]
 8003cca:	f015 0508 	ands.w	r5, r5, #8
 8003cce:	d1f8      	bne.n	8003cc2 <_strtol_l.isra.0+0x1e>
 8003cd0:	2c2d      	cmp	r4, #45	; 0x2d
 8003cd2:	d134      	bne.n	8003d3e <_strtol_l.isra.0+0x9a>
 8003cd4:	f89e 4000 	ldrb.w	r4, [lr]
 8003cd8:	f04f 0801 	mov.w	r8, #1
 8003cdc:	f106 0e02 	add.w	lr, r6, #2
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d05c      	beq.n	8003d9e <_strtol_l.isra.0+0xfa>
 8003ce4:	2b10      	cmp	r3, #16
 8003ce6:	d10c      	bne.n	8003d02 <_strtol_l.isra.0+0x5e>
 8003ce8:	2c30      	cmp	r4, #48	; 0x30
 8003cea:	d10a      	bne.n	8003d02 <_strtol_l.isra.0+0x5e>
 8003cec:	f89e 4000 	ldrb.w	r4, [lr]
 8003cf0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8003cf4:	2c58      	cmp	r4, #88	; 0x58
 8003cf6:	d14d      	bne.n	8003d94 <_strtol_l.isra.0+0xf0>
 8003cf8:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8003cfc:	2310      	movs	r3, #16
 8003cfe:	f10e 0e02 	add.w	lr, lr, #2
 8003d02:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8003d06:	f10c 3cff 	add.w	ip, ip, #4294967295
 8003d0a:	2600      	movs	r6, #0
 8003d0c:	fbbc f9f3 	udiv	r9, ip, r3
 8003d10:	4635      	mov	r5, r6
 8003d12:	fb03 ca19 	mls	sl, r3, r9, ip
 8003d16:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8003d1a:	2f09      	cmp	r7, #9
 8003d1c:	d818      	bhi.n	8003d50 <_strtol_l.isra.0+0xac>
 8003d1e:	463c      	mov	r4, r7
 8003d20:	42a3      	cmp	r3, r4
 8003d22:	dd24      	ble.n	8003d6e <_strtol_l.isra.0+0xca>
 8003d24:	2e00      	cmp	r6, #0
 8003d26:	db1f      	blt.n	8003d68 <_strtol_l.isra.0+0xc4>
 8003d28:	45a9      	cmp	r9, r5
 8003d2a:	d31d      	bcc.n	8003d68 <_strtol_l.isra.0+0xc4>
 8003d2c:	d101      	bne.n	8003d32 <_strtol_l.isra.0+0x8e>
 8003d2e:	45a2      	cmp	sl, r4
 8003d30:	db1a      	blt.n	8003d68 <_strtol_l.isra.0+0xc4>
 8003d32:	fb05 4503 	mla	r5, r5, r3, r4
 8003d36:	2601      	movs	r6, #1
 8003d38:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8003d3c:	e7eb      	b.n	8003d16 <_strtol_l.isra.0+0x72>
 8003d3e:	2c2b      	cmp	r4, #43	; 0x2b
 8003d40:	bf08      	it	eq
 8003d42:	f89e 4000 	ldrbeq.w	r4, [lr]
 8003d46:	46a8      	mov	r8, r5
 8003d48:	bf08      	it	eq
 8003d4a:	f106 0e02 	addeq.w	lr, r6, #2
 8003d4e:	e7c7      	b.n	8003ce0 <_strtol_l.isra.0+0x3c>
 8003d50:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8003d54:	2f19      	cmp	r7, #25
 8003d56:	d801      	bhi.n	8003d5c <_strtol_l.isra.0+0xb8>
 8003d58:	3c37      	subs	r4, #55	; 0x37
 8003d5a:	e7e1      	b.n	8003d20 <_strtol_l.isra.0+0x7c>
 8003d5c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8003d60:	2f19      	cmp	r7, #25
 8003d62:	d804      	bhi.n	8003d6e <_strtol_l.isra.0+0xca>
 8003d64:	3c57      	subs	r4, #87	; 0x57
 8003d66:	e7db      	b.n	8003d20 <_strtol_l.isra.0+0x7c>
 8003d68:	f04f 36ff 	mov.w	r6, #4294967295
 8003d6c:	e7e4      	b.n	8003d38 <_strtol_l.isra.0+0x94>
 8003d6e:	2e00      	cmp	r6, #0
 8003d70:	da05      	bge.n	8003d7e <_strtol_l.isra.0+0xda>
 8003d72:	2322      	movs	r3, #34	; 0x22
 8003d74:	6003      	str	r3, [r0, #0]
 8003d76:	4665      	mov	r5, ip
 8003d78:	b942      	cbnz	r2, 8003d8c <_strtol_l.isra.0+0xe8>
 8003d7a:	4628      	mov	r0, r5
 8003d7c:	e79d      	b.n	8003cba <_strtol_l.isra.0+0x16>
 8003d7e:	f1b8 0f00 	cmp.w	r8, #0
 8003d82:	d000      	beq.n	8003d86 <_strtol_l.isra.0+0xe2>
 8003d84:	426d      	negs	r5, r5
 8003d86:	2a00      	cmp	r2, #0
 8003d88:	d0f7      	beq.n	8003d7a <_strtol_l.isra.0+0xd6>
 8003d8a:	b10e      	cbz	r6, 8003d90 <_strtol_l.isra.0+0xec>
 8003d8c:	f10e 31ff 	add.w	r1, lr, #4294967295
 8003d90:	6011      	str	r1, [r2, #0]
 8003d92:	e7f2      	b.n	8003d7a <_strtol_l.isra.0+0xd6>
 8003d94:	2430      	movs	r4, #48	; 0x30
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d1b3      	bne.n	8003d02 <_strtol_l.isra.0+0x5e>
 8003d9a:	2308      	movs	r3, #8
 8003d9c:	e7b1      	b.n	8003d02 <_strtol_l.isra.0+0x5e>
 8003d9e:	2c30      	cmp	r4, #48	; 0x30
 8003da0:	d0a4      	beq.n	8003cec <_strtol_l.isra.0+0x48>
 8003da2:	230a      	movs	r3, #10
 8003da4:	e7ad      	b.n	8003d02 <_strtol_l.isra.0+0x5e>
 8003da6:	bf00      	nop
 8003da8:	08003df1 	.word	0x08003df1

08003dac <strtol>:
 8003dac:	4613      	mov	r3, r2
 8003dae:	460a      	mov	r2, r1
 8003db0:	4601      	mov	r1, r0
 8003db2:	4802      	ldr	r0, [pc, #8]	; (8003dbc <strtol+0x10>)
 8003db4:	6800      	ldr	r0, [r0, #0]
 8003db6:	f7ff bf75 	b.w	8003ca4 <_strtol_l.isra.0>
 8003dba:	bf00      	nop
 8003dbc:	2000000c 	.word	0x2000000c

08003dc0 <_init>:
 8003dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dc2:	bf00      	nop
 8003dc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003dc6:	bc08      	pop	{r3}
 8003dc8:	469e      	mov	lr, r3
 8003dca:	4770      	bx	lr

08003dcc <_fini>:
 8003dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dce:	bf00      	nop
 8003dd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003dd2:	bc08      	pop	{r3}
 8003dd4:	469e      	mov	lr, r3
 8003dd6:	4770      	bx	lr
